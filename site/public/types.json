[[{"code":"{\n  \"name\": \"react\",\n  \"description\": \"React is a JavaScript library for building user interfaces.\",\n  \"keywords\": [\n    \"react\"\n  ],\n  \"version\": \"18.2.0\",\n  \"homepage\": \"https://reactjs.org/\",\n  \"bugs\": \"https://github.com/facebook/react/issues\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"LICENSE\",\n    \"README.md\",\n    \"index.js\",\n    \"cjs/\",\n    \"umd/\",\n    \"jsx-runtime.js\",\n    \"jsx-dev-runtime.js\",\n    \"react.shared-subset.js\"\n  ],\n  \"main\": \"index.js\",\n  \"exports\": {\n    \".\": {\n      \"react-server\": \"./react.shared-subset.js\",\n      \"default\": \"./index.js\"\n    },\n    \"./package.json\": \"./package.json\",\n    \"./jsx-runtime\": \"./jsx-runtime.js\",\n    \"./jsx-dev-runtime\": \"./jsx-dev-runtime.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/facebook/react.git\",\n    \"directory\": \"packages/react\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  },\n  \"dependencies\": {\n    \"loose-envify\": \"^1.1.0\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"loose-envify\"\n    ]\n  }\n}","path":"file:///node_modules/react/package.json"},{"code":"/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event { }\ninterface AnimationEvent extends Event { }\ninterface ClipboardEvent extends Event { }\ninterface CompositionEvent extends Event { }\ninterface DragEvent extends Event { }\ninterface FocusEvent extends Event { }\ninterface KeyboardEvent extends Event { }\ninterface MouseEvent extends Event { }\ninterface TouchEvent extends Event { }\ninterface PointerEvent extends Event { }\ninterface TransitionEvent extends Event { }\ninterface UIEvent extends Event { }\ninterface WheelEvent extends Event { }\n\ninterface EventTarget { }\ninterface Document { }\ninterface DataTransfer { }\ninterface StyleMedia { }\n\ninterface Element { }\ninterface DocumentFragment { }\n\ninterface HTMLElement extends Element { }\ninterface HTMLAnchorElement extends HTMLElement { }\ninterface HTMLAreaElement extends HTMLElement { }\ninterface HTMLAudioElement extends HTMLElement { }\ninterface HTMLBaseElement extends HTMLElement { }\ninterface HTMLBodyElement extends HTMLElement { }\ninterface HTMLBRElement extends HTMLElement { }\ninterface HTMLButtonElement extends HTMLElement { }\ninterface HTMLCanvasElement extends HTMLElement { }\ninterface HTMLDataElement extends HTMLElement { }\ninterface HTMLDataListElement extends HTMLElement { }\ninterface HTMLDetailsElement extends HTMLElement { }\ninterface HTMLDialogElement extends HTMLElement { }\ninterface HTMLDivElement extends HTMLElement { }\ninterface HTMLDListElement extends HTMLElement { }\ninterface HTMLEmbedElement extends HTMLElement { }\ninterface HTMLFieldSetElement extends HTMLElement { }\ninterface HTMLFormElement extends HTMLElement { }\ninterface HTMLHeadingElement extends HTMLElement { }\ninterface HTMLHeadElement extends HTMLElement { }\ninterface HTMLHRElement extends HTMLElement { }\ninterface HTMLHtmlElement extends HTMLElement { }\ninterface HTMLIFrameElement extends HTMLElement { }\ninterface HTMLImageElement extends HTMLElement { }\ninterface HTMLInputElement extends HTMLElement { }\ninterface HTMLModElement extends HTMLElement { }\ninterface HTMLLabelElement extends HTMLElement { }\ninterface HTMLLegendElement extends HTMLElement { }\ninterface HTMLLIElement extends HTMLElement { }\ninterface HTMLLinkElement extends HTMLElement { }\ninterface HTMLMapElement extends HTMLElement { }\ninterface HTMLMetaElement extends HTMLElement { }\ninterface HTMLMeterElement extends HTMLElement { }\ninterface HTMLObjectElement extends HTMLElement { }\ninterface HTMLOListElement extends HTMLElement { }\ninterface HTMLOptGroupElement extends HTMLElement { }\ninterface HTMLOptionElement extends HTMLElement { }\ninterface HTMLOutputElement extends HTMLElement { }\ninterface HTMLParagraphElement extends HTMLElement { }\ninterface HTMLParamElement extends HTMLElement { }\ninterface HTMLPreElement extends HTMLElement { }\ninterface HTMLProgressElement extends HTMLElement { }\ninterface HTMLQuoteElement extends HTMLElement { }\ninterface HTMLSlotElement extends HTMLElement { }\ninterface HTMLScriptElement extends HTMLElement { }\ninterface HTMLSelectElement extends HTMLElement { }\ninterface HTMLSourceElement extends HTMLElement { }\ninterface HTMLSpanElement extends HTMLElement { }\ninterface HTMLStyleElement extends HTMLElement { }\ninterface HTMLTableElement extends HTMLElement { }\ninterface HTMLTableColElement extends HTMLElement { }\ninterface HTMLTableDataCellElement extends HTMLElement { }\ninterface HTMLTableHeaderCellElement extends HTMLElement { }\ninterface HTMLTableRowElement extends HTMLElement { }\ninterface HTMLTableSectionElement extends HTMLElement { }\ninterface HTMLTemplateElement extends HTMLElement { }\ninterface HTMLTextAreaElement extends HTMLElement { }\ninterface HTMLTimeElement extends HTMLElement { }\ninterface HTMLTitleElement extends HTMLElement { }\ninterface HTMLTrackElement extends HTMLElement { }\ninterface HTMLUListElement extends HTMLElement { }\ninterface HTMLVideoElement extends HTMLElement { }\ninterface HTMLWebViewElement extends HTMLElement { }\n\ninterface SVGElement extends Element { }\ninterface SVGSVGElement extends SVGElement { }\ninterface SVGCircleElement extends SVGElement { }\ninterface SVGClipPathElement extends SVGElement { }\ninterface SVGDefsElement extends SVGElement { }\ninterface SVGDescElement extends SVGElement { }\ninterface SVGEllipseElement extends SVGElement { }\ninterface SVGFEBlendElement extends SVGElement { }\ninterface SVGFEColorMatrixElement extends SVGElement { }\ninterface SVGFEComponentTransferElement extends SVGElement { }\ninterface SVGFECompositeElement extends SVGElement { }\ninterface SVGFEConvolveMatrixElement extends SVGElement { }\ninterface SVGFEDiffuseLightingElement extends SVGElement { }\ninterface SVGFEDisplacementMapElement extends SVGElement { }\ninterface SVGFEDistantLightElement extends SVGElement { }\ninterface SVGFEDropShadowElement extends SVGElement { }\ninterface SVGFEFloodElement extends SVGElement { }\ninterface SVGFEFuncAElement extends SVGElement { }\ninterface SVGFEFuncBElement extends SVGElement { }\ninterface SVGFEFuncGElement extends SVGElement { }\ninterface SVGFEFuncRElement extends SVGElement { }\ninterface SVGFEGaussianBlurElement extends SVGElement { }\ninterface SVGFEImageElement extends SVGElement { }\ninterface SVGFEMergeElement extends SVGElement { }\ninterface SVGFEMergeNodeElement extends SVGElement { }\ninterface SVGFEMorphologyElement extends SVGElement { }\ninterface SVGFEOffsetElement extends SVGElement { }\ninterface SVGFEPointLightElement extends SVGElement { }\ninterface SVGFESpecularLightingElement extends SVGElement { }\ninterface SVGFESpotLightElement extends SVGElement { }\ninterface SVGFETileElement extends SVGElement { }\ninterface SVGFETurbulenceElement extends SVGElement { }\ninterface SVGFilterElement extends SVGElement { }\ninterface SVGForeignObjectElement extends SVGElement { }\ninterface SVGGElement extends SVGElement { }\ninterface SVGImageElement extends SVGElement { }\ninterface SVGLineElement extends SVGElement { }\ninterface SVGLinearGradientElement extends SVGElement { }\ninterface SVGMarkerElement extends SVGElement { }\ninterface SVGMaskElement extends SVGElement { }\ninterface SVGMetadataElement extends SVGElement { }\ninterface SVGPathElement extends SVGElement { }\ninterface SVGPatternElement extends SVGElement { }\ninterface SVGPolygonElement extends SVGElement { }\ninterface SVGPolylineElement extends SVGElement { }\ninterface SVGRadialGradientElement extends SVGElement { }\ninterface SVGRectElement extends SVGElement { }\ninterface SVGStopElement extends SVGElement { }\ninterface SVGSwitchElement extends SVGElement { }\ninterface SVGSymbolElement extends SVGElement { }\ninterface SVGTextElement extends SVGElement { }\ninterface SVGTextPathElement extends SVGElement { }\ninterface SVGTSpanElement extends SVGElement { }\ninterface SVGUseElement extends SVGElement { }\ninterface SVGViewElement extends SVGElement { }\n\ninterface Text { }\ninterface TouchList { }\ninterface WebGLRenderingContext { }\ninterface WebGL2RenderingContext { }\n\ninterface TrustedHTML { }\n","path":"file:///node_modules/react/global.d.ts"},{"code":"/**\n * These are types for things that are present in the `experimental` builds of React but not yet\n * on a stable build.\n *\n * Once they are promoted to stable they can just be moved to the main index file.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/experimental\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/experimental'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/experimental\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/master/packages/react/src/React.js to see how the exports are declared,\n// and https://github.com/facebook/react/blob/master/packages/shared/ReactFeatureFlags.js to verify which APIs are\n// flagged experimental or not. Experimental APIs will be tagged with `__EXPERIMENTAL__`.\n//\n// For the inputs of types exported as simply a fiber tag, the `beginWork` function of ReactFiberBeginWork.js\n// is a good place to start looking for details; it generally calls prop validation functions or delegates\n// all tasks done as part of the render phase (the concurrent part of the React update cycle).\n//\n// Suspense-related handling can be found in ReactFiberThrow.js.\n\nimport React = require('./next');\n\nexport {};\n\ndeclare module '.' {\n    export interface SuspenseProps {\n        /**\n         * The presence of this prop indicates that the content is computationally expensive to render.\n         * In other words, the tree is CPU bound and not I/O bound (e.g. due to fetching data).\n         * @see {@link https://github.com/facebook/react/pull/19936}\n         */\n        unstable_expectedLoadTime?: number | undefined;\n    }\n\n    export type SuspenseListRevealOrder = 'forwards' | 'backwards' | 'together';\n    export type SuspenseListTailMode = 'collapsed' | 'hidden';\n\n    export interface SuspenseListCommonProps {\n        /**\n         * Note that SuspenseList require more than one child;\n         * it is a runtime warning to provide only a single child.\n         *\n         * It does, however, allow those children to be wrapped inside a single\n         * level of `<React.Fragment>`.\n         */\n        children: ReactElement | Iterable<ReactElement>;\n    }\n\n    interface DirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder: 'forwards' | 'backwards';\n        /**\n         * Dictates how unloaded items in a SuspenseList is shown.\n         *\n         * - By default, `SuspenseList` will show all fallbacks in the list.\n         * - `collapsed` shows only the next fallback in the list.\n         * - `hidden` doesn’t show any unloaded items.\n         */\n        tail?: SuspenseListTailMode | undefined;\n    }\n\n    interface NonDirectionalSuspenseListProps extends SuspenseListCommonProps {\n        /**\n         * Defines the order in which the `SuspenseList` children should be revealed.\n         */\n        revealOrder?: Exclude<SuspenseListRevealOrder, DirectionalSuspenseListProps['revealOrder']> | undefined;\n        /**\n         * The tail property is invalid when not using the `forwards` or `backwards` reveal orders.\n         */\n        tail?: never | undefined;\n    }\n\n    export type SuspenseListProps = DirectionalSuspenseListProps | NonDirectionalSuspenseListProps;\n\n    /**\n     * `SuspenseList` helps coordinate many components that can suspend by orchestrating the order\n     * in which these components are revealed to the user.\n     *\n     * When multiple components need to fetch data, this data may arrive in an unpredictable order.\n     * However, if you wrap these items in a `SuspenseList`, React will not show an item in the list\n     * until previous items have been displayed (this behavior is adjustable).\n     *\n     * @see https://reactjs.org/docs/concurrent-mode-reference.html#suspenselist\n     * @see https://reactjs.org/docs/concurrent-mode-patterns.html#suspenselist\n     */\n    export const SuspenseList: ExoticComponent<SuspenseListProps>;\n\n    // tslint:disable-next-line ban-types\n    export function experimental_useEffectEvent<T extends Function>(event: T): T;\n}\n","path":"file:///node_modules/react/experimental.d.ts"},{"code":"/**\n * These are types for things that are present in the React `next` release channel.\n *\n * To load the types declared here in an actual project, there are three ways. The easiest one,\n * if your `tsconfig.json` already has a `\"types\"` array in the `\"compilerOptions\"` section,\n * is to add `\"react/next\"` to the `\"types\"` array.\n *\n * Alternatively, a specific import syntax can to be used from a typescript file.\n * This module does not exist in reality, which is why the {} is important:\n *\n * ```ts\n * import {} from 'react/next'\n * ```\n *\n * It is also possible to include it through a triple-slash reference:\n *\n * ```ts\n * /// <reference types=\"react/next\" />\n * ```\n *\n * Either the import or the reference only needs to appear once, anywhere in the project.\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react/src/React.js to see how the exports are declared,\n\nimport React = require('.');\n\nexport {};\n\ndeclare module '.' {\n    interface ThenableImpl<T> {\n        then(onFulfill: (value: T) => unknown, onReject: (error: unknown) => unknown): void | PromiseLike<unknown>;\n    }\n    interface UntrackedThenable<T> extends ThenableImpl<T> {\n        status?: void;\n    }\n\n    export interface PendingThenable<T> extends ThenableImpl<T> {\n        status: 'pending';\n    }\n\n    export interface FulfilledThenable<T> extends ThenableImpl<T> {\n        status: 'fulfilled';\n        value: T;\n    }\n\n    export interface RejectedThenable<T> extends ThenableImpl<T> {\n        status: 'rejected';\n        reason: unknown;\n    }\n\n    export type Thenable<T> = UntrackedThenable<T> | PendingThenable<T> | FulfilledThenable<T> | RejectedThenable<T>;\n\n    export type Usable<T> = Thenable<T> | Context<T>;\n\n    export function use<T>(usable: Usable<T>): T;\n\n    interface ServerContextJSONArray extends ReadonlyArray<ServerContextJSONArray> {}\n    export type ServerContextJSONValue =\n        | string\n        | boolean\n        | number\n        | null\n        | ServerContextJSONArray\n        | { [key: string]: ServerContextJSONValue };\n    export interface ServerContext<T extends ServerContextJSONValue> {\n        Provider: Provider<T>;\n    }\n    /**\n     * Accepts a context object (the value returned from `React.createContext` or `React.createServerContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useContext\n     */\n    function useContext<T extends ServerContextJSONValue>(context: ServerContext<T>): T;\n    export function createServerContext<T extends ServerContextJSONValue>(\n        globalName: string,\n        defaultValue: T,\n    ): ServerContext<T>;\n\n    // tslint:disable-next-line ban-types\n    export function cache<CachedFunction extends Function>(fn: CachedFunction): CachedFunction;\n\n    export function unstable_useCacheRefresh(): () => void;\n}\n","path":"file:///node_modules/react/next.d.ts"},{"code":"// Expose `JSX` namespace in `global` namespace\nimport './';\n","path":"file:///node_modules/react/jsx-dev-runtime.d.ts"},{"code":"// Expose `JSX` namespace in `global` namespace\nimport './';\n","path":"file:///node_modules/react/jsx-runtime.d.ts"},{"code":"// Type definitions for React 18.0\n// Project: https://react.dev/\n// Definitions by: Asana <https://asana.com>\n//                 AssureSign <http://www.assuresign.com>\n//                 Microsoft <https://microsoft.com>\n//                 John Reilly <https://github.com/johnnyreilly>\n//                 Benoit Benezech <https://github.com/bbenezech>\n//                 Patricio Zavolinsky <https://github.com/pzavolinsky>\n//                 Eric Anderson <https://github.com/ericanderson>\n//                 Dovydas Navickas <https://github.com/DovydasNavickas>\n//                 Josh Rutherford <https://github.com/theruther4d>\n//                 Guilherme Hübner <https://github.com/guilhermehubner>\n//                 Ferdy Budhidharma <https://github.com/ferdaber>\n//                 Johann Rakotoharisoa <https://github.com/jrakotoharisoa>\n//                 Olivier Pascal <https://github.com/pascaloliv>\n//                 Martin Hochel <https://github.com/hotell>\n//                 Frank Li <https://github.com/franklixuefei>\n//                 Jessica Franco <https://github.com/Jessidhia>\n//                 Saransh Kataria <https://github.com/saranshkataria>\n//                 Kanitkorn Sujautra <https://github.com/lukyth>\n//                 Sebastian Silbermann <https://github.com/eps1lon>\n//                 Kyle Scully <https://github.com/zieka>\n//                 Cong Zhang <https://github.com/dancerphil>\n//                 Dimitri Mitropoulos <https://github.com/dimitropoulos>\n//                 JongChan Choi <https://github.com/disjukr>\n//                 Victor Magalhães <https://github.com/vhfmag>\n//                 Dale Tan <https://github.com/hellatan>\n//                 Priyanshu Rav <https://github.com/priyanshurav>\n//                 Dmitry Semigradsky <https://github.com/Semigradsky>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\n// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from 'csstype';\nimport * as PropTypes from 'prop-types';\nimport { Interaction as SchedulerInteraction } from 'scheduler/tracing';\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\ntype Booleanish = boolean | 'true' | 'false';\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n// Destructors are only allowed to return void.\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\n// eslint-disable-next-line export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    type ElementType<P = any> =\n        {\n            [K in keyof JSX.IntrinsicElements]: P extends JSX.IntrinsicElements[K] ? K : never\n        }[keyof JSX.IntrinsicElements] |\n        ComponentType<P>;\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    type JSXElementConstructor<P> =\n        | ((props: P) => ReactElement<any, any> | null)\n        | (new (props: P) => Component<any, any>);\n\n    interface RefObject<T> {\n        readonly current: T | null;\n    }\n    // Bivariance hack for consistent unsoundness with RefObject\n    type RefCallback<T> = { bivarianceHack(instance: T | null): void }[\"bivarianceHack\"];\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    type LegacyRef<T> = string | Ref<T>;\n    /**\n     * Gets the instance type for a React element. The instance will be different for various component types:\n     *\n     * - React class components will be the class instance. So if you had `class Foo extends React.Component<{}> {}`\n     *   and used `React.ElementRef<typeof Foo>` then the type would be the instance of `Foo`.\n     * - React stateless functional components do not have a backing instance and so `React.ElementRef<typeof Bar>`\n     *   (when `Bar` is `function Bar() {}`) will give you the `undefined` type.\n     * - JSX intrinsics like `div` will give you their DOM instance. For `React.ElementRef<'div'>` that would be\n     *   `HTMLDivElement`. For `React.ElementRef<'input'>` that would be `HTMLInputElement`.\n     * - React stateless functional components that forward a `ref` will give you the `ElementRef` of the forwarded\n     *   to component.\n     *\n     * `C` must be the type _of_ a React component so you need to use typeof as in `React.ElementRef<typeof MyComponent>`.\n     *\n     * @todo In Flow, this works a little different with forwarded refs and the `AbstractComponent` that\n     *       `React.forwardRef()` returns.\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new (props: any): Component<any> }\n            | ((props: any, context?: any) => ReactElement | null)\n            | keyof JSX.IntrinsicElements\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends Ref<\n                infer Instance\n            >\n                ? Instance\n                : never\n            : never;\n\n    type ComponentState = any;\n\n    type Key = string | number;\n\n    /**\n     * @internal You shouldn't need to use this type since you never see these attributes\n     * inside your component or have to validate them.\n     */\n    interface Attributes {\n        key?: Key | null | undefined;\n    }\n    interface RefAttributes<T> extends Attributes {\n        /**\n         * Allows getting a ref to the component instance.\n         * Once the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n         * @see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom\n         */\n        ref?: Ref<T> | undefined;\n    }\n    interface ClassAttributes<T> extends Attributes {\n        /**\n         * Allows getting a ref to the component instance.\n         * Once the component unmounts, React will set `ref.current` to `null` (or call the ref with `null` if you passed a callback ref).\n         * @see https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom\n         */\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    interface ReactElement<P = any, T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>> {\n        type: T;\n        props: P;\n        key: Key | null;\n    }\n\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, 'key' | 'ref'>>\n    > extends ReactElement<P, Exclude<T, number>> { }\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: ('ref' extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element> extends ReactElement<P, string> {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> { }\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        key: Key | null;\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (props?: Attributes & P, ...children: ReactNode[]) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> =\n        (props?: ClassAttributes<T> & P, ...children: ReactNode[]) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> =\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]) => DOMElement<P, T>;\n\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null, ...children: ReactNode[]): ReactSVGElement;\n    }\n\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactText = string | number;\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactChild = ReactElement | string | number;\n\n    /**\n     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.\n     */\n    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}\n    type ReactFragment = Iterable<ReactNode>;\n    type ReactNode = ReactElement | string | number | ReactFragment | ReactPortal | boolean | null | undefined;\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>): CFactory<P, ClassicComponent<P, ComponentState>>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function createElement<P extends {}>(\n        type: ClassType<P, ClassicComponent<P, ComponentState>, ClassicComponentClass<P>>,\n        props?: ClassAttributes<ClassicComponent<P, ComponentState>> & P | null,\n        ...children: ReactNode[]): CElement<P, ClassicComponent<P, ComponentState>>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]): ReactElement<P>;\n\n    // Context via RenderProps\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode | undefined;\n    }\n\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    // TODO: similar to how Fragment is actually a symbol, the values returned from createContext,\n    // forwardRef and memo are actually objects that are treated specially by the renderer; see:\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/ReactContext.js#L35-L48\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/forwardRef.js#L42-L45\n    // https://github.com/facebook/react/blob/v16.6.0/packages/react/src/memo.js#L27-L31\n    // However, we have no way of telling the JSX parser that it's a JSX element type or its props other than\n    // by pretending to be a normal component.\n    //\n    // We don't just use ComponentType or FunctionComponent types because you are not supposed to attach statics to this\n    // object, but rather to the original function.\n    interface ExoticComponent<P = {}> {\n        /**\n         * **NOTE**: Exotic components are not callable.\n         */\n        (props: P): (ReactElement|null);\n        readonly $$typeof: symbol;\n    }\n\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        displayName?: string | undefined;\n    }\n\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    // NOTE: only the Context object itself can get a displayName\n    // https://github.com/facebook/react-devtools/blob/e0b854e4c/backend/attachRendererFiber.js#L310-L325\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        displayName?: string | undefined;\n    }\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    // Sync with `ReactChildren` until `ReactChildren` is removed.\n    const Children: {\n        map<T, C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    };\n    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;\n    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    interface SuspenseProps {\n        children?: ReactNode | undefined;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback?: ReactNode;\n    }\n\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * {@link https://react.dev/reference/react/Profiler#onrender-callback Profiler API}\n     */\n    type ProfilerOnRenderCallback = (\n        id: string,\n        phase: \"mount\" | \"update\",\n        actualDuration: number,\n        baseDuration: number,\n        startTime: number,\n        commitTime: number,\n        interactions: Set<SchedulerInteraction>,\n    ) => void;\n    interface ProfilerProps {\n        children?: ReactNode | undefined;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> { }\n    class Component<P, S> {\n        // tslint won't let me format the sample code in a way that vscode likes it :(\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * Usage:\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see https://react.dev/reference/react/Component#static-contexttype\n         */\n        static contextType?: Context<any> | undefined;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see https://react.dev/reference/react/Component#context\n         */\n        context: unknown;\n\n        constructor(props: Readonly<P> | P);\n        /**\n         * @deprecated\n         * @see https://legacy.reactjs.org/docs/legacy-context.html\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Pick<S, K> | S | null)) | (Pick<S, K> | S | null),\n            callback?: () => void\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        readonly props: Readonly<P>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         * https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs\n         */\n        refs: {\n            [key: string]: ReactInstance\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> { }\n\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    type FC<P = {}> = FunctionComponent<P>;\n\n    interface FunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated - Equivalent with `React.FC`.\n     */\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    /**\n     * @deprecated - Equivalent with `React.FunctionComponent`.\n     */\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactElement<any, any> | null;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: P, ref: ForwardedRef<T>): ReactElement | null;\n        displayName?: string | undefined;\n        // explicit rejected with `never` required due to\n        // https://github.com/microsoft/TypeScript/issues/36826\n        /**\n         * defaultProps are not supported on render functions\n         */\n        defaultProps?: never | undefined;\n        /**\n         * propTypes are not supported on render functions\n         */\n        propTypes?: never | undefined;\n    }\n\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new (props: P, context?: any): Component<P, S>;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextType?: Context<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new (props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * We use an intersection type to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See https://github.com/Microsoft/TypeScript/issues/7234 for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        C &\n        (new (props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, `Component#render`, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of `render` to the document, and\n         * returns an object to be given to componentDidUpdate. Useful for saving\n         * things such as scroll position before `render` causes changes to it.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if getSnapshotBeforeUpdate is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead; will stop working in React 17\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before `Component#render`.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use componentDidMount or the constructor instead\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead; will stop working in React 17\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling `Component#setState` generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use static getDerivedStateFromProps instead\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call `Component#setState` here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of getSnapshotBeforeUpdate or getDerivedStateFromProps\n         * prevents this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update\n         * @see https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>> | undefined;\n        statics?: {\n            [key: string]: any;\n        } | undefined;\n\n        displayName?: string | undefined;\n        propTypes?: ValidationMap<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    // will show `ForwardRef(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P> | undefined;\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    function forwardRef<T, P = {}>(render: ForwardRefRenderFunction<T, P>): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /** Ensures that the props do not include ref at all */\n    type PropsWithoutRef<P> =\n        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.\n        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        P extends any ? ('ref' extends keyof P ? Omit<P, 'ref'> : P) : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        'ref' extends keyof P\n            ? P extends { ref?: infer R | undefined }\n                ? string extends R\n                    ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }\n                    : P\n                : P\n            : P;\n\n    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };\n\n    /**\n     * NOTE: prefer ComponentPropsWithRef, if the ref is forwarded,\n     * or ComponentPropsWithoutRef when refs are not supported.\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> =\n        T extends JSXElementConstructor<infer P>\n            ? P\n            : T extends keyof JSX.IntrinsicElements\n                ? JSX.IntrinsicElements[T]\n                : {};\n    type ComponentPropsWithRef<T extends ElementType> =\n        T extends (new (props: infer P) => Component<any, any>)\n            ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n            : PropsWithRef<ComponentProps<T>>;\n    type ComponentPropsWithoutRef<T extends ElementType> =\n        PropsWithoutRef<ComponentProps<T>>;\n\n    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<\n        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>\n    >\n        ? Method\n        : ComponentPropsWithRef<T> extends RefAttributes<infer Method>\n            ? Method\n            : never;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    function memo<P extends object>(\n        Component: FunctionComponent<P>,\n        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean\n    ): MemoExoticComponent<T>;\n\n    type LazyExoticComponent<T extends ComponentType<any>> = ExoticComponent<ComponentPropsWithRef<T>> & {\n        readonly _result: T;\n    };\n\n    function lazy<T extends ComponentType<any>>(\n        factory: () => Promise<{ default: T }>\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    // based on the code in https://github.com/facebook/react/pull/13968\n\n    // Unlike the class component setState, the updates are not allowed to be partial\n    type SetStateAction<S> = S | ((prevState: S) => S);\n    // this technically does accept a second argument, but it's already under a deprecation warning\n    // and it's not even released so probably better to not define it.\n    type Dispatch<A> = (value: A) => void;\n    // Since action _can_ be undefined, dispatch may be called without any parameters.\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> =\n        R extends ReducerWithoutAction<infer S> ? S : never;\n    type DependencyList = ReadonlyArray<unknown>;\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    type EffectCallback = () => (void | Destructor);\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useContext\n     */\n    function useContext<T>(context: Context<T>/*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useState\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useState\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useReducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useReducer\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useReducer\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useReducer\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useReducer\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useRef\n     */\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useRef\n     */\n    function useRef<T>(initialValue: T|null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useRef\n     */\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useLayoutEffect\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useEffect\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useImperativeHandle\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T>|undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useCallback\n     */\n    // A specific function type would not trigger implicit any.\n    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.\n    // tslint:disable-next-line ban-types\n    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useMemo\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList | undefined): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see https://react.dev/reference/react/useDebugValue\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    // must be synchronous\n    export type TransitionFunction = () => VoidOrUndefinedOnly;\n    // strange definition to allow vscode to show documentation on the invocation\n    export interface TransitionStartFunction {\n        /**\n         * State updates caused inside the callback are allowed to be deferred.\n         *\n         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n         *\n         * @param callback A _synchronous_ function which causes state updates that can be deferred.\n         */\n        (callback: TransitionFunction): void;\n    }\n\n    /**\n     * Returns a deferred version of the value that may “lag behind” it.\n     *\n     * This is commonly used to keep the interface responsive when you have something that renders immediately\n     * based on user input and something that needs to wait for a data fetch.\n     *\n     * A good example of this is a text input.\n     *\n     * @param value The value that is going to be deferred\n     *\n     * @see https://react.dev/reference/react/useDeferredValue\n     */\n    export function useDeferredValue<T>(value: T): T;\n\n    /**\n     * Allows components to avoid undesirable loading states by waiting for content to load\n     * before transitioning to the next screen. It also allows components to defer slower,\n     * data fetching updates until subsequent renders so that more crucial updates can be\n     * rendered immediately.\n     *\n     * The `useTransition` hook returns two values in an array.\n     *\n     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\n     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.\n     *\n     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**`\n     *\n     * @see https://react.dev/reference/react/useTransition\n     */\n    export function useTransition(): [boolean, TransitionStartFunction];\n\n    /**\n     * Similar to `useTransition` but allows uses where hooks are not available.\n     *\n     * @param callback A _synchronous_ function which causes state updates that can be deferred.\n     */\n    export function startTransition(scope: TransitionFunction): void;\n\n    export function useId(): string;\n\n    /**\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @see https://github.com/facebook/react/pull/21913\n     */\n     export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;\n\n    /**\n     * @param subscribe\n     * @param getSnapshot\n     *\n     * @see https://github.com/reactwg/react-18/discussions/86\n     */\n    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`\n    export function useSyncExternalStore<Snapshot>(\n        subscribe: (onStoreChange: () => void) => () => void,\n        getSnapshot: () => Snapshot,\n        getServerSnapshot?: () => Snapshot,\n    ): Snapshot;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: 'mouse' | 'pen' | 'touch';\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {\n        relatedTarget: (EventTarget & RelatedTarget) | null;\n        target: EventTarget & Target;\n    }\n\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    export type ModifierKey = \"Alt\" | \"AltGraph\" | \"CapsLock\" | \"Control\" | \"Fn\" | \"FnLock\" | \"Hyper\" | \"Meta\" | \"NumLock\" | \"ScrollLock\" | \"Shift\" | \"Super\" | \"Symbol\" | \"SymbolLock\";\n\n    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        code: string;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface DOMAttributes<T> {\n        children?: ReactNode | undefined;\n        dangerouslySetInnerHTML?: {\n            // Should be InnerHTML['innerHTML'].\n            // But unfortunately we're mixing renderer-specific type declarations.\n            __html: string | TrustedHTML;\n        } | undefined;\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T> | undefined;\n        onCopyCapture?: ClipboardEventHandler<T> | undefined;\n        onCut?: ClipboardEventHandler<T> | undefined;\n        onCutCapture?: ClipboardEventHandler<T> | undefined;\n        onPaste?: ClipboardEventHandler<T> | undefined;\n        onPasteCapture?: ClipboardEventHandler<T> | undefined;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T> | undefined;\n        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionStart?: CompositionEventHandler<T> | undefined;\n        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdate?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T> | undefined;\n        onFocusCapture?: FocusEventHandler<T> | undefined;\n        onBlur?: FocusEventHandler<T> | undefined;\n        onBlurCapture?: FocusEventHandler<T> | undefined;\n\n        // Form Events\n        onChange?: FormEventHandler<T> | undefined;\n        onChangeCapture?: FormEventHandler<T> | undefined;\n        onBeforeInput?: FormEventHandler<T> | undefined;\n        onBeforeInputCapture?: FormEventHandler<T> | undefined;\n        onInput?: FormEventHandler<T> | undefined;\n        onInputCapture?: FormEventHandler<T> | undefined;\n        onReset?: FormEventHandler<T> | undefined;\n        onResetCapture?: FormEventHandler<T> | undefined;\n        onSubmit?: FormEventHandler<T> | undefined;\n        onSubmitCapture?: FormEventHandler<T> | undefined;\n        onInvalid?: FormEventHandler<T> | undefined;\n        onInvalidCapture?: FormEventHandler<T> | undefined;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T> | undefined;\n        onLoadCapture?: ReactEventHandler<T> | undefined;\n        onError?: ReactEventHandler<T> | undefined; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T> | undefined;\n        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPress?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;\n        onKeyUp?: KeyboardEventHandler<T> | undefined;\n        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T> | undefined;\n        onAbortCapture?: ReactEventHandler<T> | undefined;\n        onCanPlay?: ReactEventHandler<T> | undefined;\n        onCanPlayCapture?: ReactEventHandler<T> | undefined;\n        onCanPlayThrough?: ReactEventHandler<T> | undefined;\n        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;\n        onDurationChange?: ReactEventHandler<T> | undefined;\n        onDurationChangeCapture?: ReactEventHandler<T> | undefined;\n        onEmptied?: ReactEventHandler<T> | undefined;\n        onEmptiedCapture?: ReactEventHandler<T> | undefined;\n        onEncrypted?: ReactEventHandler<T> | undefined;\n        onEncryptedCapture?: ReactEventHandler<T> | undefined;\n        onEnded?: ReactEventHandler<T> | undefined;\n        onEndedCapture?: ReactEventHandler<T> | undefined;\n        onLoadedData?: ReactEventHandler<T> | undefined;\n        onLoadedDataCapture?: ReactEventHandler<T> | undefined;\n        onLoadedMetadata?: ReactEventHandler<T> | undefined;\n        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;\n        onLoadStart?: ReactEventHandler<T> | undefined;\n        onLoadStartCapture?: ReactEventHandler<T> | undefined;\n        onPause?: ReactEventHandler<T> | undefined;\n        onPauseCapture?: ReactEventHandler<T> | undefined;\n        onPlay?: ReactEventHandler<T> | undefined;\n        onPlayCapture?: ReactEventHandler<T> | undefined;\n        onPlaying?: ReactEventHandler<T> | undefined;\n        onPlayingCapture?: ReactEventHandler<T> | undefined;\n        onProgress?: ReactEventHandler<T> | undefined;\n        onProgressCapture?: ReactEventHandler<T> | undefined;\n        onRateChange?: ReactEventHandler<T> | undefined;\n        onRateChangeCapture?: ReactEventHandler<T> | undefined;\n        onResize?: ReactEventHandler<T> | undefined;\n        onResizeCapture?: ReactEventHandler<T> | undefined;\n        onSeeked?: ReactEventHandler<T> | undefined;\n        onSeekedCapture?: ReactEventHandler<T> | undefined;\n        onSeeking?: ReactEventHandler<T> | undefined;\n        onSeekingCapture?: ReactEventHandler<T> | undefined;\n        onStalled?: ReactEventHandler<T> | undefined;\n        onStalledCapture?: ReactEventHandler<T> | undefined;\n        onSuspend?: ReactEventHandler<T> | undefined;\n        onSuspendCapture?: ReactEventHandler<T> | undefined;\n        onTimeUpdate?: ReactEventHandler<T> | undefined;\n        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;\n        onVolumeChange?: ReactEventHandler<T> | undefined;\n        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;\n        onWaiting?: ReactEventHandler<T> | undefined;\n        onWaitingCapture?: ReactEventHandler<T> | undefined;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T> | undefined;\n        onAuxClickCapture?: MouseEventHandler<T> | undefined;\n        onClick?: MouseEventHandler<T> | undefined;\n        onClickCapture?: MouseEventHandler<T> | undefined;\n        onContextMenu?: MouseEventHandler<T> | undefined;\n        onContextMenuCapture?: MouseEventHandler<T> | undefined;\n        onDoubleClick?: MouseEventHandler<T> | undefined;\n        onDoubleClickCapture?: MouseEventHandler<T> | undefined;\n        onDrag?: DragEventHandler<T> | undefined;\n        onDragCapture?: DragEventHandler<T> | undefined;\n        onDragEnd?: DragEventHandler<T> | undefined;\n        onDragEndCapture?: DragEventHandler<T> | undefined;\n        onDragEnter?: DragEventHandler<T> | undefined;\n        onDragEnterCapture?: DragEventHandler<T> | undefined;\n        onDragExit?: DragEventHandler<T> | undefined;\n        onDragExitCapture?: DragEventHandler<T> | undefined;\n        onDragLeave?: DragEventHandler<T> | undefined;\n        onDragLeaveCapture?: DragEventHandler<T> | undefined;\n        onDragOver?: DragEventHandler<T> | undefined;\n        onDragOverCapture?: DragEventHandler<T> | undefined;\n        onDragStart?: DragEventHandler<T> | undefined;\n        onDragStartCapture?: DragEventHandler<T> | undefined;\n        onDrop?: DragEventHandler<T> | undefined;\n        onDropCapture?: DragEventHandler<T> | undefined;\n        onMouseDown?: MouseEventHandler<T> | undefined;\n        onMouseDownCapture?: MouseEventHandler<T> | undefined;\n        onMouseEnter?: MouseEventHandler<T> | undefined;\n        onMouseLeave?: MouseEventHandler<T> | undefined;\n        onMouseMove?: MouseEventHandler<T> | undefined;\n        onMouseMoveCapture?: MouseEventHandler<T> | undefined;\n        onMouseOut?: MouseEventHandler<T> | undefined;\n        onMouseOutCapture?: MouseEventHandler<T> | undefined;\n        onMouseOver?: MouseEventHandler<T> | undefined;\n        onMouseOverCapture?: MouseEventHandler<T> | undefined;\n        onMouseUp?: MouseEventHandler<T> | undefined;\n        onMouseUpCapture?: MouseEventHandler<T> | undefined;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T> | undefined;\n        onSelectCapture?: ReactEventHandler<T> | undefined;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T> | undefined;\n        onTouchCancelCapture?: TouchEventHandler<T> | undefined;\n        onTouchEnd?: TouchEventHandler<T> | undefined;\n        onTouchEndCapture?: TouchEventHandler<T> | undefined;\n        onTouchMove?: TouchEventHandler<T> | undefined;\n        onTouchMoveCapture?: TouchEventHandler<T> | undefined;\n        onTouchStart?: TouchEventHandler<T> | undefined;\n        onTouchStartCapture?: TouchEventHandler<T> | undefined;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T> | undefined;\n        onPointerDownCapture?: PointerEventHandler<T> | undefined;\n        onPointerMove?: PointerEventHandler<T> | undefined;\n        onPointerMoveCapture?: PointerEventHandler<T> | undefined;\n        onPointerUp?: PointerEventHandler<T> | undefined;\n        onPointerUpCapture?: PointerEventHandler<T> | undefined;\n        onPointerCancel?: PointerEventHandler<T> | undefined;\n        onPointerCancelCapture?: PointerEventHandler<T> | undefined;\n        onPointerEnter?: PointerEventHandler<T> | undefined;\n        onPointerEnterCapture?: PointerEventHandler<T> | undefined;\n        onPointerLeave?: PointerEventHandler<T> | undefined;\n        onPointerLeaveCapture?: PointerEventHandler<T> | undefined;\n        onPointerOver?: PointerEventHandler<T> | undefined;\n        onPointerOverCapture?: PointerEventHandler<T> | undefined;\n        onPointerOut?: PointerEventHandler<T> | undefined;\n        onPointerOutCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n\n        // UI Events\n        onScroll?: UIEventHandler<T> | undefined;\n        onScrollCapture?: UIEventHandler<T> | undefined;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T> | undefined;\n        onWheelCapture?: WheelEventHandler<T> | undefined;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T> | undefined;\n        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationEnd?: AnimationEventHandler<T> | undefined;\n        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationIteration?: AnimationEventHandler<T> | undefined;\n        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T> | undefined;\n        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        'aria-activedescendant'?: string | undefined;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        'aria-atomic'?: Booleanish | undefined;\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        'aria-autocomplete'?: 'none' | 'inline' | 'list' | 'both' | undefined;\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        'aria-busy'?: Booleanish | undefined;\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        'aria-checked'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        'aria-colcount'?: number | undefined;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        'aria-colindex'?: number | undefined;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        'aria-colspan'?: number | undefined;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        'aria-controls'?: string | undefined;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        'aria-current'?: boolean | 'false' | 'true' | 'page' | 'step' | 'location' | 'date' | 'time' | undefined;\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        'aria-describedby'?: string | undefined;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        'aria-details'?: string | undefined;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        'aria-disabled'?: Booleanish | undefined;\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-dropeffect'?: 'none' | 'copy' | 'execute' | 'link' | 'move' | 'popup' | undefined;\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        'aria-errormessage'?: string | undefined;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        'aria-expanded'?: Booleanish | undefined;\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        'aria-flowto'?: string | undefined;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        'aria-grabbed'?: Booleanish | undefined;\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        'aria-haspopup'?: boolean | 'false' | 'true' | 'menu' | 'listbox' | 'tree' | 'grid' | 'dialog' | undefined;\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        'aria-hidden'?: Booleanish | undefined;\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        'aria-invalid'?: boolean | 'false' | 'true' | 'grammar' | 'spelling' | undefined;\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        'aria-keyshortcuts'?: string | undefined;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        'aria-label'?: string | undefined;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        'aria-labelledby'?: string | undefined;\n        /** Defines the hierarchical level of an element within a structure. */\n        'aria-level'?: number | undefined;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        'aria-live'?: 'off' | 'assertive' | 'polite' | undefined;\n        /** Indicates whether an element is modal when displayed. */\n        'aria-modal'?: Booleanish | undefined;\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        'aria-multiline'?: Booleanish | undefined;\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        'aria-multiselectable'?: Booleanish | undefined;\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        'aria-orientation'?: 'horizontal' | 'vertical' | undefined;\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        'aria-owns'?: string | undefined;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        'aria-placeholder'?: string | undefined;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        'aria-posinset'?: number | undefined;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        'aria-pressed'?: boolean | 'false' | 'mixed' | 'true' | undefined;\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        'aria-readonly'?: Booleanish | undefined;\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        'aria-relevant'?: 'additions' | 'additions removals' | 'additions text' | 'all' | 'removals' | 'removals additions' | 'removals text' | 'text' | 'text additions' | 'text removals' | undefined;\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        'aria-required'?: Booleanish | undefined;\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        'aria-roledescription'?: string | undefined;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        'aria-rowcount'?: number | undefined;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        'aria-rowindex'?: number | undefined;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        'aria-rowspan'?: number | undefined;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        'aria-selected'?: Booleanish | undefined;\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        'aria-setsize'?: number | undefined;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        'aria-sort'?: 'none' | 'ascending' | 'descending' | 'other' | undefined;\n        /** Defines the maximum allowed value for a range widget. */\n        'aria-valuemax'?: number | undefined;\n        /** Defines the minimum allowed value for a range widget. */\n        'aria-valuemin'?: number | undefined;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        'aria-valuenow'?: number | undefined;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        'aria-valuetext'?: string | undefined;\n    }\n\n    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions\n    type AriaRole =\n        | 'alert'\n        | 'alertdialog'\n        | 'application'\n        | 'article'\n        | 'banner'\n        | 'button'\n        | 'cell'\n        | 'checkbox'\n        | 'columnheader'\n        | 'combobox'\n        | 'complementary'\n        | 'contentinfo'\n        | 'definition'\n        | 'dialog'\n        | 'directory'\n        | 'document'\n        | 'feed'\n        | 'figure'\n        | 'form'\n        | 'grid'\n        | 'gridcell'\n        | 'group'\n        | 'heading'\n        | 'img'\n        | 'link'\n        | 'list'\n        | 'listbox'\n        | 'listitem'\n        | 'log'\n        | 'main'\n        | 'marquee'\n        | 'math'\n        | 'menu'\n        | 'menubar'\n        | 'menuitem'\n        | 'menuitemcheckbox'\n        | 'menuitemradio'\n        | 'navigation'\n        | 'none'\n        | 'note'\n        | 'option'\n        | 'presentation'\n        | 'progressbar'\n        | 'radio'\n        | 'radiogroup'\n        | 'region'\n        | 'row'\n        | 'rowgroup'\n        | 'rowheader'\n        | 'scrollbar'\n        | 'search'\n        | 'searchbox'\n        | 'separator'\n        | 'slider'\n        | 'spinbutton'\n        | 'status'\n        | 'switch'\n        | 'tab'\n        | 'table'\n        | 'tablist'\n        | 'tabpanel'\n        | 'term'\n        | 'textbox'\n        | 'timer'\n        | 'toolbar'\n        | 'tooltip'\n        | 'tree'\n        | 'treegrid'\n        | 'treeitem'\n        | (string & {});\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean | undefined;\n        defaultValue?: string | number | ReadonlyArray<string> | undefined;\n        suppressContentEditableWarning?: boolean | undefined;\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Standard HTML Attributes\n        accessKey?: string | undefined;\n        autoFocus?: boolean | undefined;\n        className?: string | undefined;\n        contentEditable?: Booleanish | \"inherit\" | undefined;\n        contextMenu?: string | undefined;\n        dir?: string | undefined;\n        draggable?: Booleanish | undefined;\n        hidden?: boolean | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        nonce?: string | undefined;\n        placeholder?: string | undefined;\n        slot?: string | undefined;\n        spellCheck?: Booleanish | undefined;\n        style?: CSSProperties | undefined;\n        tabIndex?: number | undefined;\n        title?: string | undefined;\n        translate?: 'yes' | 'no' | undefined;\n\n        // Unknown\n        radioGroup?: string | undefined; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: AriaRole | undefined;\n\n        // RDFa Attributes\n        about?: string | undefined;\n        content?: string | undefined;\n        datatype?: string | undefined;\n        inlist?: any;\n        prefix?: string | undefined;\n        property?: string | undefined;\n        rel?: string | undefined;\n        resource?: string | undefined;\n        rev?: string | undefined;\n        typeof?: string | undefined;\n        vocab?: string | undefined;\n\n        // Non-standard Attributes\n        autoCapitalize?: string | undefined;\n        autoCorrect?: string | undefined;\n        autoSave?: string | undefined;\n        color?: string | undefined;\n        itemProp?: string | undefined;\n        itemScope?: boolean | undefined;\n        itemType?: string | undefined;\n        itemID?: string | undefined;\n        itemRef?: string | undefined;\n        results?: number | undefined;\n        security?: string | undefined;\n        unselectable?: 'on' | 'off' | undefined;\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute\n         */\n        inputMode?: 'none' | 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search' | undefined;\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is\n         */\n        is?: string | undefined;\n    }\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string | undefined;\n        acceptCharset?: string | undefined;\n        action?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        alt?: string | undefined;\n        as?: string | undefined;\n        async?: boolean | undefined;\n        autoComplete?: string | undefined;\n        autoPlay?: boolean | undefined;\n        capture?: boolean | 'user' | 'environment' | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        charSet?: string | undefined;\n        challenge?: string | undefined;\n        checked?: boolean | undefined;\n        cite?: string | undefined;\n        classID?: string | undefined;\n        cols?: number | undefined;\n        colSpan?: number | undefined;\n        controls?: boolean | undefined;\n        coords?: string | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        data?: string | undefined;\n        dateTime?: string | undefined;\n        default?: boolean | undefined;\n        defer?: boolean | undefined;\n        disabled?: boolean | undefined;\n        download?: any;\n        encType?: string | undefined;\n        form?: string | undefined;\n        formAction?: string | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        frameBorder?: number | string | undefined;\n        headers?: string | undefined;\n        height?: number | string | undefined;\n        high?: number | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        htmlFor?: string | undefined;\n        httpEquiv?: string | undefined;\n        integrity?: string | undefined;\n        keyParams?: string | undefined;\n        keyType?: string | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        list?: string | undefined;\n        loop?: boolean | undefined;\n        low?: number | undefined;\n        manifest?: string | undefined;\n        marginHeight?: number | undefined;\n        marginWidth?: number | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        media?: string | undefined;\n        mediaGroup?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        muted?: boolean | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        open?: boolean | undefined;\n        optimum?: number | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        preload?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        reversed?: boolean | undefined;\n        rows?: number | undefined;\n        rowSpan?: number | undefined;\n        sandbox?: string | undefined;\n        scope?: string | undefined;\n        scoped?: boolean | undefined;\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        selected?: boolean | undefined;\n        shape?: string | undefined;\n        size?: number | undefined;\n        sizes?: string | undefined;\n        span?: number | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        srcLang?: string | undefined;\n        srcSet?: string | undefined;\n        start?: number | undefined;\n        step?: number | string | undefined;\n        summary?: string | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n        wrap?: string | undefined;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | ''\n        | 'no-referrer'\n        | 'no-referrer-when-downgrade'\n        | 'origin'\n        | 'origin-when-cross-origin'\n        | 'same-origin'\n        | 'strict-origin'\n        | 'strict-origin-when-cross-origin'\n        | 'unsafe-url';\n\n    type HTMLAttributeAnchorTarget =\n        | '_self'\n        | '_blank'\n        | '_parent'\n        | '_top'\n        | (string & {});\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        ping?: string | undefined;\n        target?: HTMLAttributeAnchorTarget | undefined;\n        type?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n    }\n\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        coords?: string | undefined;\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        shape?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        formAction?: string | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        name?: string | undefined;\n        type?: 'submit' | 'reset' | 'button' | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean | undefined;\n        onToggle?: ReactEventHandler<T> | undefined;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        onCancel?: ReactEventHandler<T> |  undefined;\n        onClose?: ReactEventHandler<T> |  undefined;\n        open?: boolean | undefined;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string | undefined;\n        action?: string | undefined;\n        autoComplete?: string | undefined;\n        encType?: string | undefined;\n        method?: string | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        target?: string | undefined;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string | undefined;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        /** @deprecated */\n        frameBorder?: number | string | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        /** @deprecated */\n        marginHeight?: number | undefined;\n        /** @deprecated */\n        marginWidth?: number | undefined;\n        name?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sandbox?: string | undefined;\n        /** @deprecated */\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        decoding?: \"async\" | \"auto\" | \"sync\" | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    type HTMLInputTypeAttribute =\n        | 'button'\n        | 'checkbox'\n        | 'color'\n        | 'date'\n        | 'datetime-local'\n        | 'email'\n        | 'file'\n        | 'hidden'\n        | 'image'\n        | 'month'\n        | 'number'\n        | 'password'\n        | 'radio'\n        | 'range'\n        | 'reset'\n        | 'search'\n        | 'submit'\n        | 'tel'\n        | 'text'\n        | 'time'\n        | 'url'\n        | 'week'\n        | (string & {});\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string | undefined;\n        alt?: string | undefined;\n        autoComplete?: string | undefined;\n        capture?: boolean | 'user' | 'environment' | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        disabled?: boolean | undefined;\n        enterKeyHint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send' | undefined;\n        form?: string | undefined;\n        formAction?: string | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        height?: number | string | undefined;\n        list?: string | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        src?: string | undefined;\n        step?: number | string | undefined;\n        type?: HTMLInputTypeAttribute | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        width?: number | string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        challenge?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        keyType?: string | undefined;\n        keyParams?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        integrity?: string | undefined;\n        media?: string | undefined;\n        imageSrcSet?: string | undefined;\n        imageSizes?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        type?: string | undefined;\n        charSet?: string | undefined;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string | undefined;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean | undefined;\n        controls?: boolean | undefined;\n        controlsList?: string | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        loop?: boolean | undefined;\n        mediaGroup?: string | undefined;\n        muted?: boolean | undefined;\n        playsInline?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string | undefined;\n        httpEquiv?: string | undefined;\n        name?: string | undefined;\n        media?: string | undefined;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        high?: number | undefined;\n        low?: number | undefined;\n        max?: number | string | undefined;\n        min?: number | string | undefined;\n        optimum?: number | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string | undefined;\n        data?: string | undefined;\n        form?: string | undefined;\n        height?: number | string | undefined;\n        name?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean | undefined;\n        start?: number | undefined;\n        type?: '1' | 'a' | 'A' | 'i' | 'I' | undefined;\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n        selected?: boolean | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean | undefined;\n        /** @deprecated */\n        charSet?: string | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n        defer?: boolean | undefined;\n        integrity?: string | undefined;\n        noModule?: boolean | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        media?: string | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string | undefined;\n        scoped?: boolean | undefined;\n        type?: string | undefined;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | undefined;\n        bgcolor?: string | undefined;\n        border?: number | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        frame?: boolean | undefined;\n        rules?: \"none\" | \"groups\" | \"rows\" | \"columns\" | \"all\" | undefined;\n        summary?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        cols?: number | undefined;\n        dirName?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        name?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        rows?: number | undefined;\n        value?: string | ReadonlyArray<string> | number | undefined;\n        wrap?: string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | undefined;\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string | undefined;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        src?: string | undefined;\n        srcLang?: string | undefined;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        width?: number | string | undefined;\n        disablePictureInPicture?: boolean | undefined;\n        disableRemotePlayback?: boolean | undefined;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string | undefined;\n        color?: string | undefined;\n        height?: number | string | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        max?: number | string | undefined;\n        media?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        name?: string | undefined;\n        style?: CSSProperties | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: AriaRole | undefined;\n        tabIndex?: number | undefined;\n        crossOrigin?: \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n\n        // SVG Specific attributes\n        accentHeight?: number | string | undefined;\n        accumulate?: \"none\" | \"sum\" | undefined;\n        additive?: \"replace\" | \"sum\" | undefined;\n        alignmentBaseline?: \"auto\" | \"baseline\" | \"before-edge\" | \"text-before-edge\" | \"middle\" | \"central\" | \"after-edge\" |\n        \"text-after-edge\" | \"ideographic\" | \"alphabetic\" | \"hanging\" | \"mathematical\" | \"inherit\" | undefined;\n        allowReorder?: \"no\" | \"yes\" | undefined;\n        alphabetic?: number | string | undefined;\n        amplitude?: number | string | undefined;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined;\n        ascent?: number | string | undefined;\n        attributeName?: string | undefined;\n        attributeType?: string | undefined;\n        autoReverse?: Booleanish | undefined;\n        azimuth?: number | string | undefined;\n        baseFrequency?: number | string | undefined;\n        baselineShift?: number | string | undefined;\n        baseProfile?: number | string | undefined;\n        bbox?: number | string | undefined;\n        begin?: number | string | undefined;\n        bias?: number | string | undefined;\n        by?: number | string | undefined;\n        calcMode?: number | string | undefined;\n        capHeight?: number | string | undefined;\n        clip?: number | string | undefined;\n        clipPath?: string | undefined;\n        clipPathUnits?: number | string | undefined;\n        clipRule?: number | string | undefined;\n        colorInterpolation?: number | string | undefined;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\" | undefined;\n        colorProfile?: number | string | undefined;\n        colorRendering?: number | string | undefined;\n        contentScriptType?: number | string | undefined;\n        contentStyleType?: number | string | undefined;\n        cursor?: number | string | undefined;\n        cx?: number | string | undefined;\n        cy?: number | string | undefined;\n        d?: string | undefined;\n        decelerate?: number | string | undefined;\n        descent?: number | string | undefined;\n        diffuseConstant?: number | string | undefined;\n        direction?: number | string | undefined;\n        display?: number | string | undefined;\n        divisor?: number | string | undefined;\n        dominantBaseline?: number | string | undefined;\n        dur?: number | string | undefined;\n        dx?: number | string | undefined;\n        dy?: number | string | undefined;\n        edgeMode?: number | string | undefined;\n        elevation?: number | string | undefined;\n        enableBackground?: number | string | undefined;\n        end?: number | string | undefined;\n        exponent?: number | string | undefined;\n        externalResourcesRequired?: Booleanish | undefined;\n        fill?: string | undefined;\n        fillOpacity?: number | string | undefined;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\" | undefined;\n        filter?: string | undefined;\n        filterRes?: number | string | undefined;\n        filterUnits?: number | string | undefined;\n        floodColor?: number | string | undefined;\n        floodOpacity?: number | string | undefined;\n        focusable?: Booleanish | \"auto\" | undefined;\n        fontFamily?: string | undefined;\n        fontSize?: number | string | undefined;\n        fontSizeAdjust?: number | string | undefined;\n        fontStretch?: number | string | undefined;\n        fontStyle?: number | string | undefined;\n        fontVariant?: number | string | undefined;\n        fontWeight?: number | string | undefined;\n        format?: number | string | undefined;\n        fr?: number | string | undefined;\n        from?: number | string | undefined;\n        fx?: number | string | undefined;\n        fy?: number | string | undefined;\n        g1?: number | string | undefined;\n        g2?: number | string | undefined;\n        glyphName?: number | string | undefined;\n        glyphOrientationHorizontal?: number | string | undefined;\n        glyphOrientationVertical?: number | string | undefined;\n        glyphRef?: number | string | undefined;\n        gradientTransform?: string | undefined;\n        gradientUnits?: string | undefined;\n        hanging?: number | string | undefined;\n        horizAdvX?: number | string | undefined;\n        horizOriginX?: number | string | undefined;\n        href?: string | undefined;\n        ideographic?: number | string | undefined;\n        imageRendering?: number | string | undefined;\n        in2?: number | string | undefined;\n        in?: string | undefined;\n        intercept?: number | string | undefined;\n        k1?: number | string | undefined;\n        k2?: number | string | undefined;\n        k3?: number | string | undefined;\n        k4?: number | string | undefined;\n        k?: number | string | undefined;\n        kernelMatrix?: number | string | undefined;\n        kernelUnitLength?: number | string | undefined;\n        kerning?: number | string | undefined;\n        keyPoints?: number | string | undefined;\n        keySplines?: number | string | undefined;\n        keyTimes?: number | string | undefined;\n        lengthAdjust?: number | string | undefined;\n        letterSpacing?: number | string | undefined;\n        lightingColor?: number | string | undefined;\n        limitingConeAngle?: number | string | undefined;\n        local?: number | string | undefined;\n        markerEnd?: string | undefined;\n        markerHeight?: number | string | undefined;\n        markerMid?: string | undefined;\n        markerStart?: string | undefined;\n        markerUnits?: number | string | undefined;\n        markerWidth?: number | string | undefined;\n        mask?: string | undefined;\n        maskContentUnits?: number | string | undefined;\n        maskUnits?: number | string | undefined;\n        mathematical?: number | string | undefined;\n        mode?: number | string | undefined;\n        numOctaves?: number | string | undefined;\n        offset?: number | string | undefined;\n        opacity?: number | string | undefined;\n        operator?: number | string | undefined;\n        order?: number | string | undefined;\n        orient?: number | string | undefined;\n        orientation?: number | string | undefined;\n        origin?: number | string | undefined;\n        overflow?: number | string | undefined;\n        overlinePosition?: number | string | undefined;\n        overlineThickness?: number | string | undefined;\n        paintOrder?: number | string | undefined;\n        panose1?: number | string | undefined;\n        path?: string | undefined;\n        pathLength?: number | string | undefined;\n        patternContentUnits?: string | undefined;\n        patternTransform?: number | string | undefined;\n        patternUnits?: string | undefined;\n        pointerEvents?: number | string | undefined;\n        points?: string | undefined;\n        pointsAtX?: number | string | undefined;\n        pointsAtY?: number | string | undefined;\n        pointsAtZ?: number | string | undefined;\n        preserveAlpha?: Booleanish | undefined;\n        preserveAspectRatio?: string | undefined;\n        primitiveUnits?: number | string | undefined;\n        r?: number | string | undefined;\n        radius?: number | string | undefined;\n        refX?: number | string | undefined;\n        refY?: number | string | undefined;\n        renderingIntent?: number | string | undefined;\n        repeatCount?: number | string | undefined;\n        repeatDur?: number | string | undefined;\n        requiredExtensions?: number | string | undefined;\n        requiredFeatures?: number | string | undefined;\n        restart?: number | string | undefined;\n        result?: string | undefined;\n        rotate?: number | string | undefined;\n        rx?: number | string | undefined;\n        ry?: number | string | undefined;\n        scale?: number | string | undefined;\n        seed?: number | string | undefined;\n        shapeRendering?: number | string | undefined;\n        slope?: number | string | undefined;\n        spacing?: number | string | undefined;\n        specularConstant?: number | string | undefined;\n        specularExponent?: number | string | undefined;\n        speed?: number | string | undefined;\n        spreadMethod?: string | undefined;\n        startOffset?: number | string | undefined;\n        stdDeviation?: number | string | undefined;\n        stemh?: number | string | undefined;\n        stemv?: number | string | undefined;\n        stitchTiles?: number | string | undefined;\n        stopColor?: string | undefined;\n        stopOpacity?: number | string | undefined;\n        strikethroughPosition?: number | string | undefined;\n        strikethroughThickness?: number | string | undefined;\n        string?: number | string | undefined;\n        stroke?: string | undefined;\n        strokeDasharray?: string | number | undefined;\n        strokeDashoffset?: string | number | undefined;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\" | undefined;\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\" | undefined;\n        strokeMiterlimit?: number | string | undefined;\n        strokeOpacity?: number | string | undefined;\n        strokeWidth?: number | string | undefined;\n        surfaceScale?: number | string | undefined;\n        systemLanguage?: number | string | undefined;\n        tableValues?: number | string | undefined;\n        targetX?: number | string | undefined;\n        targetY?: number | string | undefined;\n        textAnchor?: string | undefined;\n        textDecoration?: number | string | undefined;\n        textLength?: number | string | undefined;\n        textRendering?: number | string | undefined;\n        to?: number | string | undefined;\n        transform?: string | undefined;\n        u1?: number | string | undefined;\n        u2?: number | string | undefined;\n        underlinePosition?: number | string | undefined;\n        underlineThickness?: number | string | undefined;\n        unicode?: number | string | undefined;\n        unicodeBidi?: number | string | undefined;\n        unicodeRange?: number | string | undefined;\n        unitsPerEm?: number | string | undefined;\n        vAlphabetic?: number | string | undefined;\n        values?: string | undefined;\n        vectorEffect?: number | string | undefined;\n        version?: string | undefined;\n        vertAdvY?: number | string | undefined;\n        vertOriginX?: number | string | undefined;\n        vertOriginY?: number | string | undefined;\n        vHanging?: number | string | undefined;\n        vIdeographic?: number | string | undefined;\n        viewBox?: string | undefined;\n        viewTarget?: number | string | undefined;\n        visibility?: number | string | undefined;\n        vMathematical?: number | string | undefined;\n        widths?: number | string | undefined;\n        wordSpacing?: number | string | undefined;\n        writingMode?: number | string | undefined;\n        x1?: number | string | undefined;\n        x2?: number | string | undefined;\n        x?: number | string | undefined;\n        xChannelSelector?: string | undefined;\n        xHeight?: number | string | undefined;\n        xlinkActuate?: string | undefined;\n        xlinkArcrole?: string | undefined;\n        xlinkHref?: string | undefined;\n        xlinkRole?: string | undefined;\n        xlinkShow?: string | undefined;\n        xlinkTitle?: string | undefined;\n        xlinkType?: string | undefined;\n        xmlBase?: string | undefined;\n        xmlLang?: string | undefined;\n        xmlns?: string | undefined;\n        xmlnsXlink?: string | undefined;\n        xmlSpace?: string | undefined;\n        y1?: number | string | undefined;\n        y2?: number | string | undefined;\n        y?: number | string | undefined;\n        yChannelSelector?: string | undefined;\n        z?: number | string | undefined;\n        zoomAndPan?: string | undefined;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean | undefined;\n        allowpopups?: boolean | undefined;\n        autosize?: boolean | undefined;\n        blinkfeatures?: string | undefined;\n        disableblinkfeatures?: string | undefined;\n        disableguestresize?: boolean | undefined;\n        disablewebsecurity?: boolean | undefined;\n        guestinstance?: string | undefined;\n        httpreferrer?: string | undefined;\n        nodeintegration?: boolean | undefined;\n        partition?: string | undefined;\n        plugins?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n        useragent?: string | undefined;\n        webpreferences?: string | undefined;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG { }\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    type Validator<T> = PropTypes.Validator<T>;\n\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : undefined extends T[K]\n            ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>\n    };\n\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated - Use `typeof React.Children` instead.\n     */\n    // Sync with type of `const Children`.\n    interface ReactChildren {\n        map<T, C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => T):\n            C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | ReadonlyArray<C>, fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack: string;\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T :\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n            string extends keyof P ? P :\n                // Prefer declared types which are not exactly any\n                & Pick<P, NotExactlyAnyPropertyKeys<P>>\n                // For props which are exactly any, use the type inferred from propTypes if present\n                & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n                // Keep leftover props not specified in propTypes\n                & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\ntype InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any\n    ? string extends keyof P ? P :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D; }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T; }\n        ? MergePropTypes<P, PropTypes.InferProps<T>>\n        : C extends { defaultProps: infer D; }\n            ? Defaultize<P, D>\n            : P;\n\ndeclare global {\n    namespace JSX {\n        interface Element extends React.ReactElement<any, any> { }\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty { props: {}; }\n        interface ElementChildrenAttribute { children: {}; }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n                : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends React.Attributes { }\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> { }\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGProps<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGProps<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n","path":"file:///node_modules/react/index.d.ts"},{"code":"{\n  \"name\": \"csstype\",\n  \"version\": \"3.1.2\",\n  \"main\": \"\",\n  \"types\": \"index.d.ts\",\n  \"description\": \"Strict TypeScript and Flow types for style based on MDN data\",\n  \"repository\": \"https://github.com/frenic/csstype\",\n  \"author\": \"Fredrik Nicol <fredrik.nicol@gmail.com>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@types/chokidar\": \"^2.1.3\",\n    \"@types/css-tree\": \"^2.3.1\",\n    \"@types/jest\": \"^29.5.0\",\n    \"@types/jsdom\": \"^21.1.1\",\n    \"@types/node\": \"^16.18.23\",\n    \"@types/prettier\": \"^2.7.2\",\n    \"@types/request\": \"^2.48.8\",\n    \"@types/turndown\": \"^5.0.1\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.57.0\",\n    \"@typescript-eslint/parser\": \"^5.57.0\",\n    \"chalk\": \"^4.1.2\",\n    \"chokidar\": \"^3.5.3\",\n    \"eslint\": \"^8.37.0\",\n    \"css-tree\": \"^2.3.1\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"fast-glob\": \"^3.2.12\",\n    \"flow-bin\": \"^0.203.1\",\n    \"jest\": \"^29.5.0\",\n    \"jsdom\": \"^21.1.1\",\n    \"mdn-browser-compat-data\": \"git+https://github.com/mdn/browser-compat-data.git#22e0f5f1707f29f0c646ea89f5ba5ea7734fa48a\",\n    \"mdn-data\": \"git+https://github.com/mdn/data.git#d0e0fce2abd53e5c918a2f6a38e8c4607027768a\",\n    \"prettier\": \"^2.8.7\",\n    \"request\": \"^2.88.2\",\n    \"ts-jest\": \"^29.0.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"turndown\": \"^7.1.2\",\n    \"typescript\": \"~5.0.3\"\n  },\n  \"scripts\": {\n    \"prepublish\": \"npm install --prefix __tests__ && npm install --prefix __tests__/__fixtures__\",\n    \"prepublishOnly\": \"tsc && npm run test:src && npm run build && ts-node --files prepublish.ts\",\n    \"update\": \"ts-node --files update.ts\",\n    \"build\": \"ts-node --files build.ts --start\",\n    \"watch\": \"ts-node --files build.ts --watch\",\n    \"lint\": \"eslint . --ext .js,.jsx,.ts,.tsx --fix\",\n    \"pretty\": \"prettier --write build.ts **/*.{ts,js,json,md}\",\n    \"lazy\": \"tsc && npm run lint\",\n    \"test\": \"jest --runInBand\",\n    \"test:src\": \"jest src.*.ts\",\n    \"test:dist\": \"jest dist.*.ts --runInBand\"\n  },\n  \"files\": [\n    \"index.d.ts\",\n    \"index.js.flow\"\n  ],\n  \"keywords\": [\n    \"css\",\n    \"style\",\n    \"typescript\",\n    \"flow\",\n    \"typings\",\n    \"types\",\n    \"definitions\"\n  ]\n}\n","path":"file:///node_modules/csstype/package.json"},{"code":"{\n  \"name\": \"prop-types\",\n  \"version\": \"15.8.1\",\n  \"description\": \"Runtime type checking for React props and similar objects.\",\n  \"sideEffects\": false,\n  \"main\": \"index.js\",\n  \"license\": \"MIT\",\n  \"files\": [\n    \"LICENSE\",\n    \"README.md\",\n    \"checkPropTypes.js\",\n    \"factory.js\",\n    \"factoryWithThrowingShims.js\",\n    \"factoryWithTypeCheckers.js\",\n    \"index.js\",\n    \"prop-types.js\",\n    \"prop-types.min.js\",\n    \"lib\"\n  ],\n  \"repository\": \"facebook/prop-types\",\n  \"keywords\": [\n    \"react\"\n  ],\n  \"bugs\": {\n    \"url\": \"https://github.com/facebook/prop-types/issues\"\n  },\n  \"homepage\": \"https://facebook.github.io/react/\",\n  \"dependencies\": {\n    \"loose-envify\": \"^1.4.0\",\n    \"object-assign\": \"^4.1.1\",\n    \"react-is\": \"^16.13.1\"\n  },\n  \"scripts\": {\n    \"pretest\": \"npm run lint\",\n    \"lint\": \"eslint .\",\n    \"test\": \"npm run tests-only\",\n    \"tests-only\": \"jest\",\n    \"umd\": \"NODE_ENV=development browserify index.js -t loose-envify --standalone PropTypes -o prop-types.js\",\n    \"umd-min\": \"NODE_ENV=production browserify index.js -t loose-envify -t uglifyify --standalone PropTypes  -p bundle-collapser/plugin -o | uglifyjs --compress unused,dead_code -o prop-types.min.js\",\n    \"build\": \"yarn umd && yarn umd-min\",\n    \"prepublish\": \"not-in-publish || yarn build\"\n  },\n  \"devDependencies\": {\n    \"babel-jest\": \"^19.0.0\",\n    \"babel-preset-react\": \"^6.24.1\",\n    \"browserify\": \"^16.5.0\",\n    \"bundle-collapser\": \"^1.4.0\",\n    \"eslint\": \"^8.6.0\",\n    \"in-publish\": \"^2.0.1\",\n    \"jest\": \"^19.0.2\",\n    \"react\": \"^15.7.0\",\n    \"uglifyify\": \"^5.0.2\",\n    \"uglifyjs\": \"^2.4.11\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"loose-envify\"\n    ]\n  }\n}\n","path":"file:///node_modules/prop-types/package.json"},{"code":"// Type definitions for prop-types 15.7\n// Project: https://github.com/reactjs/prop-types, https://facebook.github.io/react\n// Definitions by: DovydasNavickas <https://github.com/DovydasNavickas>\n//                 Ferdy Budhidharma <https://github.com/ferdaber>\n//                 Sebastian Silbermann <https://github.com/eps1lon>\n// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped\n// TypeScript Version: 2.8\n\nexport type ReactComponentLike =\n    | string\n    | ((props: any, context?: any) => any)\n    | (new (props: any, context?: any) => any);\n\nexport interface ReactElementLike {\n    type: ReactComponentLike;\n    props: any;\n    key: string | number | null;\n}\n\nexport interface ReactNodeArray extends Iterable<ReactNodeLike> {}\n\nexport type ReactNodeLike =\n    | ReactElementLike\n    | ReactNodeArray\n    | string\n    | number\n    | boolean\n    | null\n    | undefined;\n\nexport const nominalTypeHack: unique symbol;\n\nexport type IsOptional<T> = undefined extends T ? true : false;\n\nexport type RequiredKeys<V> = { [K in keyof V]-?: Exclude<V[K], undefined> extends Validator<infer T> ? IsOptional<T> extends true ? never : K : never }[keyof V];\nexport type OptionalKeys<V> = Exclude<keyof V, RequiredKeys<V>>;\nexport type InferPropsInner<V> = { [K in keyof V]-?: InferType<V[K]>; };\n\nexport interface Validator<T> {\n    (props: { [key: string]: any }, propName: string, componentName: string, location: string, propFullName: string): Error | null;\n    [nominalTypeHack]?: {\n        type: T;\n    } | undefined;\n}\n\nexport interface Requireable<T> extends Validator<T | undefined | null> {\n    isRequired: Validator<NonNullable<T>>;\n}\n\nexport type ValidationMap<T> = { [K in keyof T]?: Validator<T[K]> };\n\nexport type InferType<V> = V extends Validator<infer T> ? T : any;\nexport type InferProps<V> =\n    & InferPropsInner<Pick<V, RequiredKeys<V>>>\n    & Partial<InferPropsInner<Pick<V, OptionalKeys<V>>>>;\n\nexport const any: Requireable<any>;\nexport const array: Requireable<any[]>;\nexport const bool: Requireable<boolean>;\nexport const func: Requireable<(...args: any[]) => any>;\nexport const number: Requireable<number>;\nexport const object: Requireable<object>;\nexport const string: Requireable<string>;\nexport const node: Requireable<ReactNodeLike>;\nexport const element: Requireable<ReactElementLike>;\nexport const symbol: Requireable<symbol>;\nexport const elementType: Requireable<ReactComponentLike>;\nexport function instanceOf<T>(expectedClass: new (...args: any[]) => T): Requireable<T>;\nexport function oneOf<T>(types: ReadonlyArray<T>): Requireable<T>;\nexport function oneOfType<T extends Validator<any>>(types: T[]): Requireable<NonNullable<InferType<T>>>;\nexport function arrayOf<T>(type: Validator<T>): Requireable<T[]>;\nexport function objectOf<T>(type: Validator<T>): Requireable<{ [K in keyof any]: T; }>;\nexport function shape<P extends ValidationMap<any>>(type: P): Requireable<InferProps<P>>;\nexport function exact<P extends ValidationMap<any>>(type: P): Requireable<Required<InferProps<P>>>;\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param typeSpecs Map of name to a ReactPropType\n * @param values Runtime values that need to be type-checked\n * @param location e.g. \"prop\", \"context\", \"child context\"\n * @param componentName Name of the component for error messages\n * @param getStack Returns the component stack\n */\nexport function checkPropTypes(typeSpecs: any, values: any, location: string, componentName: string, getStack?: () => any): void;\n\n/**\n * Only available if NODE_ENV=production\n */\nexport function resetWarningCache(): void;\n","path":"file:///node_modules/prop-types/index.d.ts"},{"code":"export {};\n\nexport type PropertyValue<TValue> = TValue extends Array<infer AValue>\n  ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue>\n  : TValue extends infer TUnpacked & {}\n  ? TUnpacked\n  : TValue;\n\nexport type Fallback<T> = { [P in keyof T]: T[P] | NonNullable<T[P]>[] };\n\nexport interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  accentColor?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  alignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  alignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  alignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  alignTracks?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  animationComposition?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  animationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  animationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  animationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  animationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  animationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  animationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  animationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  animationTimeline?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  animationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  aspectRatio?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  backdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox  |  Safari   |  Edge  |   IE   |\n   * | :------: | :------: | :-------: | :----: | :----: |\n   * |  **36**  |  **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  backfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  backgroundAttachment?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  backgroundBlendMode?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  | **14**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  backgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  backgroundColor?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  backgroundImage?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  backgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  backgroundRepeat?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  backgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  blockOverflow?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  blockSize?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  borderBlockColor?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  borderBlockEndColor?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  borderBlockStartColor?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  borderBlockStyle?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  borderBlockWidth?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  borderBottomColor?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  borderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  borderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  borderBottomStyle?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  borderBottomWidth?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  borderCollapse?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  borderEndEndRadius?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  borderEndStartRadius?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  borderImageOutset?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  borderImageRepeat?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  borderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  borderImageSource?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  borderImageWidth?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  borderInlineColor?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  borderInlineEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  borderInlineEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  borderInlineEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  borderInlineStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  borderInlineStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  borderInlineStartWidth?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  borderInlineStyle?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  borderInlineWidth?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  borderLeftColor?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  borderLeftStyle?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  borderLeftWidth?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  borderRightColor?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  borderRightStyle?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  borderRightWidth?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  borderSpacing?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  borderStartEndRadius?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  borderStartStartRadius?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  borderTopColor?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  borderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  borderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  borderTopStyle?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  borderTopWidth?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  boxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  boxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  breakAfter?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  breakBefore?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  breakInside?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  captionSide?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  caretColor?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  caretShape?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  clipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  colorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  colorScheme?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  columnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  columnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  columnGap?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  columnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  columnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  columnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  columnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  columnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  containIntrinsicBlockSize?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  containIntrinsicHeight?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  containIntrinsicInlineSize?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  containIntrinsicWidth?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  containerName?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  containerType?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **85** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  contentVisibility?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  counterIncrement?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  counterReset?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **85** | **68**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  counterSet?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  emptyCells?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  flexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  flexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  flexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  flexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  flexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  fontFamily?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  fontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  fontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  fontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  fontOpticalSizing?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  fontPalette?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  fontSize?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  fontSmooth?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  fontStretch?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  fontStyle?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps ]`\n   *\n   * **Initial value**: `weight style`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  fontSynthesis?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  fontVariant?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * |   No   | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  fontVariantAlternates?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  fontVariantCaps?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  fontVariantEastAsian?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **108** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  fontVariantEmoji?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  fontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  fontVariantNumeric?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * |   No   | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  fontVariantPosition?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  fontVariationSettings?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** |   No    |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  forcedColorAdjust?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  gridAutoColumns?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  gridAutoFlow?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  gridAutoRows?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  gridColumnEnd?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  gridColumnStart?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  gridRowEnd?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  gridRowStart?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  gridTemplateAreas?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  gridTemplateColumns?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  gridTemplateRows?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  hangingPunctuation?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |    Safari     | Edge | IE  |\n   * | :-----: | :-----: | :-----------: | :--: | :-: |\n   * | **106** | **98**  | **5.1** _-x-_ | n/a  | No  |\n   * | 6 _-x-_ |         |               |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  hyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  hyphenateLimitChars?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |    Safari     |  Edge  |      IE      |\n   * | :------: | :-----: | :-----------: | :----: | :----------: |\n   * |  **55**  | **43**  | **5.1** _-x-_ | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ |               |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  imageOrientation?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  imageRendering?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  imageResolution?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  initialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  inlineSize?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  inputSecurity?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  insetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  insetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  insetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  insetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  justifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  justifyItems?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  justifySelf?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  justifyTracks?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  lineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  lineHeightStep?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  listStyleImage?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  listStylePosition?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  listStyleType?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  marginBlockEnd?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  marginBlockStart?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginBottom?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **87**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  marginInlineEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **87**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  marginInlineStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  marginLeft?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginRight?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  marginTop?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  marginTrim?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  maskBorderMode?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                  Safari                   | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :---------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    | **3.1** _(-webkit-mask-box-image-outset)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  maskBorderOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                  Safari                   | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :---------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    | **3.1** _(-webkit-mask-box-image-repeat)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  maskBorderRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                  Safari                  | Edge | IE  |\n   * | :------------------------------------: | :-----: | :--------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    | **3.1** _(-webkit-mask-box-image-slice)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  maskBorderSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                  Safari                   | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :---------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    | **3.1** _(-webkit-mask-box-image-source)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  maskBorderSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                  Safari                  | Edge | IE  |\n   * | :------------------------------------: | :-----: | :--------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    | **3.1** _(-webkit-mask-box-image-width)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  maskBorderWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge | IE  |\n   * | :---------: | :-----: | :------: | :--: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4** | n/a  | No  |\n   * |             |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  maskClip?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome | Firefox |  Safari  | Edge  | IE  |\n   * | :----: | :-----: | :------: | :---: | :-: |\n   * |   No   | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  maskComposite?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge  | IE  |\n   * | :---------: | :-----: | :------: | :---: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4** | 16-79 | No  |\n   * |             |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  maskImage?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  maskMode?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge | IE  |\n   * | :---------: | :-----: | :------: | :--: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4** | n/a  | No  |\n   * |             |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  maskOrigin?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * |   Chrome    | Firefox |  Safari   | Edge  | IE  |\n   * | :---------: | :-----: | :-------: | :---: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4**  | 18-79 | No  |\n   * |             |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  maskPosition?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * |   Chrome    | Firefox |  Safari   | Edge  | IE  |\n   * | :---------: | :-----: | :-------: | :---: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4**  | 18-79 | No  |\n   * |             |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  maskRepeat?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge  | IE  |\n   * | :---------: | :-----: | :------: | :---: | :-: |\n   * | **4** _-x-_ | **53**  | **15.4** | 18-79 | No  |\n   * |             |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  maskSize?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  maskType?: Property.MaskType | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  mathDepth?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  mathShift?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** |   n/a   | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  mathStyle?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  maxBlockSize?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  maxHeight?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  maxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  maxLines?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  maxWidth?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  minBlockSize?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  minHeight?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  minInlineSize?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  minWidth?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  mixBlendMode?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **55**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  motionDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  motionPath?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **56**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  motionRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  objectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  objectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   | **72**  | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  offsetAnchor?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **55**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  offsetDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  offsetPath?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  offsetPosition?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **56**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotate?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **56**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  outlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  outlineOffset?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  outlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  outlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  overflowAnchor?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  overflowBlock?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **29**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box\n   */\n  overflowClipBox?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  overflowClipMargin?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  overflowInline?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  overflowWrap?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  overflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  overflowY?: Property.OverflowY | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  overscrollBehaviorInline?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  overscrollBehaviorX?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  overscrollBehaviorY?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  paddingBlockEnd?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  paddingBlockStart?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingBottom?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **87**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  paddingInlineEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **87**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  paddingInlineStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  paddingLeft?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingRight?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  paddingTop?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * | **85** | **110** | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  pageBreakAfter?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  pageBreakBefore?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  pageBreakInside?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  paintOrder?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  perspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  pointerEvents?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  printColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  rowGap?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  rubyAlign?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  rubyMerge?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  rubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  scrollBehavior?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  scrollMarginBlockStart?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  scrollMarginInlineStart?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  scrollPaddingBottom?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  scrollPaddingLeft?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  scrollPaddingRight?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  scrollPaddingTop?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  scrollSnapAlign?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollSnapMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollSnapMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollSnapMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollSnapMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  scrollSnapStop?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  scrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | vertical | horizontal ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  scrollTimelineAxis?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <custom-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  scrollTimelineName?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  scrollbarColor?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  scrollbarGutter?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  scrollbarWidth?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  shapeImageThreshold?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  shapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  shapeOutside?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  tabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  tableLayout?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  textAlign?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  textAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            | Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :---: | :------------------------------------: |\n   * |           **48**           | **48**  |         **preview**          | 15-79 | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |       |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  textCombineUpright?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  textDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  textDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  textDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  textDecorationSkipInk?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  textDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationThickness?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  textEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  textEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  textEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  textIndent?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * |  n/a   | **55**  |   No   | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  textJustify?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  textOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  textOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  textRendering?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  textShadow?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  textSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  textTransform?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  textUnderlineOffset?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  textUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  touchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  transformBox?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |\n   * | :-----: | :-------: | :-----: | :----: | :-----: |\n   * | **36**  |  **16**   |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  transformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |\n   * | :------: | :------: | :-----: | :----: | :-: |\n   * |  **36**  |  **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  transformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  transitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  transitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  transitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  transitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  userSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  verticalAlign?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  viewTransitionName?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  whiteSpace?: Property.WhiteSpace | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  willChange?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  wordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  wordWrap?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  writingMode?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   No    | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  backgroundPosition?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  borderBlock?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  borderBlockEnd?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  borderBlockStart?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  borderBottom?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  borderColor?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  borderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  borderInline?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  borderInlineEnd?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  borderInlineStart?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  borderLeft?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  borderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  borderRight?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  borderStyle?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  borderTop?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  borderWidth?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  columnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ none | <length> | auto <length> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  containIntrinsicSize?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  flexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  gridArea?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  gridColumn?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  gridRow?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  gridTemplate?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  insetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  insetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  lineClamp?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  listStyle?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  marginBlock?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  marginInline?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox | Safari  | Edge  | IE  |\n   * | :----: | :-----: | :-----: | :---: | :-: |\n   * | **1**  |  **2**  | **3.1** | 12-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |               Safari               | Edge | IE  |\n   * | :------------------------------: | :-----: | :--------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    | **3.1** _(-webkit-mask-box-image)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  maskBorder?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **94** | **88**  | **1.2** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  overscrollBehavior?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  paddingBlock?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  paddingInline?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  placeContent?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  placeItems?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  placeSelf?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  scrollMarginBlock?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  scrollMarginInline?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  scrollPadding?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  scrollPaddingBlock?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  scrollPaddingInline?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollSnapMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[<'scroll-timeline-name'> <'scroll-timeline-axis'>?]#`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  scrollTimeline?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  textEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n}\n\nexport interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandProperties<TLength, TTime>,\n    StandardShorthandProperties<TLength, TTime> {}\n\nexport interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  MozAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  MozAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  MozAppearance?: Property.MozAppearance | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  MozBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBinding?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderBottomColors?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozBorderEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderLeftColors?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderRightColors?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderTopColors?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  MozColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozContextProperties?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  MozHyphens?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozImageRegion?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  MozOrient?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  MozOsxFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  MozPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  MozPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  MozStackSizing?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  MozTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  MozTextBlink?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  MozTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  MozTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  MozTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  MozTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozUserFocus?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  MozUserModify?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  MozUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  MozWindowDragging?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  MozWindowShadow?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  msAccelerator?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  msBlockProgression?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomChaining?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  msContentZoomLimitMax?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  msContentZoomLimitMin?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  msContentZoomSnapPoints?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomSnapType?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  msContentZooming?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  msFilter?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  msFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  msFlexPositive?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowFrom?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowInto?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridColumns?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridRows?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  msHighContrastAdjust?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  msHyphenateLimitChars?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  msHyphenateLimitLines?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  msHyphenateLimitZone?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  msHyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  msImeAlign?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  msLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  msOrder?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  msOverflowStyle?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowY?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  msScrollChaining?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitXMax?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitXMin?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitYMax?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitYMin?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  msScrollRails?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsX?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsY?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollSnapType?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollTranslation?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbar3dlightColor?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  msScrollbarArrowColor?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbarBaseColor?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarDarkshadowColor?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  msScrollbarFaceColor?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  msScrollbarHighlightColor?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarShadowColor?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  msScrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  msTextAutospace?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  msTextCombineHorizontal?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  msTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  msTouchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  msTouchSelect?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  msTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  msTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  msTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  msUserSelect?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  msWordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  msWrapFlow?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msWrapMargin?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  msWrapThrough?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  msWritingMode?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitAlignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  WebkitAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  WebkitAppearance?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBackdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  WebkitBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  WebkitBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  WebkitBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitBorderBeforeColor?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBorderBeforeStyle?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitBorderBeforeWidth?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  WebkitBorderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  WebkitBoxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxReflect?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  WebkitBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitClipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  WebkitColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitFilter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFlexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  WebkitFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitFlexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitFlexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  WebkitFlexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitHyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  WebkitHyphens?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitInitialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitJustifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitLineClamp?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  WebkitMaskAttachment?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  WebkitMaskBoxImageRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskBoxImageSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitMaskBoxImageWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  WebkitMaskClip?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  WebkitMaskComposite?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskImage?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  WebkitMaskOrigin?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  WebkitMaskPosition?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionX?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionY?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeat?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatX?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatY?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitMaskSize?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitOrder?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitOverflowScrolling?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  WebkitPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  WebkitPrintColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  WebkitRubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitScrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitShapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  WebkitTapHighlightColor?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextCombine?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  WebkitTextDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  WebkitTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  WebkitTextEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextFillColor?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  WebkitTextOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  WebkitTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextStrokeColor?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitTextStrokeWidth?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitTextUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  WebkitTouchCallout?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  WebkitTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  WebkitTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  WebkitTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  WebkitUserModify?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  WebkitWritingMode?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  MozAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  MozBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  MozColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  MozColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  MozTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  msContentZoomLimit?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  msContentZoomSnap?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  msFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  msScrollLimit?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  msScrollSnapX?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  msScrollSnapY?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  msTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  WebkitAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  WebkitBorderBefore?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  WebkitBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  WebkitBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  WebkitColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  WebkitColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  WebkitFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  WebkitFlexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  WebkitMask?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  WebkitMaskBoxImage?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  WebkitTextEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  WebkitTextStroke?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  WebkitTransition?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {}\n\nexport interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  boxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  boxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  boxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  boxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  boxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  boxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridColumnGap?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  gridGap?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridRowGap?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  imeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapCoordinate?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  scrollSnapDestination?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeX?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeY?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  KhtmlBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  KhtmlBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  KhtmlBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  KhtmlBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  MozBackgroundInlinePolicy?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  MozBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomleft?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomright?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopleft?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopright?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  MozBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  MozBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  MozBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  MozBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  MozFloatEdge?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozForceBrokenImageIcon?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  MozOutline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  MozOutlineColor?: Property.OutlineColor | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozOutlineRadius?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozOutlineRadiusBottomleft?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozOutlineRadiusBottomright?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozOutlineRadiusTopleft?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozOutlineRadiusTopright?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozOutlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  MozOutlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozTextAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  MozTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  MozTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozUserInput?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  msImeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  OAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  OAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  OAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  OAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  OBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  OBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  OObjectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  OObjectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  OTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  OTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  OTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  OTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  OTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  WebkitBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  WebkitBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  WebkitBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  WebkitBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  WebkitBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  WebkitScrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  WebkitScrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n}\n\nexport interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  alignmentBaseline?: Property.AlignmentBaseline | undefined;\n  baselineShift?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  clipPath?: Property.ClipPath | undefined;\n  clipRule?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  colorInterpolation?: Property.ColorInterpolation | undefined;\n  colorRendering?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  dominantBaseline?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  fillOpacity?: Property.FillOpacity | undefined;\n  fillRule?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  floodColor?: Property.FloodColor | undefined;\n  floodOpacity?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  fontFamily?: Property.FontFamily | undefined;\n  fontSize?: Property.FontSize<TLength> | undefined;\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  fontStretch?: Property.FontStretch | undefined;\n  fontStyle?: Property.FontStyle | undefined;\n  fontVariant?: Property.FontVariant | undefined;\n  fontWeight?: Property.FontWeight | undefined;\n  glyphOrientationVertical?: Property.GlyphOrientationVertical | undefined;\n  imageRendering?: Property.ImageRendering | undefined;\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  lightingColor?: Property.LightingColor | undefined;\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  markerEnd?: Property.MarkerEnd | undefined;\n  markerMid?: Property.MarkerMid | undefined;\n  markerStart?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  paintOrder?: Property.PaintOrder | undefined;\n  pointerEvents?: Property.PointerEvents | undefined;\n  shapeRendering?: Property.ShapeRendering | undefined;\n  stopColor?: Property.StopColor | undefined;\n  stopOpacity?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  strokeDasharray?: Property.StrokeDasharray<TLength> | undefined;\n  strokeDashoffset?: Property.StrokeDashoffset<TLength> | undefined;\n  strokeLinecap?: Property.StrokeLinecap | undefined;\n  strokeLinejoin?: Property.StrokeLinejoin | undefined;\n  strokeMiterlimit?: Property.StrokeMiterlimit | undefined;\n  strokeOpacity?: Property.StrokeOpacity | undefined;\n  strokeWidth?: Property.StrokeWidth<TLength> | undefined;\n  textAnchor?: Property.TextAnchor | undefined;\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  textRendering?: Property.TextRendering | undefined;\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  vectorEffect?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  whiteSpace?: Property.WhiteSpace | undefined;\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  writingMode?: Property.WritingMode | undefined;\n}\n\nexport interface Properties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardProperties<TLength, TTime>,\n    VendorProperties<TLength, TTime>,\n    ObsoleteProperties<TLength, TTime>,\n    SvgProperties<TLength, TTime> {}\n\nexport interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  \"accent-color\"?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  \"align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  \"align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  \"align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  \"align-tracks\"?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  \"animation-composition\"?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  \"animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  \"animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  \"animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  \"animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  \"animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  \"animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  \"animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  \"animation-timeline\"?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  \"animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  \"aspect-ratio\"?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  \"backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox  |  Safari   |  Edge  |   IE   |\n   * | :------: | :------: | :-------: | :----: | :----: |\n   * |  **36**  |  **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  \"backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  \"background-attachment\"?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  \"background-blend-mode\"?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  | **14**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  \"background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  \"background-color\"?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  \"background-image\"?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  \"background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  \"background-position-x\"?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  \"background-position-y\"?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  \"background-repeat\"?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  \"background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  \"block-overflow\"?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  \"block-size\"?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  \"border-block-color\"?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  \"border-block-end-color\"?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  \"border-block-end-style\"?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  \"border-block-end-width\"?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  \"border-block-start-color\"?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  \"border-block-start-style\"?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  \"border-block-start-width\"?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  \"border-block-style\"?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  \"border-block-width\"?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  \"border-bottom-color\"?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  \"border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  \"border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  \"border-bottom-style\"?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  \"border-bottom-width\"?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  \"border-collapse\"?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  \"border-end-end-radius\"?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  \"border-end-start-radius\"?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  \"border-image-outset\"?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  \"border-image-repeat\"?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  \"border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  \"border-image-source\"?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  \"border-image-width\"?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  \"border-inline-color\"?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  \"border-inline-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  \"border-inline-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  \"border-inline-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  \"border-inline-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  \"border-inline-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  \"border-inline-start-width\"?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  \"border-inline-style\"?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  \"border-inline-width\"?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  \"border-left-color\"?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  \"border-left-style\"?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  \"border-left-width\"?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  \"border-right-color\"?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  \"border-right-style\"?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  \"border-right-width\"?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  \"border-spacing\"?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  \"border-start-end-radius\"?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  \"border-start-start-radius\"?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  \"border-top-color\"?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  \"border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  \"border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  \"border-top-style\"?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  \"border-top-width\"?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  \"box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  \"box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  \"box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  \"break-after\"?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  \"break-before\"?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  \"break-inside\"?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  \"caption-side\"?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  \"caret-color\"?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  \"caret-shape\"?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  \"clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  \"color-scheme\"?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  \"column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  \"column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  \"column-gap\"?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  \"column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  \"column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  \"column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  \"column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  \"column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  \"contain-intrinsic-block-size\"?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  \"contain-intrinsic-height\"?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  \"contain-intrinsic-inline-size\"?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `none | <length> | auto <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  \"contain-intrinsic-width\"?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  \"container-name\"?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  \"container-type\"?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **85** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  \"content-visibility\"?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  \"counter-increment\"?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  \"counter-reset\"?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **85** | **68**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  \"counter-set\"?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  \"empty-cells\"?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  \"flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  \"flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  \"flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  \"flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  \"flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  \"font-family\"?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  \"font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  \"font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  \"font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  \"font-optical-sizing\"?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  \"font-palette\"?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  \"font-smooth\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  \"font-style\"?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps ]`\n   *\n   * **Initial value**: `weight style`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  \"font-synthesis\"?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  \"font-variant\"?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * |   No   | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  \"font-variant-alternates\"?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  \"font-variant-caps\"?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  \"font-variant-east-asian\"?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **108** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  \"font-variant-emoji\"?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  \"font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  \"font-variant-numeric\"?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * |   No   | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  \"font-variant-position\"?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  \"font-variation-settings\"?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  \"font-weight\"?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** |   No    |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  \"forced-color-adjust\"?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  \"grid-auto-columns\"?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  \"grid-auto-flow\"?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  \"grid-auto-rows\"?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  \"grid-column-end\"?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  \"grid-column-start\"?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  \"grid-row-end\"?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  \"grid-row-start\"?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  \"grid-template-areas\"?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  \"grid-template-columns\"?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  \"grid-template-rows\"?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  \"hanging-punctuation\"?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |    Safari     | Edge | IE  |\n   * | :-----: | :-----: | :-----------: | :--: | :-: |\n   * | **106** | **98**  | **5.1** _-x-_ | n/a  | No  |\n   * | 6 _-x-_ |         |               |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  \"hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  \"hyphenate-limit-chars\"?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |    Safari     |  Edge  |      IE      |\n   * | :------: | :-----: | :-----------: | :----: | :----------: |\n   * |  **55**  | **43**  | **5.1** _-x-_ | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ |               |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  \"image-orientation\"?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  \"image-resolution\"?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  \"initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  \"inline-size\"?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"input-security\"?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  \"inset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  \"inset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  \"inset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  \"inset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  \"justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  \"justify-items\"?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  \"justify-self\"?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  \"justify-tracks\"?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  \"line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  \"line-height-step\"?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  \"list-style-image\"?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  \"list-style-position\"?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  \"list-style-type\"?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  \"margin-block-end\"?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  \"margin-block-start\"?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  \"margin-bottom\"?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **87**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  \"margin-inline-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **87**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  \"margin-inline-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  \"margin-left\"?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  \"margin-right\"?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  \"margin-top\"?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  \"margin-trim\"?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  \"mask-border-mode\"?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                  Safari                   | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :---------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    | **3.1** _(-webkit-mask-box-image-outset)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  \"mask-border-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                  Safari                   | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :---------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    | **3.1** _(-webkit-mask-box-image-repeat)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  \"mask-border-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                  Safari                  | Edge | IE  |\n   * | :------------------------------------: | :-----: | :--------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    | **3.1** _(-webkit-mask-box-image-slice)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  \"mask-border-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                  Safari                   | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :---------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    | **3.1** _(-webkit-mask-box-image-source)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  \"mask-border-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                  Safari                  | Edge | IE  |\n   * | :------------------------------------: | :-----: | :--------------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    | **3.1** _(-webkit-mask-box-image-width)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  \"mask-border-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge | IE  |\n   * | :---------: | :-----: | :------: | :--: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4** | n/a  | No  |\n   * |             |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  \"mask-clip\"?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome | Firefox |  Safari  | Edge  | IE  |\n   * | :----: | :-----: | :------: | :---: | :-: |\n   * |   No   | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  \"mask-composite\"?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge  | IE  |\n   * | :---------: | :-----: | :------: | :---: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4** | 16-79 | No  |\n   * |             |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  \"mask-image\"?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  \"mask-mode\"?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge | IE  |\n   * | :---------: | :-----: | :------: | :--: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4** | n/a  | No  |\n   * |             |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  \"mask-origin\"?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * |   Chrome    | Firefox |  Safari   | Edge  | IE  |\n   * | :---------: | :-----: | :-------: | :---: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4**  | 18-79 | No  |\n   * |             |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  \"mask-position\"?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * |   Chrome    | Firefox |  Safari   | Edge  | IE  |\n   * | :---------: | :-----: | :-------: | :---: | :-: |\n   * | **1** _-x-_ | **53**  | **15.4**  | 18-79 | No  |\n   * |             |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  \"mask-repeat\"?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * |   Chrome    | Firefox |  Safari  | Edge  | IE  |\n   * | :---------: | :-----: | :------: | :---: | :-: |\n   * | **4** _-x-_ | **53**  | **15.4** | 18-79 | No  |\n   * |             |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  \"mask-size\"?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  \"mask-type\"?: Property.MaskType | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  \"math-depth\"?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  \"math-shift\"?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** |   n/a   | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  \"math-style\"?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  \"max-block-size\"?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  \"max-height\"?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  \"max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"max-lines\"?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  \"max-width\"?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  \"min-block-size\"?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  \"min-height\"?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  \"min-inline-size\"?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  \"min-width\"?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  \"mix-blend-mode\"?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **55**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"motion-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"motion-path\"?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **56**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"motion-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  \"object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  \"object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   | **72**  | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  \"offset-anchor\"?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **55**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"offset-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | ray( [ <angle> && <size> && contain? ] ) | <path()> | <url> | [ <basic-shape> || <geometry-box> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"offset-path\"?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  \"offset-position\"?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **56**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotate\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox |   Safari    | Edge | IE  |\n   * | :--------------------: | :-----: | :---------: | :--: | :-: |\n   * |         **56**         | **72**  | **preview** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |             |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  \"outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  \"outline-offset\"?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  \"outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  \"outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  \"overflow-anchor\"?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  \"overflow-block\"?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **29**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Mozilla/Gecko/Chrome/CSS/overflow-clip-box\n   */\n  \"overflow-clip-box\"?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  \"overflow-clip-margin\"?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  \"overflow-inline\"?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"overflow-wrap\"?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  \"overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  \"overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  \"overscroll-behavior-block\"?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  \"overscroll-behavior-inline\"?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  \"overscroll-behavior-x\"?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  \"overscroll-behavior-y\"?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  \"padding-block-end\"?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  \"padding-block-start\"?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  \"padding-bottom\"?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **87**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  \"padding-inline-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **87**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  \"padding-inline-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  \"padding-left\"?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  \"padding-right\"?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  \"padding-top\"?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * | **85** | **110** | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  \"page-break-after\"?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  \"page-break-before\"?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  \"page-break-inside\"?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **36**  |  **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  \"perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  \"row-gap\"?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  \"ruby-align\"?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  \"ruby-merge\"?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  \"ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  \"scroll-behavior\"?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  \"scroll-margin-block-end\"?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  \"scroll-margin-block-start\"?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  \"scroll-margin-inline-end\"?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  \"scroll-margin-inline-start\"?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  \"scroll-padding-block-end\"?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  \"scroll-padding-block-start\"?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  \"scroll-padding-bottom\"?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  \"scroll-padding-inline-end\"?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  \"scroll-padding-inline-start\"?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  \"scroll-padding-left\"?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  \"scroll-padding-right\"?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  \"scroll-padding-top\"?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  \"scroll-snap-align\"?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-snap-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-snap-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-snap-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-snap-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  \"scroll-snap-stop\"?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  \"scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | vertical | horizontal ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  \"scroll-timeline-axis\"?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <custom-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  \"scroll-timeline-name\"?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  \"scrollbar-color\"?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  \"scrollbar-gutter\"?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  \"scrollbar-width\"?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  \"shape-image-threshold\"?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  \"shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  \"shape-outside\"?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  \"tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  \"table-layout\"?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  \"text-align\"?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  \"text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            | Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :---: | :------------------------------------: |\n   * |           **48**           | **48**  |         **preview**          | 15-79 | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |       |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  \"text-combine-upright\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  \"text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  \"text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  \"text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  \"text-decoration-skip-ink\"?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  \"text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-thickness\"?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  \"text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  \"text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  \"text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  \"text-indent\"?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * |  n/a   | **55**  |   No   | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  \"text-justify\"?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  \"text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  \"text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  \"text-shadow\"?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  \"text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  \"text-transform\"?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  \"text-underline-offset\"?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  \"text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  \"touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  \"transform-box\"?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE    |\n   * | :-----: | :-------: | :-----: | :----: | :-----: |\n   * | **36**  |  **16**   |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ | 3.5 _-x-_ | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  \"transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  | IE  |\n   * | :------: | :------: | :-----: | :----: | :-: |\n   * |  **36**  |  **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ | 10 _-x-_ | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  \"transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  \"transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  \"transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  \"transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  \"transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  \"user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  \"vertical-align\"?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  \"view-transition-name\"?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  \"will-change\"?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  \"word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"word-wrap\"?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  \"writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  \"z-index\"?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   No    | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  \"background-position\"?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  \"border-block\"?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  \"border-block-end\"?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  \"border-block-start\"?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  \"border-bottom\"?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  \"border-color\"?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  \"border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  \"border-inline\"?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  \"border-inline-end\"?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  \"border-inline-start\"?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  \"border-left\"?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  \"border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  \"border-right\"?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  \"border-style\"?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  \"border-top\"?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  \"border-width\"?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  \"column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ none | <length> | auto <length> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  \"contain-intrinsic-size\"?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  \"flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  \"grid-area\"?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  \"grid-column\"?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  \"grid-row\"?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  \"grid-template\"?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  \"inset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  \"inset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"line-clamp\"?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  \"list-style\"?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  \"margin-block\"?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  \"margin-inline\"?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox | Safari  | Edge  | IE  |\n   * | :----: | :-----: | :-----: | :---: | :-: |\n   * | **1**  |  **2**  | **3.1** | 12-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |               Safari               | Edge | IE  |\n   * | :------------------------------: | :-----: | :--------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    | **3.1** _(-webkit-mask-box-image)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  \"mask-border\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **94** | **88**  | **1.2** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  \"overscroll-behavior\"?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  \"padding-block\"?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  \"padding-inline\"?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  \"place-content\"?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  \"place-items\"?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  \"place-self\"?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  \"scroll-margin-block\"?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  \"scroll-margin-inline\"?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  \"scroll-padding\"?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  \"scroll-padding-block\"?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  \"scroll-padding-inline\"?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-snap-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[<'scroll-timeline-name'> <'scroll-timeline-axis'>?]#`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  \"scroll-timeline\"?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  \"text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ | 4 _-x-_ | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n}\n\nexport interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphen<TLength, TTime>,\n    StandardShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-moz-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-moz-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-moz-appearance\"?: Property.MozAppearance | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-moz-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-binding\"?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-bottom-colors\"?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-border-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-left-colors\"?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-right-colors\"?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-top-colors\"?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-moz-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-context-properties\"?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-moz-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-image-region\"?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  \"-moz-orient\"?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-osx-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-moz-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  \"-moz-stack-sizing\"?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-moz-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-text-blink\"?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-moz-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-moz-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-moz-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-moz-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-user-focus\"?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-moz-user-modify\"?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  \"-moz-window-dragging\"?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-moz-window-shadow\"?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  \"-ms-accelerator\"?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  \"-ms-block-progression\"?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-chaining\"?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  \"-ms-content-zoom-limit-max\"?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-ms-content-zoom-limit-min\"?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  \"-ms-content-zoom-snap-points\"?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-snap-type\"?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  \"-ms-content-zooming\"?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  \"-ms-filter\"?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-ms-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-flex-positive\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-from\"?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-into\"?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-columns\"?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-rows\"?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-high-contrast-adjust\"?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-hyphenate-limit-chars\"?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  \"-ms-hyphenate-limit-lines\"?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-hyphenate-limit-zone\"?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-ms-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-ime-align\"?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-order\"?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-overflow-style\"?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  \"-ms-scroll-chaining\"?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-x-max\"?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-x-min\"?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-y-max\"?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-y-min\"?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  \"-ms-scroll-rails\"?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-x\"?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-y\"?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-snap-type\"?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-translation\"?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-3dlight-color\"?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  \"-ms-scrollbar-arrow-color\"?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-base-color\"?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-darkshadow-color\"?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  \"-ms-scrollbar-face-color\"?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  \"-ms-scrollbar-highlight-color\"?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-shadow-color\"?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  \"-ms-scrollbar-track-color\"?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-autospace\"?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-combine-horizontal\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-ms-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  \"-ms-touch-select\"?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-ms-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-ms-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-ms-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  \"-ms-user-select\"?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-ms-word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-wrap-flow\"?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-wrap-margin\"?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  \"-ms-wrap-through\"?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-ms-writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-webkit-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-webkit-appearance\"?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-webkit-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  \"-webkit-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"-webkit-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-border-before-color\"?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-border-before-style\"?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-border-before-width\"?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-webkit-border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  \"-webkit-box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-reflect\"?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-webkit-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-webkit-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-filter\"?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-webkit-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  \"-webkit-flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-webkit-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-line-clamp\"?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  \"-webkit-mask-attachment\"?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  \"-webkit-mask-box-image-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-box-image-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-mask-box-image-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  \"-webkit-mask-clip\"?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  \"-webkit-mask-composite\"?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-image\"?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  \"-webkit-mask-origin\"?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  \"-webkit-mask-position\"?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-x\"?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-y\"?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat\"?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-x\"?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-y\"?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-mask-size\"?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-order\"?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-overflow-scrolling\"?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-webkit-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  \"-webkit-print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  \"-webkit-ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  \"-webkit-tap-highlight-color\"?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-combine\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  \"-webkit-text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  \"-webkit-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  \"-webkit-text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-fill-color\"?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  \"-webkit-text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-webkit-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-stroke-color\"?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-text-stroke-width\"?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-webkit-touch-callout\"?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-webkit-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-webkit-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-webkit-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-webkit-user-modify\"?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-webkit-writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-moz-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-moz-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-moz-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-moz-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-moz-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  \"-ms-content-zoom-limit\"?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  \"-ms-content-zoom-snap\"?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-ms-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  \"-ms-scroll-limit\"?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  \"-ms-scroll-snap-x\"?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  \"-ms-scroll-snap-y\"?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-ms-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-webkit-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  \"-webkit-border-before\"?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-webkit-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  \"-webkit-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-webkit-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-webkit-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-webkit-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  \"-webkit-flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  \"-webkit-mask\"?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  \"-webkit-mask-box-image\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  \"-webkit-text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  \"-webkit-text-stroke\"?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-webkit-transition\"?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphen<TLength, TTime>,\n    VendorShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-column-gap\"?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  \"grid-gap\"?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-row-gap\"?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-coordinate\"?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-destination\"?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-x\"?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-y\"?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-khtml-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  \"-moz-background-inline-policy\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-moz-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomleft\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomright\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topleft\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topright\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-moz-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-moz-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-moz-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-moz-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  \"-moz-float-edge\"?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-force-broken-image-icon\"?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  \"-moz-outline\"?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  \"-moz-outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius\"?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius-bottomleft\"?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius-bottomright\"?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius-topleft\"?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-radius-topright\"?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-user-input\"?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-ms-ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  \"-o-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-o-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-o-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  \"-o-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-o-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  \"-o-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  \"-o-object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-o-object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  \"-o-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  \"-o-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-o-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-o-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-o-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-webkit-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-webkit-scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-webkit-scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n}\n\nexport interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  \"alignment-baseline\"?: Property.AlignmentBaseline | undefined;\n  \"baseline-shift\"?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  \"clip-path\"?: Property.ClipPath | undefined;\n  \"clip-rule\"?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  \"color-interpolation\"?: Property.ColorInterpolation | undefined;\n  \"color-rendering\"?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  \"dominant-baseline\"?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  \"fill-opacity\"?: Property.FillOpacity | undefined;\n  \"fill-rule\"?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  \"flood-color\"?: Property.FloodColor | undefined;\n  \"flood-opacity\"?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  \"font-family\"?: Property.FontFamily | undefined;\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  \"font-style\"?: Property.FontStyle | undefined;\n  \"font-variant\"?: Property.FontVariant | undefined;\n  \"font-weight\"?: Property.FontWeight | undefined;\n  \"glyph-orientation-vertical\"?: Property.GlyphOrientationVertical | undefined;\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  \"lighting-color\"?: Property.LightingColor | undefined;\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  \"marker-end\"?: Property.MarkerEnd | undefined;\n  \"marker-mid\"?: Property.MarkerMid | undefined;\n  \"marker-start\"?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  \"shape-rendering\"?: Property.ShapeRendering | undefined;\n  \"stop-color\"?: Property.StopColor | undefined;\n  \"stop-opacity\"?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  \"stroke-dasharray\"?: Property.StrokeDasharray<TLength> | undefined;\n  \"stroke-dashoffset\"?: Property.StrokeDashoffset<TLength> | undefined;\n  \"stroke-linecap\"?: Property.StrokeLinecap | undefined;\n  \"stroke-linejoin\"?: Property.StrokeLinejoin | undefined;\n  \"stroke-miterlimit\"?: Property.StrokeMiterlimit | undefined;\n  \"stroke-opacity\"?: Property.StrokeOpacity | undefined;\n  \"stroke-width\"?: Property.StrokeWidth<TLength> | undefined;\n  \"text-anchor\"?: Property.TextAnchor | undefined;\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  \"vector-effect\"?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  \"writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphen<TLength, TTime>,\n    VendorPropertiesHyphen<TLength, TTime>,\n    ObsoletePropertiesHyphen<TLength, TTime>,\n    SvgPropertiesHyphen<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;\n\nexport interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesFallback<TLength, TTime>,\n    StandardShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;\n\nexport interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesFallback<TLength, TTime>,\n    VendorShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;\n\nexport type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;\n\nexport interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesFallback<TLength, TTime>,\n    VendorPropertiesFallback<TLength, TTime>,\n    ObsoletePropertiesFallback<TLength, TTime>,\n    SvgPropertiesFallback<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>,\n    StandardShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>,\n    VendorShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;\n\nexport type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;\n\nexport interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphenFallback<TLength, TTime>,\n    VendorPropertiesHyphenFallback<TLength, TTime>,\n    ObsoletePropertiesHyphenFallback<TLength, TTime>,\n    SvgPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type AtRules =\n  | \"@charset\"\n  | \"@counter-style\"\n  | \"@document\"\n  | \"@font-face\"\n  | \"@font-feature-values\"\n  | \"@font-palette-values\"\n  | \"@import\"\n  | \"@keyframes\"\n  | \"@layer\"\n  | \"@media\"\n  | \"@namespace\"\n  | \"@page\"\n  | \"@property\"\n  | \"@scroll-timeline\"\n  | \"@supports\"\n  | \"@viewport\";\n\nexport type AdvancedPseudos =\n  | \":-moz-any()\"\n  | \":-moz-dir\"\n  | \":-webkit-any()\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::part\"\n  | \"::slotted\"\n  | \"::view-transition-group\"\n  | \"::view-transition-image-pair\"\n  | \"::view-transition-new\"\n  | \"::view-transition-old\"\n  | \":dir\"\n  | \":has\"\n  | \":host\"\n  | \":host-context\"\n  | \":is\"\n  | \":lang\"\n  | \":matches()\"\n  | \":not\"\n  | \":nth-child\"\n  | \":nth-last-child\"\n  | \":nth-last-of-type\"\n  | \":nth-of-type\"\n  | \":where\";\n\nexport type SimplePseudos =\n  | \":-khtml-any-link\"\n  | \":-moz-any-link\"\n  | \":-moz-focusring\"\n  | \":-moz-full-screen\"\n  | \":-moz-placeholder\"\n  | \":-moz-read-only\"\n  | \":-moz-read-write\"\n  | \":-moz-ui-invalid\"\n  | \":-moz-ui-valid\"\n  | \":-ms-fullscreen\"\n  | \":-ms-input-placeholder\"\n  | \":-webkit-any-link\"\n  | \":-webkit-full-screen\"\n  | \"::-moz-placeholder\"\n  | \"::-moz-progress-bar\"\n  | \"::-moz-range-progress\"\n  | \"::-moz-range-thumb\"\n  | \"::-moz-range-track\"\n  | \"::-moz-selection\"\n  | \"::-ms-backdrop\"\n  | \"::-ms-browse\"\n  | \"::-ms-check\"\n  | \"::-ms-clear\"\n  | \"::-ms-expand\"\n  | \"::-ms-fill\"\n  | \"::-ms-fill-lower\"\n  | \"::-ms-fill-upper\"\n  | \"::-ms-input-placeholder\"\n  | \"::-ms-reveal\"\n  | \"::-ms-thumb\"\n  | \"::-ms-ticks-after\"\n  | \"::-ms-ticks-before\"\n  | \"::-ms-tooltip\"\n  | \"::-ms-track\"\n  | \"::-ms-value\"\n  | \"::-webkit-backdrop\"\n  | \"::-webkit-input-placeholder\"\n  | \"::-webkit-progress-bar\"\n  | \"::-webkit-progress-inner-value\"\n  | \"::-webkit-progress-value\"\n  | \"::-webkit-slider-runnable-track\"\n  | \"::-webkit-slider-thumb\"\n  | \"::after\"\n  | \"::backdrop\"\n  | \"::before\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::first-letter\"\n  | \"::first-line\"\n  | \"::grammar-error\"\n  | \"::marker\"\n  | \"::placeholder\"\n  | \"::selection\"\n  | \"::spelling-error\"\n  | \"::target-text\"\n  | \"::view-transition\"\n  | \":active\"\n  | \":after\"\n  | \":any-link\"\n  | \":before\"\n  | \":blank\"\n  | \":checked\"\n  | \":current\"\n  | \":default\"\n  | \":defined\"\n  | \":disabled\"\n  | \":empty\"\n  | \":enabled\"\n  | \":first\"\n  | \":first-child\"\n  | \":first-letter\"\n  | \":first-line\"\n  | \":first-of-type\"\n  | \":focus\"\n  | \":focus-visible\"\n  | \":focus-within\"\n  | \":fullscreen\"\n  | \":future\"\n  | \":hover\"\n  | \":in-range\"\n  | \":indeterminate\"\n  | \":invalid\"\n  | \":last-child\"\n  | \":last-of-type\"\n  | \":left\"\n  | \":link\"\n  | \":local-link\"\n  | \":nth-col\"\n  | \":nth-last-col\"\n  | \":only-child\"\n  | \":only-of-type\"\n  | \":optional\"\n  | \":out-of-range\"\n  | \":past\"\n  | \":paused\"\n  | \":picture-in-picture\"\n  | \":placeholder-shown\"\n  | \":playing\"\n  | \":read-only\"\n  | \":read-write\"\n  | \":required\"\n  | \":right\"\n  | \":root\"\n  | \":scope\"\n  | \":target\"\n  | \":target-within\"\n  | \":user-invalid\"\n  | \":user-valid\"\n  | \":valid\"\n  | \":visited\";\n\nexport type Pseudos = AdvancedPseudos | SimplePseudos;\n\nexport type HtmlAttributes =\n  | \"[abbr]\"\n  | \"[accept-charset]\"\n  | \"[accept]\"\n  | \"[accesskey]\"\n  | \"[action]\"\n  | \"[align]\"\n  | \"[alink]\"\n  | \"[allow]\"\n  | \"[allowfullscreen]\"\n  | \"[allowpaymentrequest]\"\n  | \"[alt]\"\n  | \"[archive]\"\n  | \"[async]\"\n  | \"[autobuffer]\"\n  | \"[autocapitalize]\"\n  | \"[autocomplete]\"\n  | \"[autofocus]\"\n  | \"[autoplay]\"\n  | \"[axis]\"\n  | \"[background]\"\n  | \"[behavior]\"\n  | \"[bgcolor]\"\n  | \"[border]\"\n  | \"[bottommargin]\"\n  | \"[capture]\"\n  | \"[cellpadding]\"\n  | \"[cellspacing]\"\n  | \"[char]\"\n  | \"[charoff]\"\n  | \"[charset]\"\n  | \"[checked]\"\n  | \"[cite]\"\n  | \"[class]\"\n  | \"[classid]\"\n  | \"[clear]\"\n  | \"[code]\"\n  | \"[codebase]\"\n  | \"[codetype]\"\n  | \"[color]\"\n  | \"[cols]\"\n  | \"[colspan]\"\n  | \"[compact]\"\n  | \"[content]\"\n  | \"[contenteditable]\"\n  | \"[contextmenu]\"\n  | \"[controls]\"\n  | \"[coords]\"\n  | \"[credentialless]\"\n  | \"[crossorigin]\"\n  | \"[data]\"\n  | \"[datafld]\"\n  | \"[datasrc]\"\n  | \"[datetime]\"\n  | \"[declare]\"\n  | \"[decoding]\"\n  | \"[default]\"\n  | \"[defer]\"\n  | \"[dir]\"\n  | \"[direction]\"\n  | \"[dirname]\"\n  | \"[disabled]\"\n  | \"[download]\"\n  | \"[draggable]\"\n  | \"[enctype]\"\n  | \"[enterkeyhint]\"\n  | \"[exportparts]\"\n  | \"[face]\"\n  | \"[fetchpriority]\"\n  | \"[for]\"\n  | \"[form]\"\n  | \"[formaction]\"\n  | \"[formenctype]\"\n  | \"[formmethod]\"\n  | \"[formnovalidate]\"\n  | \"[formtarget]\"\n  | \"[frame]\"\n  | \"[frameborder]\"\n  | \"[headers]\"\n  | \"[height]\"\n  | \"[hidden]\"\n  | \"[high]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[hspace]\"\n  | \"[http-equiv]\"\n  | \"[id]\"\n  | \"[imagesizes]\"\n  | \"[imagesrcset]\"\n  | \"[inert]\"\n  | \"[inputmode]\"\n  | \"[integrity]\"\n  | \"[is]\"\n  | \"[ismap]\"\n  | \"[itemid]\"\n  | \"[itemprop]\"\n  | \"[itemref]\"\n  | \"[itemscope]\"\n  | \"[itemtype]\"\n  | \"[kind]\"\n  | \"[label]\"\n  | \"[lang]\"\n  | \"[language]\"\n  | \"[leftmargin]\"\n  | \"[link]\"\n  | \"[list]\"\n  | \"[loading]\"\n  | \"[longdesc]\"\n  | \"[loop]\"\n  | \"[low]\"\n  | \"[manifest]\"\n  | \"[marginheight]\"\n  | \"[marginwidth]\"\n  | \"[max]\"\n  | \"[maxlength]\"\n  | \"[mayscript]\"\n  | \"[media]\"\n  | \"[method]\"\n  | \"[methods]\"\n  | \"[min]\"\n  | \"[minlength]\"\n  | \"[moz-opaque]\"\n  | \"[mozallowfullscreen]\"\n  | \"[msallowfullscreen]\"\n  | \"[multiple]\"\n  | \"[muted]\"\n  | \"[name]\"\n  | \"[nohref]\"\n  | \"[nomodule]\"\n  | \"[nonce]\"\n  | \"[noresize]\"\n  | \"[noshade]\"\n  | \"[novalidate]\"\n  | \"[nowrap]\"\n  | \"[object]\"\n  | \"[onerror]\"\n  | \"[open]\"\n  | \"[optimum]\"\n  | \"[part]\"\n  | \"[pattern]\"\n  | \"[ping]\"\n  | \"[placeholder]\"\n  | \"[poster]\"\n  | \"[prefetch]\"\n  | \"[preload]\"\n  | \"[profile]\"\n  | \"[readonly]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[required]\"\n  | \"[rev]\"\n  | \"[reversed]\"\n  | \"[rightmargin]\"\n  | \"[rows]\"\n  | \"[rowspan]\"\n  | \"[rules]\"\n  | \"[sandbox-allow-downloads]\"\n  | \"[sandbox-allow-modals]\"\n  | \"[sandbox-allow-popups-to-escape-sandbox]\"\n  | \"[sandbox-allow-popups]\"\n  | \"[sandbox-allow-presentation]\"\n  | \"[sandbox-allow-same-origin]\"\n  | \"[sandbox-allow-storage-access-by-user-activation]\"\n  | \"[sandbox-allow-top-navigation-by-user-activation]\"\n  | \"[sandbox]\"\n  | \"[scope]\"\n  | \"[scrollamount]\"\n  | \"[scrolldelay]\"\n  | \"[scrolling]\"\n  | \"[selected]\"\n  | \"[shadowroot]\"\n  | \"[shadowrootmode]\"\n  | \"[shape]\"\n  | \"[size]\"\n  | \"[sizes]\"\n  | \"[slot]\"\n  | \"[span]\"\n  | \"[spellcheck]\"\n  | \"[src]\"\n  | \"[srcdoc]\"\n  | \"[srclang]\"\n  | \"[srcset]\"\n  | \"[standby]\"\n  | \"[start]\"\n  | \"[step]\"\n  | \"[style]\"\n  | \"[summary]\"\n  | \"[tabindex]\"\n  | \"[target]\"\n  | \"[text]\"\n  | \"[title]\"\n  | \"[topmargin]\"\n  | \"[translate]\"\n  | \"[truespeed]\"\n  | \"[type]\"\n  | \"[usemap]\"\n  | \"[valign]\"\n  | \"[value]\"\n  | \"[valuetype]\"\n  | \"[version]\"\n  | \"[virtualkeyboardpolicy]\"\n  | \"[vlink]\"\n  | \"[vspace]\"\n  | \"[webkitallowfullscreen]\"\n  | \"[width]\"\n  | \"[wrap]\"\n  | \"[x-moz-errormessage]\"\n  | \"[xmlns]\";\n\nexport type SvgAttributes =\n  | \"[accent-height]\"\n  | \"[alignment-baseline]\"\n  | \"[allowReorder]\"\n  | \"[alphabetic]\"\n  | \"[animation]\"\n  | \"[arabic-form]\"\n  | \"[ascent]\"\n  | \"[attributeName]\"\n  | \"[attributeType]\"\n  | \"[azimuth]\"\n  | \"[baseFrequency]\"\n  | \"[baseProfile]\"\n  | \"[baseline-shift]\"\n  | \"[bbox]\"\n  | \"[bias]\"\n  | \"[by]\"\n  | \"[calcMode]\"\n  | \"[cap-height]\"\n  | \"[class]\"\n  | \"[clip-path]\"\n  | \"[clip-rule]\"\n  | \"[clipPathUnits]\"\n  | \"[clip]\"\n  | \"[color-interpolation-filters]\"\n  | \"[color-interpolation]\"\n  | \"[color-profile]\"\n  | \"[color]\"\n  | \"[contentScriptType]\"\n  | \"[contentStyleType]\"\n  | \"[cursor]\"\n  | \"[cx]\"\n  | \"[cy]\"\n  | \"[d]\"\n  | \"[descent]\"\n  | \"[diffuseConstant]\"\n  | \"[direction]\"\n  | \"[display]\"\n  | \"[divisor]\"\n  | \"[document]\"\n  | \"[dominant-baseline]\"\n  | \"[download]\"\n  | \"[dur]\"\n  | \"[dx]\"\n  | \"[dy]\"\n  | \"[edgeMode]\"\n  | \"[elevation]\"\n  | \"[enable-background]\"\n  | \"[fill-opacity]\"\n  | \"[fill-rule]\"\n  | \"[fill]\"\n  | \"[filterRes]\"\n  | \"[filterUnits]\"\n  | \"[filter]\"\n  | \"[flood-color]\"\n  | \"[flood-opacity]\"\n  | \"[font-family]\"\n  | \"[font-size-adjust]\"\n  | \"[font-size]\"\n  | \"[font-stretch]\"\n  | \"[font-style]\"\n  | \"[font-variant]\"\n  | \"[font-weight]\"\n  | \"[format]\"\n  | \"[fr]\"\n  | \"[from]\"\n  | \"[fx]\"\n  | \"[fy]\"\n  | \"[g1]\"\n  | \"[g2]\"\n  | \"[global]\"\n  | \"[glyph-name]\"\n  | \"[glyph-orientation-horizontal]\"\n  | \"[glyph-orientation-vertical]\"\n  | \"[glyphRef]\"\n  | \"[gradientTransform]\"\n  | \"[gradientUnits]\"\n  | \"[graphical]\"\n  | \"[hanging]\"\n  | \"[height]\"\n  | \"[horiz-adv-x]\"\n  | \"[horiz-origin-x]\"\n  | \"[horiz-origin-y]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[id]\"\n  | \"[ideographic]\"\n  | \"[image-rendering]\"\n  | \"[in2]\"\n  | \"[in]\"\n  | \"[k1]\"\n  | \"[k2]\"\n  | \"[k3]\"\n  | \"[k4]\"\n  | \"[k]\"\n  | \"[kernelMatrix]\"\n  | \"[kernelUnitLength]\"\n  | \"[kerning]\"\n  | \"[keyPoints]\"\n  | \"[lang]\"\n  | \"[lengthAdjust]\"\n  | \"[letter-spacing]\"\n  | \"[lighting-color]\"\n  | \"[limitingConeAngle]\"\n  | \"[marker-end]\"\n  | \"[marker-mid]\"\n  | \"[marker-start]\"\n  | \"[markerHeight]\"\n  | \"[markerUnits]\"\n  | \"[markerWidth]\"\n  | \"[maskContentUnits]\"\n  | \"[maskUnits]\"\n  | \"[mask]\"\n  | \"[mathematical]\"\n  | \"[media]\"\n  | \"[mode]\"\n  | \"[name]\"\n  | \"[numOctaves]\"\n  | \"[offset]\"\n  | \"[opacity]\"\n  | \"[operator]\"\n  | \"[order]\"\n  | \"[orient]\"\n  | \"[orientation]\"\n  | \"[origin]\"\n  | \"[overflow]\"\n  | \"[overline-position]\"\n  | \"[overline-thickness]\"\n  | \"[paint-order]\"\n  | \"[panose-1]\"\n  | \"[path]\"\n  | \"[patternContentUnits]\"\n  | \"[patternTransform]\"\n  | \"[patternUnits]\"\n  | \"[ping]\"\n  | \"[pointer-events]\"\n  | \"[pointsAtX]\"\n  | \"[pointsAtY]\"\n  | \"[pointsAtZ]\"\n  | \"[points]\"\n  | \"[preserveAlpha]\"\n  | \"[preserveAspectRatio]\"\n  | \"[primitiveUnits]\"\n  | \"[r]\"\n  | \"[radius]\"\n  | \"[refX]\"\n  | \"[refY]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[repeatCount]\"\n  | \"[requiredExtensions]\"\n  | \"[requiredFeatures]\"\n  | \"[rotate]\"\n  | \"[rx]\"\n  | \"[ry]\"\n  | \"[scale]\"\n  | \"[seed]\"\n  | \"[shape-rendering]\"\n  | \"[side]\"\n  | \"[slope]\"\n  | \"[solid-color]\"\n  | \"[solid-opacity]\"\n  | \"[spacing]\"\n  | \"[specularConstant]\"\n  | \"[specularExponent]\"\n  | \"[spreadMethod]\"\n  | \"[startOffset]\"\n  | \"[stdDeviation]\"\n  | \"[stemh]\"\n  | \"[stemv]\"\n  | \"[stitchTiles]\"\n  | \"[stop-color]\"\n  | \"[stop-opacity]\"\n  | \"[strikethrough-position]\"\n  | \"[strikethrough-thickness]\"\n  | \"[string]\"\n  | \"[stroke-dasharray]\"\n  | \"[stroke-dashoffset]\"\n  | \"[stroke-linecap]\"\n  | \"[stroke-linejoin]\"\n  | \"[stroke-miterlimit]\"\n  | \"[stroke-opacity]\"\n  | \"[stroke-width]\"\n  | \"[stroke]\"\n  | \"[style]\"\n  | \"[surfaceScale]\"\n  | \"[systemLanguage]\"\n  | \"[tabindex]\"\n  | \"[targetX]\"\n  | \"[targetY]\"\n  | \"[target]\"\n  | \"[text-anchor]\"\n  | \"[text-decoration]\"\n  | \"[text-overflow]\"\n  | \"[text-rendering]\"\n  | \"[textLength]\"\n  | \"[title]\"\n  | \"[to]\"\n  | \"[transform-origin]\"\n  | \"[transform]\"\n  | \"[type]\"\n  | \"[u1]\"\n  | \"[u2]\"\n  | \"[underline-position]\"\n  | \"[underline-thickness]\"\n  | \"[unicode-bidi]\"\n  | \"[unicode-range]\"\n  | \"[unicode]\"\n  | \"[units-per-em]\"\n  | \"[v-alphabetic]\"\n  | \"[v-hanging]\"\n  | \"[v-ideographic]\"\n  | \"[v-mathematical]\"\n  | \"[values]\"\n  | \"[vector-effect]\"\n  | \"[version]\"\n  | \"[vert-adv-y]\"\n  | \"[vert-origin-x]\"\n  | \"[vert-origin-y]\"\n  | \"[viewBox]\"\n  | \"[viewTarget]\"\n  | \"[visibility]\"\n  | \"[white-space]\"\n  | \"[width]\"\n  | \"[widths]\"\n  | \"[word-spacing]\"\n  | \"[writing-mode]\"\n  | \"[x-height]\"\n  | \"[x1]\"\n  | \"[x2]\"\n  | \"[xChannelSelector]\"\n  | \"[x]\"\n  | \"[y1]\"\n  | \"[y2]\"\n  | \"[yChannelSelector]\"\n  | \"[y]\"\n  | \"[z]\"\n  | \"[zoomAndPan]\";\n\nexport type Globals = \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\";\n\nexport namespace Property {\n  export type AccentColor = Globals | DataType.Color | \"auto\";\n\n  export type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type AlignItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type All = Globals;\n\n  export type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});\n\n  export type AnimationComposition = Globals | DataType.SingleAnimationComposition | (string & {});\n\n  export type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});\n\n  export type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});\n\n  export type AnimationIterationCount = Globals | \"infinite\" | (string & {}) | (number & {});\n\n  export type AnimationName = Globals | \"none\" | (string & {});\n\n  export type AnimationPlayState = Globals | \"paused\" | \"running\" | (string & {});\n\n  export type AnimationTimeline = Globals | DataType.SingleAnimationTimeline | (string & {});\n\n  export type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Appearance = Globals | DataType.CompatAuto | \"auto\" | \"menulist-button\" | \"none\" | \"textfield\";\n\n  export type AspectRatio = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Azimuth =\n    | Globals\n    | \"behind\"\n    | \"center\"\n    | \"center-left\"\n    | \"center-right\"\n    | \"far-left\"\n    | \"far-right\"\n    | \"left\"\n    | \"left-side\"\n    | \"leftwards\"\n    | \"right\"\n    | \"right-side\"\n    | \"rightwards\"\n    | (string & {});\n\n  export type BackdropFilter = Globals | \"none\" | (string & {});\n\n  export type BackfaceVisibility = Globals | \"hidden\" | \"visible\";\n\n  export type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});\n\n  export type BackgroundAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});\n\n  export type BackgroundClip = Globals | DataType.Box | (string & {});\n\n  export type BackgroundColor = Globals | DataType.Color;\n\n  export type BackgroundImage = Globals | \"none\" | (string & {});\n\n  export type BackgroundOrigin = Globals | DataType.Box | (string & {});\n\n  export type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});\n\n  export type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | \"x-end\" | \"x-start\" | (string & {});\n\n  export type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | \"y-end\" | \"y-start\" | (string & {});\n\n  export type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type BlockOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type BlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockColor = Globals | DataType.Color | (string & {});\n\n  export type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockEndColor = Globals | DataType.Color;\n\n  export type BorderBlockEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockStartColor = Globals | DataType.Color;\n\n  export type BorderBlockStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBottomColor = Globals | DataType.Color;\n\n  export type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomStyle = Globals | DataType.LineStyle;\n\n  export type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderCollapse = Globals | \"collapse\" | \"separate\";\n\n  export type BorderColor = Globals | DataType.Color | (string & {});\n\n  export type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderImage = Globals | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type BorderImageRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type BorderImageSlice = Globals | (string & {}) | (number & {});\n\n  export type BorderImageSource = Globals | \"none\" | (string & {});\n\n  export type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineColor = Globals | DataType.Color | (string & {});\n\n  export type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineEndColor = Globals | DataType.Color;\n\n  export type BorderInlineEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineStartColor = Globals | DataType.Color;\n\n  export type BorderInlineStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderLeftColor = Globals | DataType.Color;\n\n  export type BorderLeftStyle = Globals | DataType.LineStyle;\n\n  export type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderRightColor = Globals | DataType.Color;\n\n  export type BorderRightStyle = Globals | DataType.LineStyle;\n\n  export type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderTopColor = Globals | DataType.Color;\n\n  export type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopStyle = Globals | DataType.LineStyle;\n\n  export type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type Bottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type BoxAlign = Globals | \"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\";\n\n  export type BoxDecorationBreak = Globals | \"clone\" | \"slice\";\n\n  export type BoxDirection = Globals | \"inherit\" | \"normal\" | \"reverse\";\n\n  export type BoxFlex = Globals | (number & {}) | (string & {});\n\n  export type BoxFlexGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxLines = Globals | \"multiple\" | \"single\";\n\n  export type BoxOrdinalGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxOrient = Globals | \"block-axis\" | \"horizontal\" | \"inherit\" | \"inline-axis\" | \"vertical\";\n\n  export type BoxPack = Globals | \"center\" | \"end\" | \"justify\" | \"start\";\n\n  export type BoxShadow = Globals | \"none\" | (string & {});\n\n  export type BoxSizing = Globals | \"border-box\" | \"content-box\";\n\n  export type BreakAfter =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakBefore =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakInside = Globals | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\";\n\n  export type CaptionSide = Globals | \"block-end\" | \"block-start\" | \"bottom\" | \"inline-end\" | \"inline-start\" | \"top\";\n\n  export type Caret = Globals | DataType.Color | \"auto\" | \"bar\" | \"block\" | \"underscore\" | (string & {});\n\n  export type CaretColor = Globals | DataType.Color | \"auto\";\n\n  export type CaretShape = Globals | \"auto\" | \"bar\" | \"block\" | \"underscore\";\n\n  export type Clear = Globals | \"both\" | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Clip = Globals | \"auto\" | (string & {});\n\n  export type ClipPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n\n  export type Color = Globals | DataType.Color;\n\n  export type PrintColorAdjust = Globals | \"economy\" | \"exact\";\n\n  export type ColorScheme = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type ColumnCount = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type ColumnFill = Globals | \"auto\" | \"balance\" | \"balance-all\";\n\n  export type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type ColumnRuleColor = Globals | DataType.Color;\n\n  export type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type ColumnSpan = Globals | \"all\" | \"none\";\n\n  export type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type Columns<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type Contain = Globals | \"content\" | \"inline-size\" | \"layout\" | \"none\" | \"paint\" | \"size\" | \"strict\" | \"style\" | (string & {});\n\n  export type ContainIntrinsicBlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicHeight<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicInlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicWidth<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type Container = Globals | \"none\" | (string & {});\n\n  export type ContainerName = Globals | \"none\" | (string & {});\n\n  export type ContainerType = Globals | \"inline-size\" | \"normal\" | \"size\";\n\n  export type Content = Globals | DataType.ContentList | \"none\" | \"normal\" | (string & {});\n\n  export type ContentVisibility = Globals | \"auto\" | \"hidden\" | \"visible\";\n\n  export type CounterIncrement = Globals | \"none\" | (string & {});\n\n  export type CounterReset = Globals | \"none\" | (string & {});\n\n  export type CounterSet = Globals | \"none\" | (string & {});\n\n  export type Cursor =\n    | Globals\n    | \"-moz-grab\"\n    | \"-webkit-grab\"\n    | \"alias\"\n    | \"all-scroll\"\n    | \"auto\"\n    | \"cell\"\n    | \"col-resize\"\n    | \"context-menu\"\n    | \"copy\"\n    | \"crosshair\"\n    | \"default\"\n    | \"e-resize\"\n    | \"ew-resize\"\n    | \"grab\"\n    | \"grabbing\"\n    | \"help\"\n    | \"move\"\n    | \"n-resize\"\n    | \"ne-resize\"\n    | \"nesw-resize\"\n    | \"no-drop\"\n    | \"none\"\n    | \"not-allowed\"\n    | \"ns-resize\"\n    | \"nw-resize\"\n    | \"nwse-resize\"\n    | \"pointer\"\n    | \"progress\"\n    | \"row-resize\"\n    | \"s-resize\"\n    | \"se-resize\"\n    | \"sw-resize\"\n    | \"text\"\n    | \"vertical-text\"\n    | \"w-resize\"\n    | \"wait\"\n    | \"zoom-in\"\n    | \"zoom-out\"\n    | (string & {});\n\n  export type Direction = Globals | \"ltr\" | \"rtl\";\n\n  export type Display =\n    | Globals\n    | DataType.DisplayOutside\n    | DataType.DisplayInside\n    | DataType.DisplayInternal\n    | DataType.DisplayLegacy\n    | \"contents\"\n    | \"list-item\"\n    | \"none\"\n    | (string & {});\n\n  export type EmptyCells = Globals | \"hide\" | \"show\";\n\n  export type Filter = Globals | \"none\" | (string & {});\n\n  export type Flex<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"content\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {}) | (number & {});\n\n  export type FlexBasis<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-auto\"\n    | \"auto\"\n    | \"content\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type FlexDirection = Globals | \"column\" | \"column-reverse\" | \"row\" | \"row-reverse\";\n\n  export type FlexFlow = Globals | \"column\" | \"column-reverse\" | \"nowrap\" | \"row\" | \"row-reverse\" | \"wrap\" | \"wrap-reverse\" | (string & {});\n\n  export type FlexGrow = Globals | (number & {}) | (string & {});\n\n  export type FlexShrink = Globals | (number & {}) | (string & {});\n\n  export type FlexWrap = Globals | \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n\n  export type Float = Globals | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Font = Globals | \"caption\" | \"icon\" | \"menu\" | \"message-box\" | \"small-caption\" | \"status-bar\" | (string & {});\n\n  export type FontFamily = Globals | DataType.GenericFamily | (string & {});\n\n  export type FontFeatureSettings = Globals | \"normal\" | (string & {});\n\n  export type FontKerning = Globals | \"auto\" | \"none\" | \"normal\";\n\n  export type FontLanguageOverride = Globals | \"normal\" | (string & {});\n\n  export type FontOpticalSizing = Globals | \"auto\" | \"none\";\n\n  export type FontPalette = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"larger\" | \"smaller\" | (string & {});\n\n  export type FontSizeAdjust = Globals | \"from-font\" | \"none\" | (string & {}) | (number & {});\n\n  export type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"always\" | \"auto\" | \"never\";\n\n  export type FontStretch = Globals | DataType.FontStretchAbsolute;\n\n  export type FontStyle = Globals | \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  export type FontSynthesis = Globals | \"none\" | \"small-caps\" | \"style\" | \"weight\" | (string & {});\n\n  export type FontVariant =\n    | Globals\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  export type FontVariantAlternates = Globals | \"historical-forms\" | \"normal\" | (string & {});\n\n  export type FontVariantCaps = Globals | \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\n\n  export type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | \"full-width\" | \"normal\" | \"proportional-width\" | \"ruby\" | (string & {});\n\n  export type FontVariantEmoji = Globals | \"emoji\" | \"normal\" | \"text\" | \"unicode\";\n\n  export type FontVariantLigatures =\n    | Globals\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"discretionary-ligatures\"\n    | \"historical-ligatures\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | (string & {});\n\n  export type FontVariantNumeric =\n    | Globals\n    | \"diagonal-fractions\"\n    | \"lining-nums\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"proportional-nums\"\n    | \"slashed-zero\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | (string & {});\n\n  export type FontVariantPosition = Globals | \"normal\" | \"sub\" | \"super\";\n\n  export type FontVariationSettings = Globals | \"normal\" | (string & {});\n\n  export type FontWeight = Globals | DataType.FontWeightAbsolute | \"bolder\" | \"lighter\";\n\n  export type ForcedColorAdjust = Globals | \"auto\" | \"none\";\n\n  export type Gap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type Grid = Globals | \"none\" | (string & {});\n\n  export type GridArea = Globals | DataType.GridLine | (string & {});\n\n  export type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridAutoFlow = Globals | \"column\" | \"dense\" | \"row\" | (string & {});\n\n  export type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridColumn = Globals | DataType.GridLine | (string & {});\n\n  export type GridColumnEnd = Globals | DataType.GridLine;\n\n  export type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridColumnStart = Globals | DataType.GridLine;\n\n  export type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRow = Globals | DataType.GridLine | (string & {});\n\n  export type GridRowEnd = Globals | DataType.GridLine;\n\n  export type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRowStart = Globals | DataType.GridLine;\n\n  export type GridTemplate = Globals | \"none\" | (string & {});\n\n  export type GridTemplateAreas = Globals | \"none\" | (string & {});\n\n  export type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type HangingPunctuation = Globals | \"allow-end\" | \"first\" | \"force-end\" | \"last\" | \"none\" | (string & {});\n\n  export type Height<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type HyphenateCharacter = Globals | \"auto\" | (string & {});\n\n  export type HyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Hyphens = Globals | \"auto\" | \"manual\" | \"none\";\n\n  export type ImageOrientation = Globals | \"flip\" | \"from-image\" | (string & {});\n\n  export type ImageRendering = Globals | \"-moz-crisp-edges\" | \"-webkit-optimize-contrast\" | \"auto\" | \"crisp-edges\" | \"pixelated\";\n\n  export type ImageResolution = Globals | \"from-image\" | (string & {});\n\n  export type ImeMode = Globals | \"active\" | \"auto\" | \"disabled\" | \"inactive\" | \"normal\";\n\n  export type InitialLetter = Globals | \"normal\" | (string & {}) | (number & {});\n\n  export type InlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type InputSecurity = Globals | \"auto\" | \"none\";\n\n  export type Inset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Isolation = Globals | \"auto\" | \"isolate\";\n\n  export type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type JustifyItems = Globals | DataType.SelfPosition | \"baseline\" | \"left\" | \"legacy\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifySelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"left\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type Left<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type LineBreak = Globals | \"anywhere\" | \"auto\" | \"loose\" | \"normal\" | \"strict\";\n\n  export type LineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {}) | (number & {});\n\n  export type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ListStyle = Globals | \"inside\" | \"none\" | \"outside\" | (string & {});\n\n  export type ListStyleImage = Globals | \"none\" | (string & {});\n\n  export type ListStylePosition = Globals | \"inside\" | \"outside\";\n\n  export type ListStyleType = Globals | \"none\" | (string & {});\n\n  export type Margin<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTrim = Globals | \"all\" | \"in-flow\" | \"none\";\n\n  export type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});\n\n  export type MaskBorder = Globals | \"alpha\" | \"luminance\" | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type MaskBorderMode = Globals | \"alpha\" | \"luminance\";\n\n  export type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type MaskBorderRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type MaskBorderSlice = Globals | (string & {}) | (number & {});\n\n  export type MaskBorderSource = Globals | \"none\" | (string & {});\n\n  export type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type MaskClip = Globals | DataType.GeometryBox | \"no-clip\" | (string & {});\n\n  export type MaskComposite = Globals | DataType.CompositingOperator | (string & {});\n\n  export type MaskImage = Globals | \"none\" | (string & {});\n\n  export type MaskMode = Globals | DataType.MaskingMode | (string & {});\n\n  export type MaskOrigin = Globals | DataType.GeometryBox | (string & {});\n\n  export type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type MaskType = Globals | \"alpha\" | \"luminance\";\n\n  export type MathDepth = Globals | \"auto-add\" | (string & {}) | (number & {});\n\n  export type MathShift = Globals | \"compact\" | \"normal\";\n\n  export type MathStyle = Globals | \"compact\" | \"normal\";\n\n  export type MaxBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxLines = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type MaxWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MinBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type MixBlendMode = Globals | DataType.BlendMode | \"plus-lighter\";\n\n  export type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | DataType.GeometryBox | \"auto\" | \"none\" | (string & {});\n\n  export type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type OffsetPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n\n  export type OffsetRotate = Globals | \"auto\" | \"reverse\" | (string & {});\n\n  export type ObjectFit = Globals | \"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\";\n\n  export type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\";\n\n  export type OffsetPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\";\n\n  export type Opacity = Globals | (string & {}) | (number & {});\n\n  export type Order = Globals | (number & {}) | (string & {});\n\n  export type Orphans = Globals | (number & {}) | (string & {});\n\n  export type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | \"auto\" | \"invert\" | (string & {});\n\n  export type OutlineColor = Globals | DataType.Color | \"invert\";\n\n  export type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type OutlineStyle = Globals | DataType.LineStyle | \"auto\" | (string & {});\n\n  export type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type Overflow = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\" | (string & {});\n\n  export type OverflowAnchor = Globals | \"auto\" | \"none\";\n\n  export type OverflowBlock = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowClipBox = Globals | \"content-box\" | \"padding-box\";\n\n  export type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});\n\n  export type OverflowInline = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowWrap = Globals | \"anywhere\" | \"break-word\" | \"normal\";\n\n  export type OverflowX = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowY = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverscrollBehavior = Globals | \"auto\" | \"contain\" | \"none\" | (string & {});\n\n  export type OverscrollBehaviorBlock = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorInline = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorX = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorY = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type Page = Globals | \"auto\" | (string & {});\n\n  export type PageBreakAfter = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakBefore = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakInside = Globals | \"auto\" | \"avoid\";\n\n  export type PaintOrder = Globals | \"fill\" | \"markers\" | \"normal\" | \"stroke\" | (string & {});\n\n  export type Perspective<TLength = (string & {}) | 0> = Globals | TLength | \"none\";\n\n  export type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type PlaceItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PlaceSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PointerEvents = Globals | \"all\" | \"auto\" | \"fill\" | \"inherit\" | \"none\" | \"painted\" | \"stroke\" | \"visible\" | \"visibleFill\" | \"visiblePainted\" | \"visibleStroke\";\n\n  export type Position = Globals | \"-webkit-sticky\" | \"absolute\" | \"fixed\" | \"relative\" | \"static\" | \"sticky\";\n\n  export type Quotes = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type Resize = Globals | \"block\" | \"both\" | \"horizontal\" | \"inline\" | \"none\" | \"vertical\";\n\n  export type Right<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Rotate = Globals | \"none\" | (string & {});\n\n  export type RowGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type RubyAlign = Globals | \"center\" | \"space-around\" | \"space-between\" | \"start\";\n\n  export type RubyMerge = Globals | \"auto\" | \"collapse\" | \"separate\";\n\n  export type RubyPosition = Globals | \"alternate\" | \"inter-character\" | \"over\" | \"under\" | (string & {});\n\n  export type Scale = Globals | \"none\" | (string & {}) | (number & {});\n\n  export type ScrollBehavior = Globals | \"auto\" | \"smooth\";\n\n  export type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollSnapAlign = Globals | \"center\" | \"end\" | \"none\" | \"start\" | (string & {});\n\n  export type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"none\" | (string & {});\n\n  export type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type ScrollSnapPointsX = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapPointsY = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapStop = Globals | \"always\" | \"normal\";\n\n  export type ScrollSnapType = Globals | \"block\" | \"both\" | \"inline\" | \"none\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollSnapTypeX = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollSnapTypeY = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollTimeline = Globals | \"none\" | (string & {});\n\n  export type ScrollTimelineAxis = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\" | (string & {});\n\n  export type ScrollTimelineName = Globals | \"none\" | (string & {});\n\n  export type ScrollbarColor = Globals | \"auto\" | (string & {});\n\n  export type ScrollbarGutter = Globals | \"auto\" | \"stable\" | (string & {});\n\n  export type ScrollbarWidth = Globals | \"auto\" | \"none\" | \"thin\";\n\n  export type ShapeImageThreshold = Globals | (string & {}) | (number & {});\n\n  export type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ShapeOutside = Globals | DataType.Box | \"margin-box\" | \"none\" | (string & {});\n\n  export type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});\n\n  export type TableLayout = Globals | \"auto\" | \"fixed\";\n\n  export type TextAlign = Globals | \"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\";\n\n  export type TextAlignLast = Globals | \"auto\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"right\" | \"start\";\n\n  export type TextCombineUpright = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TextDecoration<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Color\n    | TLength\n    | \"auto\"\n    | \"blink\"\n    | \"dashed\"\n    | \"dotted\"\n    | \"double\"\n    | \"from-font\"\n    | \"grammar-error\"\n    | \"line-through\"\n    | \"none\"\n    | \"overline\"\n    | \"solid\"\n    | \"spelling-error\"\n    | \"underline\"\n    | \"wavy\"\n    | (string & {});\n\n  export type TextDecorationColor = Globals | DataType.Color;\n\n  export type TextDecorationLine = Globals | \"blink\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"spelling-error\" | \"underline\" | (string & {});\n\n  export type TextDecorationSkip = Globals | \"box-decoration\" | \"edges\" | \"leading-spaces\" | \"none\" | \"objects\" | \"spaces\" | \"trailing-spaces\" | (string & {});\n\n  export type TextDecorationSkipInk = Globals | \"all\" | \"auto\" | \"none\";\n\n  export type TextDecorationStyle = Globals | \"dashed\" | \"dotted\" | \"double\" | \"solid\" | \"wavy\";\n\n  export type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"from-font\" | (string & {});\n\n  export type TextEmphasis = Globals | DataType.Color | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextEmphasisColor = Globals | DataType.Color;\n\n  export type TextEmphasisPosition = Globals | (string & {});\n\n  export type TextEmphasisStyle = Globals | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextJustify = Globals | \"auto\" | \"inter-character\" | \"inter-word\" | \"none\";\n\n  export type TextOrientation = Globals | \"mixed\" | \"sideways\" | \"upright\";\n\n  export type TextOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type TextRendering = Globals | \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\n\n  export type TextShadow = Globals | \"none\" | (string & {});\n\n  export type TextSizeAdjust = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type TextTransform = Globals | \"capitalize\" | \"full-size-kana\" | \"full-width\" | \"lowercase\" | \"none\" | \"uppercase\";\n\n  export type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TextUnderlinePosition = Globals | \"auto\" | \"from-font\" | \"left\" | \"right\" | \"under\" | (string & {});\n\n  export type Top<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TouchAction =\n    | Globals\n    | \"-ms-manipulation\"\n    | \"-ms-none\"\n    | \"-ms-pinch-zoom\"\n    | \"auto\"\n    | \"manipulation\"\n    | \"none\"\n    | \"pan-down\"\n    | \"pan-left\"\n    | \"pan-right\"\n    | \"pan-up\"\n    | \"pan-x\"\n    | \"pan-y\"\n    | \"pinch-zoom\"\n    | (string & {});\n\n  export type Transform = Globals | \"none\" | (string & {});\n\n  export type TransformBox = Globals | \"border-box\" | \"content-box\" | \"fill-box\" | \"stroke-box\" | \"view-box\";\n\n  export type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  export type TransformStyle = Globals | \"flat\" | \"preserve-3d\";\n\n  export type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});\n\n  export type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionProperty = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Translate<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type UnicodeBidi =\n    | Globals\n    | \"-moz-isolate\"\n    | \"-moz-isolate-override\"\n    | \"-moz-plaintext\"\n    | \"-webkit-isolate\"\n    | \"-webkit-isolate-override\"\n    | \"-webkit-plaintext\"\n    | \"bidi-override\"\n    | \"embed\"\n    | \"isolate\"\n    | \"isolate-override\"\n    | \"normal\"\n    | \"plaintext\";\n\n  export type UserSelect = Globals | \"-moz-none\" | \"all\" | \"auto\" | \"contain\" | \"element\" | \"none\" | \"text\";\n\n  export type VerticalAlign<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"baseline\"\n    | \"bottom\"\n    | \"middle\"\n    | \"sub\"\n    | \"super\"\n    | \"text-bottom\"\n    | \"text-top\"\n    | \"top\"\n    | (string & {});\n\n  export type ViewTransitionName = Globals | \"none\" | (string & {});\n\n  export type Visibility = Globals | \"collapse\" | \"hidden\" | \"visible\";\n\n  export type WhiteSpace = Globals | \"-moz-pre-wrap\" | \"break-spaces\" | \"normal\" | \"nowrap\" | \"pre\" | \"pre-line\" | \"pre-wrap\";\n\n  export type Widows = Globals | (number & {}) | (string & {});\n\n  export type Width<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type WillChange = Globals | DataType.AnimateableFeature | \"auto\" | (string & {});\n\n  export type WordBreak = Globals | \"break-all\" | \"break-word\" | \"keep-all\" | \"normal\";\n\n  export type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type WordWrap = Globals | \"break-word\" | \"normal\";\n\n  export type WritingMode = Globals | \"horizontal-tb\" | \"sideways-lr\" | \"sideways-rl\" | \"vertical-lr\" | \"vertical-rl\";\n\n  export type ZIndex = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type Zoom = Globals | \"normal\" | \"reset\" | (string & {}) | (number & {});\n\n  export type MozAppearance =\n    | Globals\n    | \"-moz-mac-unified-toolbar\"\n    | \"-moz-win-borderless-glass\"\n    | \"-moz-win-browsertabbar-toolbox\"\n    | \"-moz-win-communications-toolbox\"\n    | \"-moz-win-communicationstext\"\n    | \"-moz-win-exclude-glass\"\n    | \"-moz-win-glass\"\n    | \"-moz-win-media-toolbox\"\n    | \"-moz-win-mediatext\"\n    | \"-moz-window-button-box\"\n    | \"-moz-window-button-box-maximized\"\n    | \"-moz-window-button-close\"\n    | \"-moz-window-button-maximize\"\n    | \"-moz-window-button-minimize\"\n    | \"-moz-window-button-restore\"\n    | \"-moz-window-frame-bottom\"\n    | \"-moz-window-frame-left\"\n    | \"-moz-window-frame-right\"\n    | \"-moz-window-titlebar\"\n    | \"-moz-window-titlebar-maximized\"\n    | \"button\"\n    | \"button-arrow-down\"\n    | \"button-arrow-next\"\n    | \"button-arrow-previous\"\n    | \"button-arrow-up\"\n    | \"button-bevel\"\n    | \"button-focus\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"checkbox-container\"\n    | \"checkbox-label\"\n    | \"checkmenuitem\"\n    | \"dualbutton\"\n    | \"groupbox\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"menuarrow\"\n    | \"menubar\"\n    | \"menucheckbox\"\n    | \"menuimage\"\n    | \"menuitem\"\n    | \"menuitemtext\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"menupopup\"\n    | \"menuradio\"\n    | \"menuseparator\"\n    | \"meterbar\"\n    | \"meterchunk\"\n    | \"none\"\n    | \"progressbar\"\n    | \"progressbar-vertical\"\n    | \"progresschunk\"\n    | \"progresschunk-vertical\"\n    | \"radio\"\n    | \"radio-container\"\n    | \"radio-label\"\n    | \"radiomenuitem\"\n    | \"range\"\n    | \"range-thumb\"\n    | \"resizer\"\n    | \"resizerpanel\"\n    | \"scale-horizontal\"\n    | \"scale-vertical\"\n    | \"scalethumb-horizontal\"\n    | \"scalethumb-vertical\"\n    | \"scalethumbend\"\n    | \"scalethumbstart\"\n    | \"scalethumbtick\"\n    | \"scrollbarbutton-down\"\n    | \"scrollbarbutton-left\"\n    | \"scrollbarbutton-right\"\n    | \"scrollbarbutton-up\"\n    | \"scrollbarthumb-horizontal\"\n    | \"scrollbarthumb-vertical\"\n    | \"scrollbartrack-horizontal\"\n    | \"scrollbartrack-vertical\"\n    | \"searchfield\"\n    | \"separator\"\n    | \"sheet\"\n    | \"spinner\"\n    | \"spinner-downbutton\"\n    | \"spinner-textfield\"\n    | \"spinner-upbutton\"\n    | \"splitter\"\n    | \"statusbar\"\n    | \"statusbarpanel\"\n    | \"tab\"\n    | \"tab-scroll-arrow-back\"\n    | \"tab-scroll-arrow-forward\"\n    | \"tabpanel\"\n    | \"tabpanels\"\n    | \"textfield\"\n    | \"textfield-multiline\"\n    | \"toolbar\"\n    | \"toolbarbutton\"\n    | \"toolbarbutton-dropdown\"\n    | \"toolbargripper\"\n    | \"toolbox\"\n    | \"tooltip\"\n    | \"treeheader\"\n    | \"treeheadercell\"\n    | \"treeheadersortarrow\"\n    | \"treeitem\"\n    | \"treeline\"\n    | \"treetwisty\"\n    | \"treetwistyopen\"\n    | \"treeview\";\n\n  export type MozBinding = Globals | \"none\" | (string & {});\n\n  export type MozBorderBottomColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderLeftColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderRightColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderTopColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozContextProperties = Globals | \"fill\" | \"fill-opacity\" | \"none\" | \"stroke\" | \"stroke-opacity\" | (string & {});\n\n  export type MozFloatEdge = Globals | \"border-box\" | \"content-box\" | \"margin-box\" | \"padding-box\";\n\n  export type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;\n\n  export type MozImageRegion = Globals | \"auto\" | (string & {});\n\n  export type MozOrient = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\";\n\n  export type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozStackSizing = Globals | \"ignore\" | \"stretch-to-fit\";\n\n  export type MozTextBlink = Globals | \"blink\" | \"none\";\n\n  export type MozUserFocus = Globals | \"ignore\" | \"none\" | \"normal\" | \"select-after\" | \"select-all\" | \"select-before\" | \"select-menu\" | \"select-same\";\n\n  export type MozUserInput = Globals | \"auto\" | \"disabled\" | \"enabled\" | \"none\";\n\n  export type MozUserModify = Globals | \"read-only\" | \"read-write\" | \"write-only\";\n\n  export type MozWindowDragging = Globals | \"drag\" | \"no-drag\";\n\n  export type MozWindowShadow = Globals | \"default\" | \"menu\" | \"none\" | \"sheet\" | \"tooltip\";\n\n  export type MsAccelerator = Globals | \"false\" | \"true\";\n\n  export type MsBlockProgression = Globals | \"bt\" | \"lr\" | \"rl\" | \"tb\";\n\n  export type MsContentZoomChaining = Globals | \"chained\" | \"none\";\n\n  export type MsContentZoomLimit = Globals | (string & {});\n\n  export type MsContentZoomLimitMax = Globals | (string & {});\n\n  export type MsContentZoomLimitMin = Globals | (string & {});\n\n  export type MsContentZoomSnap = Globals | \"mandatory\" | \"none\" | \"proximity\" | (string & {});\n\n  export type MsContentZoomSnapPoints = Globals | (string & {});\n\n  export type MsContentZoomSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsContentZooming = Globals | \"none\" | \"zoom\";\n\n  export type MsFilter = Globals | (string & {});\n\n  export type MsFlowFrom = Globals | \"none\" | (string & {});\n\n  export type MsFlowInto = Globals | \"none\" | (string & {});\n\n  export type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsHighContrastAdjust = Globals | \"auto\" | \"none\";\n\n  export type MsHyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type MsHyphenateLimitLines = Globals | \"no-limit\" | (number & {}) | (string & {});\n\n  export type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MsImeAlign = Globals | \"after\" | \"auto\";\n\n  export type MsOverflowStyle = Globals | \"-ms-autohiding-scrollbar\" | \"auto\" | \"none\" | \"scrollbar\";\n\n  export type MsScrollChaining = Globals | \"chained\" | \"none\";\n\n  export type MsScrollLimit = Globals | (string & {});\n\n  export type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollRails = Globals | \"none\" | \"railed\";\n\n  export type MsScrollSnapPointsX = Globals | (string & {});\n\n  export type MsScrollSnapPointsY = Globals | (string & {});\n\n  export type MsScrollSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsScrollSnapX = Globals | (string & {});\n\n  export type MsScrollSnapY = Globals | (string & {});\n\n  export type MsScrollTranslation = Globals | \"none\" | \"vertical-to-horizontal\";\n\n  export type MsScrollbar3dlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarArrowColor = Globals | DataType.Color;\n\n  export type MsScrollbarBaseColor = Globals | DataType.Color;\n\n  export type MsScrollbarDarkshadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarFaceColor = Globals | DataType.Color;\n\n  export type MsScrollbarHighlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarShadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarTrackColor = Globals | DataType.Color;\n\n  export type MsTextAutospace = Globals | \"ideograph-alpha\" | \"ideograph-numeric\" | \"ideograph-parenthesis\" | \"ideograph-space\" | \"none\";\n\n  export type MsTouchSelect = Globals | \"grippers\" | \"none\";\n\n  export type MsUserSelect = Globals | \"element\" | \"none\" | \"text\";\n\n  export type MsWrapFlow = Globals | \"auto\" | \"both\" | \"clear\" | \"end\" | \"maximum\" | \"start\";\n\n  export type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsWrapThrough = Globals | \"none\" | \"wrap\";\n\n  export type WebkitAppearance =\n    | Globals\n    | \"-apple-pay-button\"\n    | \"button\"\n    | \"button-bevel\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"default-button\"\n    | \"inner-spin-button\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"media-controls-background\"\n    | \"media-controls-fullscreen-background\"\n    | \"media-current-time-display\"\n    | \"media-enter-fullscreen-button\"\n    | \"media-exit-fullscreen-button\"\n    | \"media-fullscreen-button\"\n    | \"media-mute-button\"\n    | \"media-overlay-play-button\"\n    | \"media-play-button\"\n    | \"media-seek-back-button\"\n    | \"media-seek-forward-button\"\n    | \"media-slider\"\n    | \"media-sliderthumb\"\n    | \"media-time-remaining-display\"\n    | \"media-toggle-closed-captions-button\"\n    | \"media-volume-slider\"\n    | \"media-volume-slider-container\"\n    | \"media-volume-sliderthumb\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"meter\"\n    | \"none\"\n    | \"progress-bar\"\n    | \"progress-bar-value\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"searchfield-cancel-button\"\n    | \"searchfield-decoration\"\n    | \"searchfield-results-button\"\n    | \"searchfield-results-decoration\"\n    | \"slider-horizontal\"\n    | \"slider-vertical\"\n    | \"sliderthumb-horizontal\"\n    | \"sliderthumb-vertical\"\n    | \"square-button\"\n    | \"textarea\"\n    | \"textfield\";\n\n  export type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type WebkitBorderBeforeColor = Globals | DataType.Color;\n\n  export type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | \"above\" | \"below\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitLineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type WebkitMask<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Position<TLength>\n    | DataType.RepeatStyle\n    | DataType.Box\n    | \"border\"\n    | \"content\"\n    | \"none\"\n    | \"padding\"\n    | \"text\"\n    | (string & {});\n\n  export type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type WebkitMaskClip = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | \"text\" | (string & {});\n\n  export type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});\n\n  export type WebkitMaskImage = Globals | \"none\" | (string & {});\n\n  export type WebkitMaskOrigin = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | (string & {});\n\n  export type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | (string & {});\n\n  export type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type WebkitMaskRepeatX = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskRepeatY = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type WebkitOverflowScrolling = Globals | \"auto\" | \"touch\";\n\n  export type WebkitTapHighlightColor = Globals | DataType.Color;\n\n  export type WebkitTextFillColor = Globals | DataType.Color;\n\n  export type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});\n\n  export type WebkitTextStrokeColor = Globals | DataType.Color;\n\n  export type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type WebkitTouchCallout = Globals | \"default\" | \"none\";\n\n  export type WebkitUserModify = Globals | \"read-only\" | \"read-write\" | \"read-write-plaintext-only\";\n\n  export type AlignmentBaseline =\n    | Globals\n    | \"after-edge\"\n    | \"alphabetic\"\n    | \"auto\"\n    | \"baseline\"\n    | \"before-edge\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"text-after-edge\"\n    | \"text-before-edge\";\n\n  export type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | \"baseline\" | \"sub\" | \"super\" | (string & {});\n\n  export type ClipRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type ColorInterpolation = Globals | \"auto\" | \"linearRGB\" | \"sRGB\";\n\n  export type ColorRendering = Globals | \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\";\n\n  export type DominantBaseline =\n    | Globals\n    | \"alphabetic\"\n    | \"auto\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"no-change\"\n    | \"reset-size\"\n    | \"text-after-edge\"\n    | \"text-before-edge\"\n    | \"use-script\";\n\n  export type Fill = Globals | DataType.Paint;\n\n  export type FillOpacity = Globals | (number & {}) | (string & {});\n\n  export type FillRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type FloodColor = Globals | DataType.Color | \"currentColor\";\n\n  export type FloodOpacity = Globals | (number & {}) | (string & {});\n\n  export type GlyphOrientationVertical = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type LightingColor = Globals | DataType.Color | \"currentColor\";\n\n  export type Marker = Globals | \"none\" | (string & {});\n\n  export type MarkerEnd = Globals | \"none\" | (string & {});\n\n  export type MarkerMid = Globals | \"none\" | (string & {});\n\n  export type MarkerStart = Globals | \"none\" | (string & {});\n\n  export type ShapeRendering = Globals | \"auto\" | \"crispEdges\" | \"geometricPrecision\" | \"optimizeSpeed\";\n\n  export type StopColor = Globals | DataType.Color | \"currentColor\";\n\n  export type StopOpacity = Globals | (number & {}) | (string & {});\n\n  export type Stroke = Globals | DataType.Paint;\n\n  export type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | \"none\";\n\n  export type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type StrokeLinecap = Globals | \"butt\" | \"round\" | \"square\";\n\n  export type StrokeLinejoin = Globals | \"bevel\" | \"miter\" | \"round\";\n\n  export type StrokeMiterlimit = Globals | (number & {}) | (string & {});\n\n  export type StrokeOpacity = Globals | (number & {}) | (string & {});\n\n  export type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextAnchor = Globals | \"end\" | \"middle\" | \"start\";\n\n  export type VectorEffect = Globals | \"non-scaling-stroke\" | \"none\";\n}\n\nexport namespace AtRule {\n  export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {\n    additiveSymbols?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    speakAs?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"additive-symbols\"?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    \"speak-as\"?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;\n\n  export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;\n\n  export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {\n    MozFontFeatureSettings?: FontFeatureSettings | undefined;\n    ascentOverride?: AscentOverride | undefined;\n    descentOverride?: DescentOverride | undefined;\n    fontDisplay?: FontDisplay | undefined;\n    fontFamily?: string | undefined;\n    fontFeatureSettings?: FontFeatureSettings | undefined;\n    fontStretch?: FontStretch | undefined;\n    fontStyle?: FontStyle | undefined;\n    fontVariant?: FontVariant | undefined;\n    fontVariationSettings?: FontVariationSettings | undefined;\n    fontWeight?: FontWeight | undefined;\n    lineGapOverride?: LineGapOverride | undefined;\n    sizeAdjust?: string | undefined;\n    src?: string | undefined;\n    unicodeRange?: string | undefined;\n  }\n\n  export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"-moz-font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"ascent-override\"?: AscentOverride | undefined;\n    \"descent-override\"?: DescentOverride | undefined;\n    \"font-display\"?: FontDisplay | undefined;\n    \"font-family\"?: string | undefined;\n    \"font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"font-stretch\"?: FontStretch | undefined;\n    \"font-style\"?: FontStyle | undefined;\n    \"font-variant\"?: FontVariant | undefined;\n    \"font-variation-settings\"?: FontVariationSettings | undefined;\n    \"font-weight\"?: FontWeight | undefined;\n    \"line-gap-override\"?: LineGapOverride | undefined;\n    \"size-adjust\"?: string | undefined;\n    src?: string | undefined;\n    \"unicode-range\"?: string | undefined;\n  }\n\n  export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;\n\n  export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;\n\n  export interface FontPaletteValues<TLength = (string & {}) | 0, TTime = string & {}> {\n    basePalette?: BasePalette | undefined;\n    fontFamily?: string | undefined;\n    overrideColors?: string | undefined;\n  }\n\n  export interface FontPaletteValuesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"base-palette\"?: BasePalette | undefined;\n    \"font-family\"?: string | undefined;\n    \"override-colors\"?: string | undefined;\n  }\n\n  export type FontPaletteValuesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValues<TLength, TTime>>;\n\n  export type FontPaletteValuesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValuesHyphen<TLength, TTime>>;\n\n  export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    pageOrientation?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    \"page-orientation\"?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;\n\n  export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;\n\n  export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    initialValue?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    \"initial-value\"?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;\n\n  export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;\n\n  export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    maxHeight?: MaxHeight<TLength> | undefined;\n    maxWidth?: MaxWidth<TLength> | undefined;\n    maxZoom?: MaxZoom | undefined;\n    minHeight?: MinHeight<TLength> | undefined;\n    minWidth?: MinWidth<TLength> | undefined;\n    minZoom?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    userZoom?: UserZoom | undefined;\n    viewportFit?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    \"max-height\"?: MaxHeight<TLength> | undefined;\n    \"max-width\"?: MaxWidth<TLength> | undefined;\n    \"max-zoom\"?: MaxZoom | undefined;\n    \"min-height\"?: MinHeight<TLength> | undefined;\n    \"min-width\"?: MinWidth<TLength> | undefined;\n    \"min-zoom\"?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    \"user-zoom\"?: UserZoom | undefined;\n    \"viewport-fit\"?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;\n\n  export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;\n\n  type Range = \"auto\" | (string & {});\n\n  type SpeakAs = \"auto\" | \"bullets\" | \"numbers\" | \"spell-out\" | \"words\" | (string & {});\n\n  type System = \"additive\" | \"alphabetic\" | \"cyclic\" | \"fixed\" | \"numeric\" | \"symbolic\" | (string & {});\n\n  type FontFeatureSettings = \"normal\" | (string & {});\n\n  type AscentOverride = \"normal\" | (string & {});\n\n  type DescentOverride = \"normal\" | (string & {});\n\n  type FontDisplay = \"auto\" | \"block\" | \"fallback\" | \"optional\" | \"swap\";\n\n  type FontStretch = DataType.FontStretchAbsolute | (string & {});\n\n  type FontStyle = \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  type FontVariant =\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  type FontVariationSettings = \"normal\" | (string & {});\n\n  type FontWeight = DataType.FontWeightAbsolute | (string & {});\n\n  type LineGapOverride = \"normal\" | (string & {});\n\n  type BasePalette = \"dark\" | \"light\" | (number & {}) | (string & {});\n\n  type Bleed<TLength> = TLength | \"auto\";\n\n  type Marks = \"crop\" | \"cross\" | \"none\" | (string & {});\n\n  type PageOrientation = \"rotate-left\" | \"rotate-right\" | \"upright\";\n\n  type Size<TLength> = DataType.PageSize | TLength | \"auto\" | \"landscape\" | \"portrait\" | (string & {});\n\n  type Inherits = \"false\" | \"true\";\n\n  type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type MaxHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxZoom = \"auto\" | (string & {}) | (number & {});\n\n  type MinHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinZoom = \"auto\" | (string & {}) | (number & {});\n\n  type Orientation = \"auto\" | \"landscape\" | \"portrait\";\n\n  type UserZoom = \"fixed\" | \"zoom\";\n\n  type ViewportFit = \"auto\" | \"contain\" | \"cover\";\n\n  type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type Zoom = \"auto\" | (string & {}) | (number & {});\n}\n\n/**\n * **Attention!** Data types receives its name from the spec. E.g. `<color>` becomes `DataType.Color` and\n * `<content-distribution>` becomes `DataType.ContentDistribution`. It happens quite frequent that these data types\n * are split into several data types or/and name changes as the spec develops. So there's a risk that a minor/patch\n * update from `csstype` can break your typing if you're using the `DataType` namespace.\n */\nexport namespace DataType {\n  type AbsoluteSize = \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\";\n\n  type AnimateableFeature = \"contents\" | \"scroll-position\" | (string & {});\n\n  type Attachment = \"fixed\" | \"local\" | \"scroll\";\n\n  type BgPosition<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type BgSize<TLength> = TLength | \"auto\" | \"contain\" | \"cover\" | (string & {});\n\n  type BlendMode =\n    | \"color\"\n    | \"color-burn\"\n    | \"color-dodge\"\n    | \"darken\"\n    | \"difference\"\n    | \"exclusion\"\n    | \"hard-light\"\n    | \"hue\"\n    | \"lighten\"\n    | \"luminosity\"\n    | \"multiply\"\n    | \"normal\"\n    | \"overlay\"\n    | \"saturation\"\n    | \"screen\"\n    | \"soft-light\";\n\n  type Box = \"border-box\" | \"content-box\" | \"padding-box\";\n\n  type Color = NamedColor | DeprecatedSystemColor | \"currentcolor\" | (string & {});\n\n  type CompatAuto =\n    | \"button\"\n    | \"checkbox\"\n    | \"listbox\"\n    | \"menulist\"\n    | \"meter\"\n    | \"progress-bar\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"slider-horizontal\"\n    | \"square-button\"\n    | \"textarea\";\n\n  type CompositeStyle =\n    | \"clear\"\n    | \"copy\"\n    | \"destination-atop\"\n    | \"destination-in\"\n    | \"destination-out\"\n    | \"destination-over\"\n    | \"source-atop\"\n    | \"source-in\"\n    | \"source-out\"\n    | \"source-over\"\n    | \"xor\";\n\n  type CompositingOperator = \"add\" | \"exclude\" | \"intersect\" | \"subtract\";\n\n  type ContentDistribution = \"space-around\" | \"space-between\" | \"space-evenly\" | \"stretch\";\n\n  type ContentList = Quote | \"contents\" | (string & {});\n\n  type ContentPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\";\n\n  type CubicBezierTimingFunction = \"ease\" | \"ease-in\" | \"ease-in-out\" | \"ease-out\" | (string & {});\n\n  type Dasharray<TLength> = TLength | (string & {}) | (number & {});\n\n  type DeprecatedSystemColor =\n    | \"ActiveBorder\"\n    | \"ActiveCaption\"\n    | \"AppWorkspace\"\n    | \"Background\"\n    | \"ButtonFace\"\n    | \"ButtonHighlight\"\n    | \"ButtonShadow\"\n    | \"ButtonText\"\n    | \"CaptionText\"\n    | \"GrayText\"\n    | \"Highlight\"\n    | \"HighlightText\"\n    | \"InactiveBorder\"\n    | \"InactiveCaption\"\n    | \"InactiveCaptionText\"\n    | \"InfoBackground\"\n    | \"InfoText\"\n    | \"Menu\"\n    | \"MenuText\"\n    | \"Scrollbar\"\n    | \"ThreeDDarkShadow\"\n    | \"ThreeDFace\"\n    | \"ThreeDHighlight\"\n    | \"ThreeDLightShadow\"\n    | \"ThreeDShadow\"\n    | \"Window\"\n    | \"WindowFrame\"\n    | \"WindowText\";\n\n  type DisplayInside = \"-ms-flexbox\" | \"-ms-grid\" | \"-webkit-flex\" | \"flex\" | \"flow\" | \"flow-root\" | \"grid\" | \"ruby\" | \"table\";\n\n  type DisplayInternal =\n    | \"ruby-base\"\n    | \"ruby-base-container\"\n    | \"ruby-text\"\n    | \"ruby-text-container\"\n    | \"table-caption\"\n    | \"table-cell\"\n    | \"table-column\"\n    | \"table-column-group\"\n    | \"table-footer-group\"\n    | \"table-header-group\"\n    | \"table-row\"\n    | \"table-row-group\";\n\n  type DisplayLegacy = \"-ms-inline-flexbox\" | \"-ms-inline-grid\" | \"-webkit-inline-flex\" | \"inline-block\" | \"inline-flex\" | \"inline-grid\" | \"inline-list-item\" | \"inline-table\";\n\n  type DisplayOutside = \"block\" | \"inline\" | \"run-in\";\n\n  type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | \"linear\";\n\n  type EastAsianVariantValues = \"jis04\" | \"jis78\" | \"jis83\" | \"jis90\" | \"simplified\" | \"traditional\";\n\n  type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | \"none\" | (string & {});\n\n  type FontStretchAbsolute =\n    | \"condensed\"\n    | \"expanded\"\n    | \"extra-condensed\"\n    | \"extra-expanded\"\n    | \"normal\"\n    | \"semi-condensed\"\n    | \"semi-expanded\"\n    | \"ultra-condensed\"\n    | \"ultra-expanded\"\n    | (string & {});\n\n  type FontWeightAbsolute = \"bold\" | \"normal\" | (number & {}) | (string & {});\n\n  type GenericFamily = \"cursive\" | \"fantasy\" | \"monospace\" | \"sans-serif\" | \"serif\";\n\n  type GeometryBox = Box | \"fill-box\" | \"margin-box\" | \"stroke-box\" | \"view-box\";\n\n  type GridLine = \"auto\" | (string & {}) | (number & {});\n\n  type LineStyle = \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"hidden\" | \"inset\" | \"none\" | \"outset\" | \"ridge\" | \"solid\";\n\n  type LineWidth<TLength> = TLength | \"medium\" | \"thick\" | \"thin\";\n\n  type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | \"no-clip\" | \"none\" | (string & {});\n\n  type MaskingMode = \"alpha\" | \"luminance\" | \"match-source\";\n\n  type NamedColor =\n    | \"aliceblue\"\n    | \"antiquewhite\"\n    | \"aqua\"\n    | \"aquamarine\"\n    | \"azure\"\n    | \"beige\"\n    | \"bisque\"\n    | \"black\"\n    | \"blanchedalmond\"\n    | \"blue\"\n    | \"blueviolet\"\n    | \"brown\"\n    | \"burlywood\"\n    | \"cadetblue\"\n    | \"chartreuse\"\n    | \"chocolate\"\n    | \"coral\"\n    | \"cornflowerblue\"\n    | \"cornsilk\"\n    | \"crimson\"\n    | \"cyan\"\n    | \"darkblue\"\n    | \"darkcyan\"\n    | \"darkgoldenrod\"\n    | \"darkgray\"\n    | \"darkgreen\"\n    | \"darkgrey\"\n    | \"darkkhaki\"\n    | \"darkmagenta\"\n    | \"darkolivegreen\"\n    | \"darkorange\"\n    | \"darkorchid\"\n    | \"darkred\"\n    | \"darksalmon\"\n    | \"darkseagreen\"\n    | \"darkslateblue\"\n    | \"darkslategray\"\n    | \"darkslategrey\"\n    | \"darkturquoise\"\n    | \"darkviolet\"\n    | \"deeppink\"\n    | \"deepskyblue\"\n    | \"dimgray\"\n    | \"dimgrey\"\n    | \"dodgerblue\"\n    | \"firebrick\"\n    | \"floralwhite\"\n    | \"forestgreen\"\n    | \"fuchsia\"\n    | \"gainsboro\"\n    | \"ghostwhite\"\n    | \"gold\"\n    | \"goldenrod\"\n    | \"gray\"\n    | \"green\"\n    | \"greenyellow\"\n    | \"grey\"\n    | \"honeydew\"\n    | \"hotpink\"\n    | \"indianred\"\n    | \"indigo\"\n    | \"ivory\"\n    | \"khaki\"\n    | \"lavender\"\n    | \"lavenderblush\"\n    | \"lawngreen\"\n    | \"lemonchiffon\"\n    | \"lightblue\"\n    | \"lightcoral\"\n    | \"lightcyan\"\n    | \"lightgoldenrodyellow\"\n    | \"lightgray\"\n    | \"lightgreen\"\n    | \"lightgrey\"\n    | \"lightpink\"\n    | \"lightsalmon\"\n    | \"lightseagreen\"\n    | \"lightskyblue\"\n    | \"lightslategray\"\n    | \"lightslategrey\"\n    | \"lightsteelblue\"\n    | \"lightyellow\"\n    | \"lime\"\n    | \"limegreen\"\n    | \"linen\"\n    | \"magenta\"\n    | \"maroon\"\n    | \"mediumaquamarine\"\n    | \"mediumblue\"\n    | \"mediumorchid\"\n    | \"mediumpurple\"\n    | \"mediumseagreen\"\n    | \"mediumslateblue\"\n    | \"mediumspringgreen\"\n    | \"mediumturquoise\"\n    | \"mediumvioletred\"\n    | \"midnightblue\"\n    | \"mintcream\"\n    | \"mistyrose\"\n    | \"moccasin\"\n    | \"navajowhite\"\n    | \"navy\"\n    | \"oldlace\"\n    | \"olive\"\n    | \"olivedrab\"\n    | \"orange\"\n    | \"orangered\"\n    | \"orchid\"\n    | \"palegoldenrod\"\n    | \"palegreen\"\n    | \"paleturquoise\"\n    | \"palevioletred\"\n    | \"papayawhip\"\n    | \"peachpuff\"\n    | \"peru\"\n    | \"pink\"\n    | \"plum\"\n    | \"powderblue\"\n    | \"purple\"\n    | \"rebeccapurple\"\n    | \"red\"\n    | \"rosybrown\"\n    | \"royalblue\"\n    | \"saddlebrown\"\n    | \"salmon\"\n    | \"sandybrown\"\n    | \"seagreen\"\n    | \"seashell\"\n    | \"sienna\"\n    | \"silver\"\n    | \"skyblue\"\n    | \"slateblue\"\n    | \"slategray\"\n    | \"slategrey\"\n    | \"snow\"\n    | \"springgreen\"\n    | \"steelblue\"\n    | \"tan\"\n    | \"teal\"\n    | \"thistle\"\n    | \"tomato\"\n    | \"transparent\"\n    | \"turquoise\"\n    | \"violet\"\n    | \"wheat\"\n    | \"white\"\n    | \"whitesmoke\"\n    | \"yellow\"\n    | \"yellowgreen\";\n\n  type PageSize = \"A3\" | \"A4\" | \"A5\" | \"B4\" | \"B5\" | \"JIS-B4\" | \"JIS-B5\" | \"ledger\" | \"legal\" | \"letter\";\n\n  type Paint = Color | \"child\" | \"context-fill\" | \"context-stroke\" | \"none\" | (string & {});\n\n  type Position<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type Quote = \"close-quote\" | \"no-close-quote\" | \"no-open-quote\" | \"open-quote\";\n\n  type RepeatStyle = \"no-repeat\" | \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"round\" | \"space\" | (string & {});\n\n  type SelfPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"self-end\" | \"self-start\" | \"start\";\n\n  type SingleAnimation<TTime> =\n    | EasingFunction\n    | SingleAnimationDirection\n    | SingleAnimationFillMode\n    | TTime\n    | \"infinite\"\n    | \"none\"\n    | \"paused\"\n    | \"running\"\n    | (string & {})\n    | (number & {});\n\n  type SingleAnimationComposition = \"accumulate\" | \"add\" | \"replace\";\n\n  type SingleAnimationDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\n\n  type SingleAnimationFillMode = \"backwards\" | \"both\" | \"forwards\" | \"none\";\n\n  type SingleAnimationTimeline = \"auto\" | \"none\" | (string & {});\n\n  type SingleTransition<TTime> = EasingFunction | TTime | \"all\" | \"none\" | (string & {});\n\n  type StepTimingFunction = \"step-end\" | \"step-start\" | (string & {});\n\n  type TrackBreadth<TLength> = TLength | \"auto\" | \"max-content\" | \"min-content\" | (string & {});\n\n  type ViewportLength<TLength> = TLength | \"auto\" | (string & {});\n\n  type VisualBox = \"border-box\" | \"content-box\" | \"padding-box\";\n}\n","path":"file:///node_modules/csstype/index.d.ts"}],[{"code":"/// <reference path=\"./dist/styled-jsx/types/global.d.ts\" />\n/// <reference path=\"./amp.d.ts\" />\n/// <reference path=\"./app.d.ts\" />\n/// <reference path=\"./config.d.ts\" />\n/// <reference path=\"./document.d.ts\" />\n/// <reference path=\"./dynamic.d.ts\" />\n/// <reference path=\"./error.d.ts\" />\n/// <reference path=\"./head.d.ts\" />\n/// <reference path=\"./image.d.ts\" />\n/// <reference path=\"./link.d.ts\" />\n/// <reference path=\"./router.d.ts\" />\n/// <reference path=\"./script.d.ts\" />\n/// <reference path=\"./server.d.ts\" />\n/// <reference types=\"node\" />\n/// <reference types=\"react\" />\n/// <reference types=\"react-dom\" />\n/// <reference types=\"./types/global\" />\nimport React$1, { ComponentType } from 'react';\nimport { ParsedUrlQuery } from 'querystring';\nimport * as http from 'http';\nimport { IncomingMessage, ServerResponse, IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';\nimport { UrlWithParsedQuery, UrlObject } from 'url';\nimport { Readable, Writable } from 'stream';\nimport { Env } from '@next/env';\nimport { OutgoingHttpHeaders as OutgoingHttpHeaders$1 } from 'node:http';\n\ndeclare type BuildManifest = {\n    devFiles: readonly string[];\n    ampDevFiles: readonly string[];\n    polyfillFiles: readonly string[];\n    lowPriorityFiles: readonly string[];\n    rootMainFiles: readonly string[];\n    pages: {\n        '/_app': readonly string[];\n        [page: string]: readonly string[];\n    };\n    ampFirstPages: readonly string[];\n};\n\ndeclare namespace webpack {\n  export type Compiler = any\n  export type Plugin = any\n  export type Configuration = any\n  export type StatsError = any\n  export type Stats = any\n  export type MultiCompiler = any\n  export type EntryObject = any\n  export type ProgressPlugin = any\n  export type Compilation = any\n  export type javascript = any\n  export type Module = any\n  export type ModuleGraph = any\n  export type WebpackPluginInstance = any\n}\n\ndeclare type RouteHas$1 = {\n    type: 'header' | 'query' | 'cookie';\n    key: string;\n    value?: string;\n} | {\n    type: 'host';\n    key?: undefined;\n    value: string;\n};\n\ndeclare type NextApiRequestCookies$1 = Partial<{\n    [key: string]: string;\n}>;\n\ninterface DomainLocale$1 {\n    defaultLocale: string;\n    domain: string;\n    http?: true;\n    locales?: string[];\n}\n\ninterface MiddlewareMatcher$1 {\n    regexp: string;\n    locale?: false;\n    has?: RouteHas$1[];\n    missing?: RouteHas$1[];\n    originalSource: string;\n}\n\ndeclare global {\n    interface Window {\n        __BUILD_MANIFEST?: Record<string, string[]>;\n        __BUILD_MANIFEST_CB?: Function;\n        __MIDDLEWARE_MATCHERS?: MiddlewareMatcher$1[];\n        __MIDDLEWARE_MANIFEST_CB?: Function;\n    }\n}\n\ndeclare global {\n    interface Window {\n        __DEV_MIDDLEWARE_MATCHERS?: MiddlewareMatcher$1[];\n        __DEV_PAGES_MANIFEST?: {\n            pages: string[];\n        };\n        __SSG_MANIFEST_CB?: () => void;\n        __SSG_MANIFEST?: Set<string>;\n    }\n}\n\ndeclare global {\n    interface Window {\n        __NEXT_DATA__: NEXT_DATA$1;\n    }\n}\n\ndeclare const COMPILER_NAMES$1: {\n    readonly client: \"client\";\n    readonly server: \"server\";\n    readonly edgeServer: \"edge-server\";\n};\n\ndeclare type NEXT_DATA$1 = {\n    props: Record<string, any>;\n    page: string;\n    query: ParsedUrlQuery;\n    buildId: string;\n    assetPrefix?: string;\n    runtimeConfig?: {\n        [key: string]: any;\n    };\n    nextExport?: boolean;\n    autoExport?: boolean;\n    isFallback?: boolean;\n    dynamicIds?: (string | number)[];\n    err?: Error & {\n        statusCode?: number;\n        source?: typeof COMPILER_NAMES$1.server | typeof COMPILER_NAMES$1.edgeServer;\n    };\n    gsp?: boolean;\n    gssp?: boolean;\n    customServer?: boolean;\n    gip?: boolean;\n    appGip?: boolean;\n    locale?: string;\n    locales?: string[];\n    defaultLocale?: string;\n    domainLocales?: DomainLocale$1[];\n    scriptLoader?: any[];\n    isPreview?: boolean;\n    notFoundSrcPage?: string;\n};\n\ntype ServerRuntime$1 = 'nodejs' | 'experimental-edge' | 'edge' | undefined\n\n\n// Extend the React types with missing properties\ndeclare module 'react' {\n  // <html amp=\"\"> support\n  interface HtmlHTMLAttributes<T> extends React$1.HTMLAttributes<T> {\n    amp?: string\n  }\n\n  // <link nonce=\"\"> support\n  interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n    nonce?: string\n  }\n\n  function use<T>(promise: Promise<T> | React$1.Context<T>): T\n  function cache<T extends Function>(fn: T): T\n}\n\ntype Redirect$2 =\n  | {\n      statusCode: 301 | 302 | 303 | 307 | 308\n      destination: string\n      basePath?: false\n    }\n  | {\n      permanent: boolean\n      destination: string\n      basePath?: false\n    }\n\ntype FileSizeSuffix$1 = `${\n  | 'k'\n  | 'K'\n  | 'm'\n  | 'M'\n  | 'g'\n  | 'G'\n  | 't'\n  | 'T'\n  | 'p'\n  | 'P'}${'b' | 'B'}`\n\ntype SizeLimit$1 = number | `${number}${FileSizeSuffix$1}`\n\ntype ResponseLimit$1 = SizeLimit$1 | boolean\n\n/**\n * `Config` type, use it for export const config\n */\ntype PageConfig$1 = {\n  amp?: boolean | 'hybrid'\n  api?: {\n    /**\n     * Configures or disables body size limit warning. Can take a number or\n     * any string format supported by `bytes`, for example `1000`, `'500kb'` or\n     * `'3mb'`.\n     */\n    responseLimit?: ResponseLimit$1\n    /**\n     * The byte limit of the body. This is the number of bytes or any string\n     * format supported by `bytes`, for example `1000`, `'500kb'` or `'3mb'`.\n     */\n    bodyParser?:\n      | {\n          sizeLimit?: SizeLimit$1\n        }\n      | false\n    /**\n     * Flag to disable warning \"API page resolved\n     * without sending a response\", due to explicitly\n     * using an external API resolver, like express\n     */\n    externalResolver?: true\n  }\n  env?: Array<string>\n  runtime?: ServerRuntime$1\n  unstable_runtimeJS?: false\n  unstable_JsPreload?: false\n  /**\n   * @deprecated this config has been removed in favor of the next.config.js option\n   */\n  // TODO: remove in next minor release (current v13.1.1)\n  unstable_includeFiles?: string[]\n  /**\n   * @deprecated this config has been removed in favor of the next.config.js option\n   */\n  // TODO: remove in next minor release (current v13.1.1)\n  unstable_excludeFiles?: string[]\n}\n\n\ntype PreviewData$1 = string | false | object | undefined\n\n/**\n * Context object passed into `getStaticProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-props#context-parameter\n */\ntype GetStaticPropsContext$1<\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData$1 = PreviewData$1\n> = {\n  params?: Params\n  preview?: boolean\n  previewData?: Preview\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * The return type of `getStaticProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-props#getstaticprops-return-values\n */\ntype GetStaticPropsResult$1<Props> =\n  | { props: Props; revalidate?: number | boolean }\n  | { redirect: Redirect$2; revalidate?: number | boolean }\n  | { notFound: true; revalidate?: number | boolean }\n\n/**\n * Static Site Generation feature for Next.js.\n * @link https://nextjs.org/docs/basic-features/data-fetching/get-static-props\n * @link https://nextjs.org/docs/basic-features/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getStaticProps: GetStaticProps = async (context) => {\n *   // ...\n * }\n * ```\n */\ntype GetStaticProps$1<\n  Props extends { [key: string]: any } = { [key: string]: any },\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData$1 = PreviewData$1\n> = (\n  context: GetStaticPropsContext$1<Params, Preview>\n) => Promise<GetStaticPropsResult$1<Props>> | GetStaticPropsResult$1<Props>\n\ntype GetStaticPathsContext$1 = {\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * The return type of `getStaticPaths`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#getstaticpaths-return-values\n */\ntype GetStaticPathsResult$1<\n  Params extends ParsedUrlQuery = ParsedUrlQuery\n> = {\n  paths: Array<string | { params: Params; locale?: string }>\n  fallback: boolean | 'blocking'\n}\n\n/**\n * Define a list of paths to be statically generated if dynamic routes exist.\n * @link https://nextjs.org/docs/basic-features/data-fetching/get-static-paths\n * @link https://nextjs.org/docs/basic-features/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getStaticPaths: GetStaticPaths = async () => {\n *  // ...\n * }\n * ```\n */\ntype GetStaticPaths$1<Params extends ParsedUrlQuery = ParsedUrlQuery> = (\n  context: GetStaticPathsContext$1\n) => Promise<GetStaticPathsResult$1<Params>> | GetStaticPathsResult$1<Params>\n\n/**\n * Context object passed into `getServerSideProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props#context-parameter\n */\ntype GetServerSidePropsContext$1<\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData$1 = PreviewData$1\n> = {\n  req: IncomingMessage & {\n    cookies: NextApiRequestCookies$1\n  }\n  res: ServerResponse\n  params?: Params\n  query: ParsedUrlQuery\n  preview?: boolean\n  previewData?: Preview\n  resolvedUrl: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * The return type of `getServerSideProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props#getserversideprops-return-values\n */\ntype GetServerSidePropsResult$1<Props> =\n  | { props: Props | Promise<Props> }\n  | { redirect: Redirect$2 }\n  | { notFound: true }\n\n/**\n * Server-side Rendering feature for Next.js.\n * @link https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\n * @link https://nextjs.org/docs/basic-features/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getServerSideProps: GetServerSideProps = async (context) => {\n *  // ...\n * }\n */\ntype GetServerSideProps$1<\n  Props extends { [key: string]: any } = { [key: string]: any },\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData$1 = PreviewData$1\n> = (\n  context: GetServerSidePropsContext$1<Params, Preview>\n) => Promise<GetServerSidePropsResult$1<Props>>\n\ndeclare global {\n  interface Crypto {\n    readonly subtle: SubtleCrypto\n    getRandomValues<\n      T extends\n        | Int8Array\n        | Int16Array\n        | Int32Array\n        | Uint8Array\n        | Uint16Array\n        | Uint32Array\n        | Uint8ClampedArray\n        | Float32Array\n        | Float64Array\n        | DataView\n        | null\n    >(\n      array: T\n    ): T\n    randomUUID(): string\n  }\n}\n\ndeclare type FontManifest = Array<{\n    url: string;\n    content: string;\n}>;\ndeclare type FontConfig = boolean;\n\ndeclare type NextFontManifest = {\n    pages: {\n        [path: string]: string[];\n    };\n    app: {\n        [moduleRequest: string]: string[];\n    };\n    appUsingSizeAdjust: boolean;\n    pagesUsingSizeAdjust: boolean;\n};\n\ndeclare type HtmlProps = {\n    __NEXT_DATA__: NEXT_DATA;\n    strictNextHead: boolean;\n    dangerousAsPath: string;\n    docComponentsRendered: {\n        Html?: boolean;\n        Main?: boolean;\n        Head?: boolean;\n        NextScript?: boolean;\n    };\n    buildManifest: BuildManifest;\n    ampPath: string;\n    inAmpMode: boolean;\n    hybridAmp: boolean;\n    isDevelopment: boolean;\n    dynamicImports: string[];\n    assetPrefix?: string;\n    canonicalBase: string;\n    headTags: any[];\n    unstable_runtimeJS?: false;\n    unstable_JsPreload?: false;\n    devOnlyCacheBusterQueryString: string;\n    scriptLoader: {\n        afterInteractive?: string[];\n        beforeInteractive?: any[];\n        worker?: any[];\n    };\n    locale?: string;\n    disableOptimizedLoading?: boolean;\n    styles?: React.ReactElement[] | React.ReactFragment;\n    head?: Array<JSX.Element | null>;\n    crossOrigin?: string;\n    optimizeCss?: any;\n    optimizeFonts?: FontConfig;\n    nextConfigOutput?: 'standalone' | 'export';\n    nextScriptWorkers?: boolean;\n    runtime?: ServerRuntime$1;\n    hasConcurrentFeatures?: boolean;\n    largePageDataBytes?: number;\n    nextFontManifest?: NextFontManifest;\n};\n\ndeclare type RouteHas = {\n    type: 'header' | 'query' | 'cookie';\n    key: string;\n    value?: string;\n} | {\n    type: 'host';\n    key?: undefined;\n    value: string;\n};\ndeclare type Rewrite = {\n    source: string;\n    destination: string;\n    basePath?: false;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\ndeclare type Header = {\n    source: string;\n    basePath?: false;\n    locale?: false;\n    headers: Array<{\n        key: string;\n        value: string;\n    }>;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\ndeclare type Redirect$1 = {\n    source: string;\n    destination: string;\n    basePath?: false;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n} & ({\n    statusCode?: never;\n    permanent: boolean;\n} | {\n    statusCode: number;\n    permanent?: never;\n});\ninterface CustomRoutes {\n    headers: Header[];\n    rewrites: {\n        fallback: Rewrite[];\n        afterFiles: Rewrite[];\n        beforeFiles: Rewrite[];\n    };\n    redirects: Redirect$1[];\n}\n\ndeclare const VALID_LOADERS: readonly [\"default\", \"imgix\", \"cloudinary\", \"akamai\", \"custom\"];\ndeclare type LoaderValue = typeof VALID_LOADERS[number];\ndeclare type RemotePattern = {\n    /**\n     * Must be `http` or `https`.\n     */\n    protocol?: 'http' | 'https';\n    /**\n     * Can be literal or wildcard.\n     * Single `*` matches a single subdomain.\n     * Double `**` matches any number of subdomains.\n     */\n    hostname: string;\n    /**\n     * Can be literal port such as `8080` or empty string\n     * meaning no port.\n     */\n    port?: string;\n    /**\n     * Can be literal or wildcard.\n     * Single `*` matches a single path segment.\n     * Double `**` matches any number of path segments.\n     */\n    pathname?: string;\n};\ndeclare type ImageFormat = 'image/avif' | 'image/webp';\n/**\n * Image configurations\n *\n * @see [Image configuration options](https://nextjs.org/docs/api-reference/next/image#configuration-options)\n */\ndeclare type ImageConfigComplete = {\n    /** @see [Device sizes documentation](https://nextjs.org/docs/api-reference/next/image#device-sizes) */\n    deviceSizes: number[];\n    /** @see [Image sizing documentation](https://nextjs.org/docs/basic-features/image-optimization#image-sizing) */\n    imageSizes: number[];\n    /** @see [Image loaders configuration](https://nextjs.org/docs/api-reference/next/legacy/image#loader) */\n    loader: LoaderValue;\n    /** @see [Image loader configuration](https://nextjs.org/docs/api-reference/next/legacy/image#loader-configuration) */\n    path: string;\n    /** @see [Image loader configuration](https://nextjs.org/docs/api-reference/next/image#loader-configuration) */\n    loaderFile: string;\n    /**\n     * @see [Image domains configuration](https://nextjs.org/docs/api-reference/next/image#domains)\n     */\n    domains: string[];\n    /** @see [Disable static image import configuration](https://nextjs.org/docs/api-reference/next/image#disable-static-imports) */\n    disableStaticImages: boolean;\n    /** @see [Cache behavior](https://nextjs.org/docs/api-reference/next/image#caching-behavior) */\n    minimumCacheTTL: number;\n    /** @see [Acceptable formats](https://nextjs.org/docs/api-reference/next/image#acceptable-formats) */\n    formats: ImageFormat[];\n    /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n    dangerouslyAllowSVG: boolean;\n    /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n    contentSecurityPolicy: string;\n    /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n    contentDispositionType: 'inline' | 'attachment';\n    /** @see [Remote Patterns](https://nextjs.org/docs/api-reference/next/image#remote-patterns) */\n    remotePatterns: RemotePattern[];\n    /** @see [Unoptimized](https://nextjs.org/docs/api-reference/next/image#unoptimized) */\n    unoptimized: boolean;\n};\ndeclare type ImageConfig = Partial<ImageConfigComplete>;\n\ndeclare type SubresourceIntegrityAlgorithm = 'sha256' | 'sha384' | 'sha512';\n\ndeclare type NextApiRequestCookies = Partial<{\n    [key: string]: string;\n}>;\ndeclare type __ApiPreviewProps = {\n    previewModeId: string;\n    previewModeEncryptionKey: string;\n    previewModeSigningKey: string;\n};\ndeclare const SYMBOL_CLEARED_COOKIES: unique symbol;\n\ndeclare abstract class BaseNextRequest<Body = any> {\n    method: string;\n    url: string;\n    body: Body;\n    protected _cookies: NextApiRequestCookies | undefined;\n    abstract headers: IncomingHttpHeaders;\n    constructor(method: string, url: string, body: Body);\n    abstract parseBody(limit: string | number): Promise<any>;\n    get cookies(): Partial<{\n        [key: string]: string;\n    }>;\n}\ndeclare abstract class BaseNextResponse<Destination = any> {\n    destination: Destination;\n    abstract statusCode: number | undefined;\n    abstract statusMessage: string | undefined;\n    abstract get sent(): boolean;\n    constructor(destination: Destination);\n    /**\n     * Sets a value for the header overwriting existing values\n     */\n    abstract setHeader(name: string, value: string | string[]): this;\n    /**\n     * Appends value for the given header name\n     */\n    abstract appendHeader(name: string, value: string): this;\n    /**\n     * Get all vaues for a header as an array or undefined if no value is present\n     */\n    abstract getHeaderValues(name: string): string[] | undefined;\n    abstract hasHeader(name: string): boolean;\n    /**\n     * Get vaues for a header concatenated using `,` or undefined if no value is present\n     */\n    abstract getHeader(name: string): string | undefined;\n    abstract getHeaders(): OutgoingHttpHeaders;\n    abstract body(value: string): this;\n    abstract send(): void;\n    redirect(destination: string, statusCode: number): this;\n}\n\ninterface CloneableBody {\n    finalize(): Promise<void>;\n    cloneBodyStream(): Readable;\n}\n\ndeclare const enum RouteKind {\n    /**\n     * `PAGES` represents all the React pages that are under `pages/`.\n     */\n    PAGES = \"PAGES\",\n    /**\n     * `PAGES_API` represents all the API routes under `pages/api/`.\n     */\n    PAGES_API = \"PAGES_API\",\n    /**\n     * `APP_PAGE` represents all the React pages that are under `app/` with the\n     * filename of `page.{j,t}s{,x}`.\n     */\n    APP_PAGE = \"APP_PAGE\",\n    /**\n     * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n     * filename of `route.{j,t}s{,x}`.\n     */\n    APP_ROUTE = \"APP_ROUTE\"\n}\n\ninterface RouteDefinition<K extends RouteKind = RouteKind> {\n    readonly kind: K;\n    readonly bundlePath: string;\n    readonly filename: string;\n    /**\n     * Describes the pathname including all internal modifiers such as\n     * intercepting routes, parallel routes and route/page suffixes that are not\n     * part of the pathname.\n     */\n    readonly page: string;\n    /**\n     * The pathname (including dynamic placeholders) for a route to resolve.\n     */\n    readonly pathname: string;\n    /**\n     * The pathname (including dynamic placeholders) for a route to resolve that\n     * is used for the browser to display in the address bar. This is used in\n     * place of `pathname` when the route is rendering.\n     */\n    readonly pathnameOverride?: string;\n}\n\n/**\n * RouteMatch is the resolved match for a given request. This will contain all\n * the dynamic parameters used for this route.\n */\ninterface RouteMatch<D extends RouteDefinition = RouteDefinition> {\n    readonly definition: D;\n    /**\n     * params when provided are the dynamic route parameters that were parsed from\n     * the incoming request pathname. If a route match is returned without any\n     * params, it should be considered a static route.\n     */\n    readonly params: Record<string, string | string[]> | undefined;\n}\n\ndeclare const NEXT_REQUEST_META: unique symbol;\ninterface RequestMeta {\n    __NEXT_INIT_QUERY?: ParsedUrlQuery;\n    __NEXT_INIT_URL?: string;\n    __NEXT_CLONABLE_BODY?: CloneableBody;\n    __nextHadTrailingSlash?: boolean;\n    /**\n     * True when the request matched a locale domain that was configured in the\n     * next.config.js file.\n     */\n    __nextIsLocaleDomain?: boolean;\n    /**\n     * True when the request had locale information stripped from the pathname\n     * part of the URL.\n     */\n    __nextStrippedLocale?: boolean;\n    _nextDidRewrite?: boolean;\n    _nextHadBasePath?: boolean;\n    _nextRewroteUrl?: string;\n    _nextMiddlewareCookie?: string[];\n    _protocol?: string;\n    _nextDataNormalizing?: boolean;\n    _nextMatch?: RouteMatch;\n    _nextIncrementalCache?: any;\n}\ndeclare type NextQueryMetadata = {\n    __nextNotFoundSrcPage?: string;\n    __nextDefaultLocale?: string;\n    __nextFallback?: 'true';\n    /**\n     * The locale that was inferred or explicitly set for the request.\n     *\n     * When this property is mutated, it's important to also update the request\n     * metadata for `_nextInferredDefaultLocale` to ensure that the correct\n     * behavior is applied.\n     */\n    __nextLocale?: string;\n    /**\n     * `1` when the request did not have a locale in the pathname part of the\n     * URL but the default locale was inferred from either the domain or the\n     * configuration.\n     */\n    __nextInferredLocaleFromDefault?: '1';\n    __nextSsgPath?: string;\n    _nextBubbleNoFallback?: '1';\n    __nextDataReq?: '1';\n    __nextCustomErrorRender?: '1';\n};\ndeclare type NextParsedUrlQuery = ParsedUrlQuery & NextQueryMetadata & {\n    amp?: '1';\n};\ninterface NextUrlWithParsedQuery extends UrlWithParsedQuery {\n    query: NextParsedUrlQuery;\n}\n\ndeclare type NextConfigComplete = Required<NextConfig> & {\n    images: Required<ImageConfigComplete>;\n    typescript: Required<TypeScriptConfig>;\n    configOrigin?: string;\n    configFile?: string;\n    configFileName: string;\n};\ninterface I18NConfig {\n    defaultLocale: string;\n    domains?: DomainLocale[];\n    localeDetection?: false;\n    locales: string[];\n}\ninterface DomainLocale {\n    defaultLocale: string;\n    domain: string;\n    http?: true;\n    locales?: string[];\n}\ninterface ESLintConfig {\n    /** Only run ESLint on these directories with `next lint` and `next build`. */\n    dirs?: string[];\n    /** Do not run ESLint during production builds (`next build`). */\n    ignoreDuringBuilds?: boolean;\n}\ninterface TypeScriptConfig {\n    /** Do not run TypeScript during production builds (`next build`). */\n    ignoreBuildErrors?: boolean;\n    /** Relative path to a custom tsconfig file */\n    tsconfigPath?: string;\n}\ndeclare type JSONValue = string | number | boolean | JSONValue[] | {\n    [k: string]: JSONValue;\n};\ndeclare type TurboLoaderItem = string | {\n    loader: string;\n    options: Record<string, JSONValue>;\n};\ninterface ExperimentalTurboOptions {\n    /**\n     * (`next --turbo` only) A mapping of aliased imports to modules to load in their place.\n     *\n     * @see [Resolve Alias](https://nextjs.org/docs/api-reference/next.config.js/resolve-alias)\n     */\n    resolveAlias?: Record<string, string | string[] | Record<string, string | string[]>>;\n    /**\n     * (`next --turbo` only) A list of webpack loaders to apply when running with Turbopack.\n     *\n     * @see [Turbopack Loaders](https://nextjs.org/docs/api-reference/next.config.js/turbopack-loaders)\n     */\n    loaders?: Record<string, TurboLoaderItem[]>;\n}\ninterface WebpackConfigContext {\n    /** Next.js root directory */\n    dir: string;\n    /** Indicates if the compilation will be done in development */\n    dev: boolean;\n    /** It's `true` for server-side compilation, and `false` for client-side compilation */\n    isServer: boolean;\n    /**  The build id, used as a unique identifier between builds */\n    buildId: string;\n    /** The next.config.js merged with default values */\n    config: NextConfigComplete;\n    /** Default loaders used internally by Next.js */\n    defaultLoaders: {\n        /** Default babel-loader configuration */\n        babel: any;\n    };\n    /** Number of total Next.js pages */\n    totalPages: number;\n    /** The webpack configuration */\n    webpack: any;\n    /** The current server runtime */\n    nextRuntime?: 'nodejs' | 'edge';\n}\ninterface NextJsWebpackConfig {\n    (\n    /** Existing Webpack config */\n    config: any, context: WebpackConfigContext): any;\n}\ninterface ExperimentalConfig {\n    appDocumentPreloading?: boolean;\n    strictNextHead?: boolean;\n    clientRouterFilter?: boolean;\n    clientRouterFilterRedirects?: boolean;\n    clientRouterFilterAllowedRate?: number;\n    externalMiddlewareRewritesResolve?: boolean;\n    extensionAlias?: Record<string, any>;\n    allowedRevalidateHeaderKeys?: string[];\n    fetchCacheKeyPrefix?: string;\n    optimisticClientCache?: boolean;\n    middlewarePrefetch?: 'strict' | 'flexible';\n    legacyBrowsers?: boolean;\n    manualClientBasePath?: boolean;\n    newNextLinkBehavior?: boolean;\n    incrementalCacheHandlerPath?: string;\n    disablePostcssPresetEnv?: boolean;\n    swcMinify?: boolean;\n    swcFileReading?: boolean;\n    cpus?: number;\n    sharedPool?: boolean;\n    proxyTimeout?: number;\n    isrFlushToDisk?: boolean;\n    workerThreads?: boolean;\n    pageEnv?: boolean;\n    optimizeCss?: boolean | Record<string, unknown>;\n    nextScriptWorkers?: boolean;\n    scrollRestoration?: boolean;\n    externalDir?: boolean;\n    /**\n     * The App Router (app directory) enables support for layouts, Server Components, streaming, and colocated data fetching.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#appdir\n     */\n    appDir?: boolean;\n    amp?: {\n        optimizer?: any;\n        validator?: string;\n        skipValidation?: boolean;\n    };\n    disableOptimizedLoading?: boolean;\n    gzipSize?: boolean;\n    craCompat?: boolean;\n    esmExternals?: boolean | 'loose';\n    isrMemoryCacheSize?: number;\n    runtime?: Exclude<ServerRuntime$1, undefined>;\n    fullySpecified?: boolean;\n    urlImports?: NonNullable<webpack.Configuration['experiments']>['buildHttp'];\n    outputFileTracingRoot?: string;\n    outputFileTracingExcludes?: Record<string, string[]>;\n    outputFileTracingIgnores?: string[];\n    outputFileTracingIncludes?: Record<string, string[]>;\n    swcTraceProfiling?: boolean;\n    forceSwcTransforms?: boolean;\n    /**\n     * This option is removed\n     */\n    swcMinifyDebugOptions?: never;\n    swcPlugins?: Array<[string, Record<string, unknown>]>;\n    largePageDataBytes?: number;\n    /**\n     * If set to `false`, webpack won't fall back to polyfill Node.js modules in the browser\n     * Full list of old polyfills is accessible here:\n     * [webpack/webpack#ModuleNotoundError.js#L13-L42](https://github.com/webpack/webpack/blob/2a0536cf510768111a3a6dceeb14cb79b9f59273/lib/ModuleNotFoundError.js#L13-L42)\n     */\n    fallbackNodePolyfills?: false;\n    enableUndici?: boolean;\n    sri?: {\n        algorithm?: SubresourceIntegrityAlgorithm;\n    };\n    adjustFontFallbacks?: boolean;\n    adjustFontFallbacksWithSizeAdjust?: boolean;\n    /**\n     * A list of packages that should be treated as external in the RSC server build.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#servercomponentsexternalpackages\n     */\n    serverComponentsExternalPackages?: string[];\n    webVitalsAttribution?: Array<typeof WEB_VITALS[number]>;\n    turbo?: ExperimentalTurboOptions;\n    turbotrace?: {\n        logLevel?: 'bug' | 'fatal' | 'error' | 'warning' | 'hint' | 'note' | 'suggestions' | 'info';\n        logDetail?: boolean;\n        logAll?: boolean;\n        contextDirectory?: string;\n        processCwd?: string;\n        /** in `MB` */\n        memoryLimit?: number;\n    };\n    /**\n     * For use with `@next/mdx`. Compile MDX files using the new Rust compiler.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#mdxrs\n     */\n    mdxRs?: boolean;\n    /**\n     * Generate Route types and enable type checking for Link and Router.push, etc.\n     * This option requires `appDir` to be enabled first.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#typedroutes\n     */\n    typedRoutes?: boolean;\n    /**\n     * This option is to enable running the Webpack build in a worker thread.\n     */\n    webpackBuildWorker?: boolean;\n    /**\n     *\n     */\n    instrumentationHook?: boolean;\n    /**\n     * Use the `experimental` channel of React and React DOM in the app/ directory.\n     * By default, this will be disable and the `next` channel will be used.\n     * This requires `appDir` to be enabled first.\n     */\n    experimentalReact?: boolean;\n}\ndeclare type ExportPathMap = {\n    [path: string]: {\n        page: string;\n        query?: NextParsedUrlQuery;\n        _isAppDir?: boolean;\n        _isDynamicError?: boolean;\n    };\n};\n/**\n * Next configuration object\n * @see [configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/introduction)\n */\ninterface NextConfig extends Record<string, any> {\n    exportPathMap?: (defaultMap: ExportPathMap, ctx: {\n        dev: boolean;\n        dir: string;\n        outDir: string | null;\n        distDir: string;\n        buildId: string;\n    }) => Promise<ExportPathMap> | ExportPathMap;\n    /**\n     * Internationalization configuration\n     *\n     * @see [Internationalization docs](https://nextjs.org/docs/advanced-features/i18n-routing)\n     */\n    i18n?: I18NConfig | null;\n    /**\n     * @since version 11\n     * @see [ESLint configuration](https://nextjs.org/docs/basic-features/eslint)\n     */\n    eslint?: ESLintConfig;\n    /**\n     * @see [Next.js TypeScript documentation](https://nextjs.org/docs/basic-features/typescript)\n     */\n    typescript?: TypeScriptConfig;\n    /**\n     * Headers allow you to set custom HTTP headers for an incoming request path.\n     *\n     * @see [Headers configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/headers)\n     */\n    headers?: () => Promise<Header[]>;\n    /**\n     * Rewrites allow you to map an incoming request path to a different destination path.\n     *\n     * @see [Rewrites configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/rewrites)\n     */\n    rewrites?: () => Promise<Rewrite[] | {\n        beforeFiles: Rewrite[];\n        afterFiles: Rewrite[];\n        fallback: Rewrite[];\n    }>;\n    /**\n     * Redirects allow you to redirect an incoming request path to a different destination path.\n     *\n     * @see [Redirects configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/redirects)\n     */\n    redirects?: () => Promise<Redirect$1[]>;\n    /**\n     * @see [Moment.js locales excluded by default](https://nextjs.org/docs/upgrading#momentjs-locales-excluded-by-default)\n     */\n    excludeDefaultMomentLocales?: boolean;\n    /**\n     * Before continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case\n     *\n     * @see [Custom Webpack Config documentation](https://nextjs.org/docs/api-reference/next.config.js/custom-webpack-config)\n     */\n    webpack?: NextJsWebpackConfig | null;\n    /**\n     * By default Next.js will redirect urls with trailing slashes to their counterpart without a trailing slash.\n     *\n     * @default false\n     * @see [Trailing Slash Configuration](https://nextjs.org/docs/api-reference/next.config.js/trailing-slash)\n     */\n    trailingSlash?: boolean;\n    /**\n     * Next.js comes with built-in support for environment variables\n     *\n     * @see [Environment Variables documentation](https://nextjs.org/docs/api-reference/next.config.js/environment-variables)\n     */\n    env?: Record<string, string>;\n    /**\n     * Destination directory (defaults to `.next`)\n     */\n    distDir?: string;\n    /**\n     * The build output directory (defaults to `.next`) is now cleared by default except for the Next.js caches.\n     */\n    cleanDistDir?: boolean;\n    /**\n     * To set up a CDN, you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n     *\n     * @see [CDN Support with Asset Prefix](https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix)\n     */\n    assetPrefix?: string;\n    /**\n     * By default, `Next` will serve each file in the `pages` folder under a pathname matching the filename.\n     * To disable this behavior and prevent routing based set this to `true`.\n     *\n     * @default true\n     * @see [Disabling file-system routing](https://nextjs.org/docs/advanced-features/custom-server#disabling-file-system-routing)\n     */\n    useFileSystemPublicRoutes?: boolean;\n    /**\n     * @see [Configuring the build ID](https://nextjs.org/docs/api-reference/next.config.js/configuring-the-build-id)\n     */\n    generateBuildId?: () => string | null | Promise<string | null>;\n    /** @see [Disabling ETag Configuration](https://nextjs.org/docs/api-reference/next.config.js/disabling-etag-generation) */\n    generateEtags?: boolean;\n    /** @see [Including non-page files in the pages directory](https://nextjs.org/docs/api-reference/next.config.js/custom-page-extensions) */\n    pageExtensions?: string[];\n    /** @see [Compression documentation](https://nextjs.org/docs/api-reference/next.config.js/compression) */\n    compress?: boolean;\n    /**\n     * The field should only be used when a Next.js project is not hosted on Vercel while using Vercel Analytics.\n     * Vercel provides zero-configuration analytics for Next.js projects hosted on Vercel.\n     *\n     * @default ''\n     * @see [Next.js Analytics](https://nextjs.org/analytics)\n     */\n    analyticsId?: string;\n    /** @see [Disabling x-powered-by](https://nextjs.org/docs/api-reference/next.config.js/disabling-x-powered-by) */\n    poweredByHeader?: boolean;\n    /** @see [Using the Image Component](https://nextjs.org/docs/basic-features/image-optimization#using-the-image-component) */\n    images?: ImageConfig;\n    /** Configure indicators in development environment */\n    devIndicators?: {\n        /** Show \"building...\"\" indicator in development */\n        buildActivity?: boolean;\n        /** Position of \"building...\" indicator in browser */\n        buildActivityPosition?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n    };\n    /**\n     * Next.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development.\n     *\n     * @see [Configuring `onDemandEntries`](https://nextjs.org/docs/api-reference/next.config.js/configuring-onDemandEntries)\n     */\n    onDemandEntries?: {\n        /** period (in ms) where the server will keep pages in the buffer */\n        maxInactiveAge?: number;\n        /** number of pages that should be kept simultaneously without being disposed */\n        pagesBufferLength?: number;\n    };\n    /** @see [`next/amp`](https://nextjs.org/docs/api-reference/next/amp) */\n    amp?: {\n        canonicalBase?: string;\n    };\n    /**\n     * Deploy a Next.js application under a sub-path of a domain\n     *\n     * @see [Base path configuration](https://nextjs.org/docs/api-reference/next.config.js/basepath)\n     */\n    basePath?: string;\n    /** @see [Customizing sass options](https://nextjs.org/docs/basic-features/built-in-css-support#customizing-sass-options) */\n    sassOptions?: {\n        [key: string]: any;\n    };\n    /**\n     * Enable browser source map generation during the production build\n     *\n     * @see [Source Maps](https://nextjs.org/docs/advanced-features/source-maps)\n     */\n    productionBrowserSourceMaps?: boolean;\n    /**\n     * By default, Next.js will automatically inline font CSS at build time\n     *\n     * @default true\n     * @since version 10.2\n     * @see [Font Optimization](https://nextjs.org/docs/basic-features/font-optimization)\n     */\n    optimizeFonts?: boolean;\n    /**\n     * The Next.js runtime is Strict Mode-compliant.\n     *\n     * @see [React Strict Mode](https://nextjs.org/docs/api-reference/next.config.js/react-strict-mode)\n     */\n    reactStrictMode?: boolean | null;\n    /**\n     * Add public (in browser) runtime configuration to your app\n     *\n     * @see [Runtime configuration](https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration)\n     */\n    publicRuntimeConfig?: {\n        [key: string]: any;\n    };\n    /**\n     * Add server runtime configuration to your app\n     *\n     * @see [Runtime configuration](https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration)\n     */\n    serverRuntimeConfig?: {\n        [key: string]: any;\n    };\n    /**\n     * Next.js automatically polyfills node-fetch and enables HTTP Keep-Alive by default.\n     * You may want to disable HTTP Keep-Alive for certain `fetch()` calls or globally.\n     *\n     * @see [Disabling HTTP Keep-Alive](https://nextjs.org/docs/api-reference/next.config.js/disabling-http-keep-alive)\n     */\n    httpAgentOptions?: {\n        keepAlive?: boolean;\n    };\n    /**\n     * During a build, Next.js will automatically trace each page and its dependencies to determine all of the files\n     * that are needed for deploying a production version of your application.\n     *\n     * @see [Output File Tracing](https://nextjs.org/docs/advanced-features/output-file-tracing)\n     */\n    outputFileTracing?: boolean;\n    /**\n     * Timeout after waiting to generate static pages in seconds\n     *\n     * @default 60\n     */\n    staticPageGenerationTimeout?: number;\n    /**\n     * Add `\"crossorigin\"` attribute to generated `<script>` elements generated by `<Head />` or `<NextScript />` components\n     *\n     *\n     * @see [`crossorigin` attribute documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin)\n     */\n    crossOrigin?: false | 'anonymous' | 'use-credentials';\n    /**\n     * Use [SWC compiler](https://swc.rs) to minify the generated JavaScript\n     *\n     * @see [SWC Minification](https://nextjs.org/docs/advanced-features/compiler#minification)\n     */\n    swcMinify?: boolean;\n    /**\n     * Optionally enable compiler transforms\n     *\n     * @see [Supported Compiler Options](https://nextjs.org/docs/advanced-features/compiler#supported-features)\n     */\n    compiler?: {\n        reactRemoveProperties?: boolean | {\n            properties?: string[];\n        };\n        relay?: {\n            src: string;\n            artifactDirectory?: string;\n            language?: 'typescript' | 'javascript' | 'flow';\n            eagerEsModules?: boolean;\n        };\n        removeConsole?: boolean | {\n            exclude?: string[];\n        };\n        styledComponents?: boolean | {\n            /**\n             * Enabled by default in development, disabled in production to reduce file size,\n             * setting this will override the default for all environments.\n             */\n            displayName?: boolean;\n            topLevelImportPaths?: string[];\n            ssr?: boolean;\n            fileName?: boolean;\n            meaninglessFileNames?: string[];\n            minify?: boolean;\n            transpileTemplateLiterals?: boolean;\n            namespace?: string;\n            pure?: boolean;\n            cssProp?: boolean;\n        };\n        emotion?: boolean | {\n            sourceMap?: boolean;\n            autoLabel?: 'dev-only' | 'always' | 'never';\n            labelFormat?: string;\n            importMap?: {\n                [importName: string]: {\n                    [exportName: string]: {\n                        canonicalImport?: [string, string];\n                        styledBaseImport?: [string, string];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * The type of build output.\n     * - `undefined`: The default build output, `.next` directory, that works with production mode `next start` or a hosting provider like Vercel\n     * - `'standalone'`: A standalone build output, `.next/standalone` directory, that only includes necessary files/dependencies. Useful for self-hosting in a Docker container.\n     * - `'export'`: An exported build output, `out` directory, that only includes static HTML/CSS/JS. Useful for self-hosting without a Node.js server.\n     * @see [Output File Tracing](https://nextjs.org/docs/advanced-features/output-file-tracing)\n     * @see [Static HTML Export](https://nextjs.org/docs/advanced-features/static-html-export)\n     */\n    output?: 'standalone' | 'export';\n    /**\n     * Automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (`node_modules`). This replaces the\n     * `next-transpile-modules` package.\n     * @see [transpilePackages](https://nextjs.org/docs/advanced-features/compiler#module-transpilation)\n     */\n    transpilePackages?: string[];\n    skipMiddlewareUrlNormalize?: boolean;\n    skipTrailingSlashRedirect?: boolean;\n    modularizeImports?: Record<string, {\n        transform: string;\n        preventFullImport?: boolean;\n        skipDefaultConversion?: boolean;\n    }>;\n    /**\n     * Enable experimental features. Note that all experimental features are subject to breaking changes in the future.\n     */\n    experimental?: ExperimentalConfig;\n}\n\ninterface AssetBinding {\n    filePath: string;\n    name: string;\n}\n\ninterface MiddlewareMatcher {\n    regexp: string;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n    originalSource: string;\n}\n\ndeclare global {\n    interface Window {\n        __BUILD_MANIFEST?: Record<string, string[]>;\n        __BUILD_MANIFEST_CB?: Function;\n        __MIDDLEWARE_MATCHERS?: MiddlewareMatcher[];\n        __MIDDLEWARE_MANIFEST_CB?: Function;\n    }\n}\ninterface LoadedEntrypointSuccess {\n    component: ComponentType;\n    exports: any;\n}\ninterface LoadedEntrypointFailure {\n    error: unknown;\n}\ndeclare type RouteEntrypoint = LoadedEntrypointSuccess | LoadedEntrypointFailure;\ninterface RouteStyleSheet {\n    href: string;\n    content: string;\n}\ninterface LoadedRouteSuccess extends LoadedEntrypointSuccess {\n    styles: RouteStyleSheet[];\n}\ninterface LoadedRouteFailure {\n    error: unknown;\n}\ndeclare type RouteLoaderEntry = LoadedRouteSuccess | LoadedRouteFailure;\ninterface RouteLoader {\n    whenEntrypoint(route: string): Promise<RouteEntrypoint>;\n    onEntrypoint(route: string, execute: () => unknown): void;\n    loadRoute(route: string, prefetch?: boolean): Promise<RouteLoaderEntry>;\n    prefetch(route: string): Promise<void>;\n}\n\ndeclare global {\n    interface Window {\n        __DEV_MIDDLEWARE_MATCHERS?: MiddlewareMatcher[];\n        __DEV_PAGES_MANIFEST?: {\n            pages: string[];\n        };\n        __SSG_MANIFEST_CB?: () => void;\n        __SSG_MANIFEST?: Set<string>;\n    }\n}\ndeclare type StyleSheetTuple = {\n    href: string;\n    text: string;\n};\ndeclare type GoodPageCache = {\n    page: ComponentType;\n    mod: any;\n    styleSheets: StyleSheetTuple[];\n};\ndeclare class PageLoader {\n    private buildId;\n    private assetPrefix;\n    private promisedSsgManifest;\n    private promisedDevPagesManifest?;\n    private promisedMiddlewareMatchers?;\n    routeLoader: RouteLoader;\n    constructor(buildId: string, assetPrefix: string);\n    getPageList(): string[] | Promise<string[]>;\n    getMiddleware(): MiddlewareMatcher[] | Promise<MiddlewareMatcher[]> | undefined;\n    getDataHref(params: {\n        asPath: string;\n        href: string;\n        locale?: string | false;\n        skipInterpolation?: boolean;\n    }): string;\n    _isSsg(\n    /** the route (file-system path) */\n    route: string): Promise<boolean>;\n    loadPage(route: string): Promise<GoodPageCache>;\n    prefetch(route: string): Promise<void>;\n}\n\n/**\n * @typedef {TwoHashes} Two hashes of the same value, as computed by {@link hashTwice}.\n * @property {number} first - The result of the first hashing function applied to a value\n * @property {number} second - The result of the second hashing function applied to a value\n * @memberof Utils\n */\ninterface TwoHashes {\n    first: number;\n    second: number;\n}\n/**\n * Templated TwoHashes type\n */\ninterface TwoHashesTemplated<T> {\n    first: T;\n    second: T;\n}\n/**\n * TwoHashes type in number and int format\n */\ninterface TwoHashesIntAndString {\n    int: TwoHashesTemplated<number>;\n    string: TwoHashesTemplated<string>;\n}\n/**\n * Data type of an hashable value, must be string, ArrayBuffer or Buffer.\n */\ndeclare type HashableInput = string;\ndeclare class Hashing implements Hashing {\n    /**\n     * Apply enhanced Double Hashing to produce a n-hash\n     * @see {@link http://peterd.org/pcd-diss.pdf} s6.5.4\n     * @param  n - The indice of the hash function we want to produce\n     * @param  hashA - The result of the first hash function applied to a value.\n     * @param  hashB - The result of the second hash function applied to a value.\n     * @param  size - The size of the datastructures associated to the hash context (ex: the size of a Bloom Filter)\n     * @return The result of hash_n applied to a value.\n     * @memberof Hashing\n     * @author Thomas Minier\n     * @author Arnaud Grall\n     */\n    doubleHashing(n: number, hashA: number, hashB: number, size: number): number;\n    /**\n     * Generate a set of distinct indexes on interval [0, size) using the double hashing technique\n     * For generating efficiently distinct indexes we re-hash after detecting a cycle by changing slightly the seed.\n     * It has the effect of generating faster distinct indexes without loosing entirely the utility of the double hashing.\n     * For small number of indexes it will work perfectly. For a number close to the size, and size very large\n     * Advise: do not generate `size` indexes for a large interval. In practice, size should be equal\n     * to the number of hash functions used and is often low.\n     *\n     * @param  element  - The element to hash\n     * @param  size     - the range on which we can generate an index [0, size) = size\n     * @param  number   - The number of indexes desired\n     * @param  seed     - The seed used\n     * @return Array<number>\n     * @author Arnaud Grall\n     * @author Simon Woolf (SimonWoolf)\n     */\n    getDistinctIndexes(element: HashableInput, size: number, number: number, seed?: number): Array<number>;\n    /**\n     * Generate N indexes on range [0, size)\n     * It uses the double hashing technique to generate the indexes.\n     * It hash twice the value only once before generating the indexes.\n     * Warning: you can have a lot of modulo collisions.\n     * @param  element    - The element to hash\n     * @param  size       - The range on which we can generate the index, exclusive\n     * @param  hashCount  - The number of indexes we want\n     * @return An array of indexes on range [0, size)\n     */\n    getIndexes(element: HashableInput, size: number, hashCount: number, seed?: number): Array<number>;\n    /**\n     * (64-bits only) Hash a value into two values (in hex or integer format)\n     * @param  value - The value to hash\n     * @param  asInt - (optional) If True, the values will be returned as an integer. Otherwise, as hexadecimal values.\n     * @param seed the seed used for hashing\n     * @return The results of the hash functions applied to the value (in hex or integer)\n     * @author Arnaud Grall & Thomas Minier\n     */\n    hashTwice(value: HashableInput, seed?: number): TwoHashes;\n    /**\n     * Hash twice an element into their HEX string representations\n     * @param value\n     * @param seed\n     * @returns TwoHashesTemplated<string>\n     */\n    hashTwiceAsString(value: HashableInput, seed?: number): TwoHashesTemplated<string>;\n    /**\n     * (64-bits only) Same as hashTwice but return Numbers and String equivalent\n     * @param  val the value to hash\n     * @param  seed the seed to change when hashing\n     * @return TwoHashesIntAndString\n     * @author Arnaud Grall\n     */\n    hashTwiceIntAndString(val: HashableInput, seed?: number): TwoHashesIntAndString;\n    /**\n     * Hash an item as an unsigned int\n     * @param  elem - Element to hash\n     * @param  seed - The hash seed. If its is UINT32 make sure to set the length to 32\n     * @param  length - The length of hashes (defaults to 32 bits)\n     * @return The hash value as an unsigned int\n     * @author Arnaud Grall\n     */\n    hashAsInt(elem: HashableInput, seed?: number): number;\n    /**\n     * Hash an item and return its number and HEX string representation\n     * @param  elem - Element to hash\n     * @param  seed - The hash seed. If its is UINT32 make sure to set the length to 32\n     * @param  base - The base in which the string will be returned, default: 16\n     * @param  length - The length of hashes (defaults to 32 bits)\n     * @return The item hased as an int and a string\n     * @author Arnaud Grall\n     */\n    hashIntAndString(elem: HashableInput, seed?: number): {\n        int: number;\n        string: string;\n    };\n}\n\n/**\n * Exported prng type because it is not from seedrandom\n * Orignal type can be found in: @types/seedrandom\n */\ninterface prng {\n    (): number;\n    int32(): number;\n    quick(): number;\n}\n/**\n * A base class for implementing probailistic filters\n * @author Thomas Minier\n * @author Arnaud Grall\n */\ndeclare abstract class BaseFilter {\n    _seed: number;\n    _rng: prng;\n    _hashing: Hashing;\n    constructor();\n    /**\n     * Get the seed used in this structure\n     */\n    get seed(): number;\n    /**\n     * Set the seed for this structure\n     * @param  seed the new seed that will be used in this structure\n     */\n    set seed(seed: number);\n    /**\n     * Get a function used to draw random number\n     * @return A factory function used to draw random integer\n     */\n    get random(): prng;\n    /**\n     * Return a next random seeded int32 integer\n     * @returns\n     */\n    nextInt32(): number;\n    /**\n     * Save the current structure as a JSON\n     */\n    saveAsJSON(): any;\n    /**\n     * Load an Object from a provided JSON object\n     * @param json the JSON object to load\n     * @return Return the Object loaded from the provided JSON object\n     */\n    static fromJSON(json: JSON): any;\n}\n\n/**\n * A memory-efficient Boolean array. Contains just the minimal operations needed for our Bloom filter implementation.\n *\n * @author David Leppik\n */\ndeclare class BitSet {\n    readonly size: number;\n    array: Uint8Array;\n    /**\n     * Constructor. All bits are initially set to false.\n     * @param size the number of bits that can be stored. (This is NOT required to be a multiple of 8.)\n     */\n    constructor(size: number);\n    /**\n     * Returns the value of the bit at the given index\n     * @param index position of the bit, zero-indexed\n     */\n    has(index: number): boolean;\n    /**\n     * Set the bit to true\n     * @param index position of the bit, zero-indexed\n     */\n    add(index: number): void;\n    /**\n     * Returns the maximum true bit.\n     */\n    max(): number;\n    /**\n     * Returns the number of true bits.\n     */\n    bitCount(): number;\n    /**\n     * Returns true if the size and contents are identical.\n     * @param other another BitSet\n     */\n    equals(other: BitSet): boolean;\n    /**\n     * Returns a JSON-encodable object readable by {@link import}.\n     */\n    export(): {\n        size: number;\n        content: string;\n    };\n    /**\n     * Returns an object written by {@link export}.\n     * @param data an object written by {@link export}\n     */\n    static import(data: {\n        size: number;\n        content: string;\n    }): BitSet;\n    /**\n     * Returns the index of the maximum bit in the number, or -1 for 0\n     * @bits an unsigned 8-bit number\n     * ```js\n     * @example\n     * BitSet.highBit(0) // returns -1\n     * BitSet.highBit(5) // returns 2\n     * ```\n     */\n    static highBit(bits: number): number;\n    /**\n     * Returns the number of true bits in the number\n     * @bits an unsigned 8-bit number\n     * @example\n     * ```js\n     * BitSet.countBits(0) // returns 0\n     * BitSet.countBits(3) // returns 2\n     * ```\n     */\n    static countBits(bits: number): number;\n}\n\n/**\n * A Bloom filter is a space-efficient probabilistic data structure, conceived by Burton Howard Bloom in 1970,\n * that is used to test whether an element is a member of a set. False positive matches are possible, but false negatives are not.\n *\n * Reference: Bloom, B. H. (1970). Space/time trade-offs in hash coding with allowable errors. Communications of the ACM, 13(7), 422-426.\n * @see {@link http://crystal.uta.edu/~mcguigan/cse6350/papers/Bloom.pdf} for more details about classic Bloom Filters.\n * @author Thomas Minier\n * @author Arnaud Grall\n */\ndeclare class BloomFilter extends BaseFilter {\n    _size: number;\n    _nbHashes: number;\n    _filter: BitSet;\n    /**\n     * Constructor\n     * @param size - The number of cells\n     * @param nbHashes - The number of hash functions used\n     */\n    constructor(size: number, nbHashes: number);\n    /**\n     * Create an optimal bloom filter providing the maximum of elements stored and the error rate desired\n     * @param  nbItems      - The maximum number of item to store\n     * @param  errorRate  - The error rate desired for a maximum of items inserted\n     * @return A new {@link BloomFilter}\n     */\n    static create(nbItems: number, errorRate: number): BloomFilter;\n    /**\n     * Build a new Bloom Filter from an existing iterable with a fixed error rate\n     * @param items - The iterable used to populate the filter\n     * @param errorRate - The error rate, i.e. 'false positive' rate, targeted by the filter\n     * @param seed - The random number seed (optional)\n     * @return A new Bloom Filter filled with the iterable's elements\n     * @example\n     * ```js\n     * // create a filter with a false positive rate of 0.1\n     * const filter = BloomFilter.from(['alice', 'bob', 'carl'], 0.1);\n     * ```\n     */\n    static from(items: Iterable<HashableInput>, errorRate: number, seed?: number): BloomFilter;\n    /**\n     * Get the optimal size of the filter\n     * @return The size of the filter\n     */\n    get size(): number;\n    /**\n     * Get the number of bits currently set in the filter\n     * @return The filter length\n     */\n    get length(): number;\n    /**\n     * Add an element to the filter\n     * @param element - The element to add\n     * @example\n     * ```js\n     * const filter = new BloomFilter(15, 0.1);\n     * filter.add('foo');\n     * ```\n     */\n    add(element: HashableInput): void;\n    /**\n     * Test an element for membership\n     * @param element - The element to look for in the filter\n     * @return False if the element is definitively not in the filter, True is the element might be in the filter\n     * @example\n     * ```js\n     * const filter = new BloomFilter(15, 0.1);\n     * filter.add('foo');\n     * console.log(filter.has('foo')); // output: true\n     * console.log(filter.has('bar')); // output: false\n     * ```\n     */\n    has(element: HashableInput): boolean;\n    /**\n     * Get the current false positive rate (or error rate) of the filter\n     * @return The current false positive rate of the filter\n     * @example\n     * ```js\n     * const filter = new BloomFilter(15, 0.1);\n     * console.log(filter.rate()); // output: something around 0.1\n     * ```\n     */\n    rate(): number;\n    /**\n     * Check if another Bloom Filter is equal to this one\n     * @param  other - The filter to compare to this one\n     * @return True if they are equal, false otherwise\n     */\n    equals(other: BloomFilter): boolean;\n    export(): {\n        bitset: {\n            size: number;\n            content: string;\n        };\n        hashes: number;\n        size: number;\n    };\n    import(data: ReturnType<typeof this$1.export>): void;\n}\n\ndeclare type Handler = (...evts: any[]) => void;\ndeclare type MittEmitter<T> = {\n    on(type: T, handler: Handler): void;\n    off(type: T, handler: Handler): void;\n    emit(type: T, ...evts: any[]): void;\n};\n\ndeclare const routerEvents: readonly [\"routeChangeStart\", \"beforeHistoryChange\", \"routeChangeComplete\", \"routeChangeError\", \"hashChangeStart\", \"hashChangeComplete\"];\ndeclare type RouterEvent = typeof routerEvents[number];\n\ndeclare global {\n    interface Window {\n        __NEXT_DATA__: NEXT_DATA;\n    }\n}\ninterface RouteProperties {\n    shallow: boolean;\n}\ninterface TransitionOptions {\n    shallow?: boolean;\n    locale?: string | false;\n    scroll?: boolean;\n    unstable_skipClientCache?: boolean;\n}\ninterface NextHistoryState {\n    url: string;\n    as: string;\n    options: TransitionOptions;\n}\ndeclare type Url = UrlObject | string;\ndeclare type BaseRouter = {\n    route: string;\n    pathname: string;\n    query: ParsedUrlQuery;\n    asPath: string;\n    basePath: string;\n    locale?: string | undefined;\n    locales?: string[] | undefined;\n    defaultLocale?: string | undefined;\n    domainLocales?: DomainLocale[] | undefined;\n    isLocaleDomain: boolean;\n};\ndeclare type NextRouter = BaseRouter & Pick<Router$1, 'push' | 'replace' | 'reload' | 'back' | 'forward' | 'prefetch' | 'beforePopState' | 'events' | 'isFallback' | 'isReady' | 'isPreview'>;\ndeclare type PrefetchOptions = {\n    priority?: boolean;\n    locale?: string | false;\n    unstable_skipClientCache?: boolean;\n};\ndeclare type PrivateRouteInfo = (Omit<CompletePrivateRouteInfo, 'styleSheets'> & {\n    initial: true;\n}) | CompletePrivateRouteInfo;\ndeclare type CompletePrivateRouteInfo = {\n    Component: ComponentType;\n    styleSheets: StyleSheetTuple[];\n    __N_SSG?: boolean;\n    __N_SSP?: boolean;\n    props?: Record<string, any>;\n    err?: Error;\n    error?: any;\n    route?: string;\n    resolvedAs?: string;\n    query?: ParsedUrlQuery;\n};\ndeclare type AppProps = Pick<CompletePrivateRouteInfo, 'Component' | 'err'> & {\n    router: Router$1;\n} & Record<string, any>;\ndeclare type AppComponent = ComponentType<AppProps>;\ndeclare type Subscription = (data: PrivateRouteInfo, App: AppComponent, resetScroll: {\n    x: number;\n    y: number;\n} | null) => Promise<void>;\ndeclare type BeforePopStateCallback = (state: NextHistoryState) => boolean;\ndeclare type ComponentLoadCancel = (() => void) | null;\ndeclare type HistoryMethod = 'replaceState' | 'pushState';\ninterface FetchDataOutput {\n    dataHref: string;\n    json: Record<string, any> | null;\n    response: Response;\n    text: string;\n    cacheKey: string;\n}\ninterface NextDataCache {\n    [asPath: string]: Promise<FetchDataOutput>;\n}\ndeclare class Router$1 implements BaseRouter {\n    basePath: string;\n    /**\n     * Map of all components loaded in `Router`\n     */\n    components: {\n        [pathname: string]: PrivateRouteInfo;\n    };\n    sdc: NextDataCache;\n    sbc: NextDataCache;\n    sub: Subscription;\n    clc: ComponentLoadCancel;\n    pageLoader: PageLoader;\n    _bps: BeforePopStateCallback | undefined;\n    events: MittEmitter<RouterEvent>;\n    _wrapApp: (App: AppComponent) => any;\n    isSsr: boolean;\n    _inFlightRoute?: string | undefined;\n    _shallow?: boolean | undefined;\n    locales?: string[] | undefined;\n    defaultLocale?: string | undefined;\n    domainLocales?: DomainLocale[] | undefined;\n    isReady: boolean;\n    isLocaleDomain: boolean;\n    isFirstPopStateEvent: boolean;\n    _initialMatchesMiddlewarePromise: Promise<boolean>;\n    _bfl_s?: BloomFilter;\n    _bfl_d?: BloomFilter;\n    private state;\n    private _key;\n    static events: MittEmitter<RouterEvent>;\n    constructor(pathname: string, query: ParsedUrlQuery, as: string, { initialProps, pageLoader, App, wrapApp, Component, err, subscription, isFallback, locale, locales, defaultLocale, domainLocales, isPreview, }: {\n        subscription: Subscription;\n        initialProps: any;\n        pageLoader: any;\n        Component: ComponentType;\n        App: AppComponent;\n        wrapApp: (WrapAppComponent: AppComponent) => any;\n        err?: Error;\n        isFallback: boolean;\n        locale?: string;\n        locales?: string[];\n        defaultLocale?: string;\n        domainLocales?: DomainLocale[];\n        isPreview?: boolean;\n    });\n    onPopState: (e: PopStateEvent) => void;\n    reload(): void;\n    /**\n     * Go back in history\n     */\n    back(): void;\n    /**\n     * Go forward in history\n     */\n    forward(): void;\n    /**\n     * Performs a `pushState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    push(url: Url, as?: Url, options?: TransitionOptions): Promise<boolean>;\n    /**\n     * Performs a `replaceState` with arguments\n     * @param url of the route\n     * @param as masks `url` for the browser\n     * @param options object you can define `shallow` and other options\n     */\n    replace(url: Url, as?: Url, options?: TransitionOptions): Promise<boolean>;\n    _bfl(as: string, resolvedAs?: string, locale?: string | false, skipNavigate?: boolean): Promise<unknown>;\n    private change;\n    changeState(method: HistoryMethod, url: string, as: string, options?: TransitionOptions): void;\n    handleRouteInfoError(err: Error & {\n        code?: any;\n        cancelled?: boolean;\n    }, pathname: string, query: ParsedUrlQuery, as: string, routeProps: RouteProperties, loadErrorFail?: boolean): Promise<CompletePrivateRouteInfo>;\n    getRouteInfo({ route: requestedRoute, pathname, query, as, resolvedAs, routeProps, locale, hasMiddleware, isPreview, unstable_skipClientCache, isQueryUpdating, isMiddlewareRewrite, isNotFound, }: {\n        route: string;\n        pathname: string;\n        query: ParsedUrlQuery;\n        as: string;\n        resolvedAs: string;\n        hasMiddleware?: boolean;\n        routeProps: RouteProperties;\n        locale: string | undefined;\n        isPreview: boolean;\n        unstable_skipClientCache?: boolean;\n        isQueryUpdating?: boolean;\n        isMiddlewareRewrite?: boolean;\n        isNotFound?: boolean;\n    }): Promise<{\n        type: \"redirect-external\";\n        destination: string;\n    } | {\n        type: \"redirect-internal\";\n        newAs: string;\n        newUrl: string;\n    } | PrivateRouteInfo>;\n    private set;\n    /**\n     * Callback to execute before replacing router state\n     * @param cb callback to be executed\n     */\n    beforePopState(cb: BeforePopStateCallback): void;\n    onlyAHashChange(as: string): boolean;\n    scrollToHash(as: string): void;\n    urlIsNew(asPath: string): boolean;\n    /**\n     * Prefetch page code, you may wait for the data during page rendering.\n     * This feature only works in production!\n     * @param url the href of prefetched page\n     * @param asPath the as path of the prefetched page\n     */\n    prefetch(url: string, asPath?: string, options?: PrefetchOptions): Promise<void>;\n    fetchComponent(route: string): Promise<GoodPageCache>;\n    _getData<T>(fn: () => Promise<T>): Promise<T>;\n    _getFlightData(dataHref: string): Promise<{\n        data: string;\n    }>;\n    getInitialProps(Component: ComponentType, ctx: NextPageContext): Promise<Record<string, any>>;\n    get route(): string;\n    get pathname(): string;\n    get query(): ParsedUrlQuery;\n    get asPath(): string;\n    get locale(): string | undefined;\n    get isFallback(): boolean;\n    get isPreview(): boolean;\n}\n\ndeclare const COMPILER_NAMES: {\n    readonly client: \"client\";\n    readonly server: \"server\";\n    readonly edgeServer: \"edge-server\";\n};\n\ndeclare type NextComponentType<Context extends BaseContext = NextPageContext, InitialProps = {}, Props = {}> = ComponentType<Props> & {\n    /**\n     * Used for initial page load data population. Data returned from `getInitialProps` is serialized when server rendered.\n     * Make sure to return plain `Object` without using `Date`, `Map`, `Set`.\n     * @param context Context of `page`\n     */\n    getInitialProps?(context: Context): InitialProps | Promise<InitialProps>;\n};\ndeclare type DocumentType = NextComponentType<DocumentContext, DocumentInitialProps, DocumentProps>;\ndeclare type AppType<P = {}> = NextComponentType<AppContextType, P, AppPropsType<any, P>>;\ndeclare type AppTreeType = ComponentType<AppInitialProps & {\n    [name: string]: any;\n}>;\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\ndeclare const WEB_VITALS: readonly [\"CLS\", \"FCP\", \"FID\", \"INP\", \"LCP\", \"TTFB\"];\ndeclare type Enhancer<C> = (Component: C) => C;\ndeclare type ComponentsEnhancer = {\n    enhanceApp?: Enhancer<AppType>;\n    enhanceComponent?: Enhancer<NextComponentType>;\n} | Enhancer<NextComponentType>;\ndeclare type RenderPageResult = {\n    html: string;\n    head?: Array<JSX.Element | null>;\n};\ndeclare type RenderPage = (options?: ComponentsEnhancer) => DocumentInitialProps | Promise<DocumentInitialProps>;\ndeclare type BaseContext = {\n    res?: ServerResponse;\n    [k: string]: any;\n};\ndeclare type NEXT_DATA = {\n    props: Record<string, any>;\n    page: string;\n    query: ParsedUrlQuery;\n    buildId: string;\n    assetPrefix?: string;\n    runtimeConfig?: {\n        [key: string]: any;\n    };\n    nextExport?: boolean;\n    autoExport?: boolean;\n    isFallback?: boolean;\n    dynamicIds?: (string | number)[];\n    err?: Error & {\n        statusCode?: number;\n        source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer;\n    };\n    gsp?: boolean;\n    gssp?: boolean;\n    customServer?: boolean;\n    gip?: boolean;\n    appGip?: boolean;\n    locale?: string;\n    locales?: string[];\n    defaultLocale?: string;\n    domainLocales?: DomainLocale[];\n    scriptLoader?: any[];\n    isPreview?: boolean;\n    notFoundSrcPage?: string;\n};\n/**\n * `Next` context\n */\ninterface NextPageContext {\n    /**\n     * Error object if encountered during rendering\n     */\n    err?: (Error & {\n        statusCode?: number;\n    }) | null;\n    /**\n     * `HTTP` request object.\n     */\n    req?: IncomingMessage;\n    /**\n     * `HTTP` response object.\n     */\n    res?: ServerResponse;\n    /**\n     * Path section of `URL`.\n     */\n    pathname: string;\n    /**\n     * Query string section of `URL` parsed as an object.\n     */\n    query: ParsedUrlQuery;\n    /**\n     * `String` of the actual path including query.\n     */\n    asPath?: string;\n    /**\n     * The currently active locale\n     */\n    locale?: string;\n    /**\n     * All configured locales\n     */\n    locales?: string[];\n    /**\n     * The configured default locale\n     */\n    defaultLocale?: string;\n    /**\n     * `Component` the tree of the App to use if needing to render separately\n     */\n    AppTree: AppTreeType;\n}\ndeclare type AppContextType<Router extends NextRouter = NextRouter> = {\n    Component: NextComponentType<NextPageContext>;\n    AppTree: AppTreeType;\n    ctx: NextPageContext;\n    router: Router;\n};\ndeclare type AppInitialProps<PageProps = any> = {\n    pageProps: PageProps;\n};\ndeclare type AppPropsType<Router extends NextRouter = NextRouter, PageProps = {}> = AppInitialProps<PageProps> & {\n    Component: NextComponentType<NextPageContext, any, any>;\n    router: Router;\n    __N_SSG?: boolean;\n    __N_SSP?: boolean;\n};\ndeclare type DocumentContext = NextPageContext & {\n    renderPage: RenderPage;\n    defaultGetInitialProps(ctx: DocumentContext, options?: {\n        nonce?: string;\n    }): Promise<DocumentInitialProps>;\n};\ndeclare type DocumentInitialProps = RenderPageResult & {\n    styles?: React.ReactElement[] | React.ReactFragment | JSX.Element;\n};\ndeclare type DocumentProps = DocumentInitialProps & HtmlProps;\n/**\n * Next `API` route request\n */\ninterface NextApiRequest extends IncomingMessage {\n    /**\n     * Object of `query` values from url\n     */\n    query: Partial<{\n        [key: string]: string | string[];\n    }>;\n    /**\n     * Object of `cookies` from header\n     */\n    cookies: Partial<{\n        [key: string]: string;\n    }>;\n    body: any;\n    env: Env;\n    preview?: boolean;\n    /**\n     * Preview data set on the request, if any\n     * */\n    previewData?: PreviewData$1;\n}\n/**\n * Send body of response\n */\ndeclare type Send<T> = (body: T) => void;\n/**\n * Next `API` route response\n */\ndeclare type NextApiResponse<Data = any> = ServerResponse & {\n    /**\n     * Send data `any` data in response\n     */\n    send: Send<Data>;\n    /**\n     * Send data `json` data in response\n     */\n    json: Send<Data>;\n    status: (statusCode: number) => NextApiResponse<Data>;\n    redirect(url: string): NextApiResponse<Data>;\n    redirect(status: number, url: string): NextApiResponse<Data>;\n    /**\n     * Set preview data for Next.js' prerender mode\n     */\n    setPreviewData: (data: object | string, options?: {\n        /**\n         * Specifies the number (in seconds) for the preview session to last for.\n         * The given number will be converted to an integer by rounding down.\n         * By default, no maximum age is set and the preview session finishes\n         * when the client shuts down (browser is closed).\n         */\n        maxAge?: number;\n        /**\n         * Specifies the path for the preview session to work under. By default,\n         * the path is considered the \"default path\", i.e., any pages under \"/\".\n         */\n        path?: string;\n    }) => NextApiResponse<Data>;\n    /**\n     * Clear preview data for Next.js' prerender mode\n     */\n    clearPreviewData: (options?: {\n        path?: string;\n    }) => NextApiResponse<Data>;\n    /**\n     * Revalidate a specific page and regenerate it using On-Demand Incremental\n     * Static Regeneration.\n     * The path should be an actual path, not a rewritten path. E.g. for\n     * \"/blog/[slug]\" this should be \"/blog/post-1\".\n     * @link https://nextjs.org/docs/basic-features/data-fetching/incremental-static-regeneration#on-demand-revalidation\n     */\n    revalidate: (urlPath: string, opts?: {\n        unstable_onlyGenerated?: boolean;\n    }) => Promise<void>;\n};\n/**\n * Next `API` route handler\n */\ndeclare type NextApiHandler<T = any> = (req: NextApiRequest, res: NextApiResponse<T>) => unknown | Promise<unknown>;\ninterface CacheFs {\n    readFile(f: string): Promise<string>;\n    readFileSync(f: string): string;\n    writeFile(f: string, d: any): Promise<void>;\n    mkdir(dir: string): Promise<void | string>;\n    stat(f: string): Promise<{\n        mtime: Date;\n    }>;\n}\n\n/**\n * The result of matching a locale aware route.\n */\ninterface LocaleAnalysisResult {\n    /**\n     * The pathname without the locale prefix (if any).\n     */\n    pathname: string;\n    /**\n     * The detected locale. If no locale was detected, this will be `undefined`.\n     */\n    detectedLocale?: string;\n    /**\n     * True if the locale was inferred from the default locale.\n     */\n    inferredFromDefault: boolean;\n}\ndeclare type LocaleAnalysisOptions = {\n    /**\n     * When provided, it will be used as the default locale if the locale\n     * cannot be inferred from the pathname.\n     */\n    defaultLocale?: string;\n};\n/**\n * The I18NProvider is used to match locale aware routes, detect the locale from\n * the pathname and hostname and normalize the pathname by removing the locale\n * prefix.\n */\ndeclare class I18NProvider {\n    readonly config: Readonly<I18NConfig>;\n    private readonly lowerCaseLocales;\n    private readonly lowerCaseDomains?;\n    constructor(config: Readonly<I18NConfig>);\n    /**\n     * Detects the domain locale from the hostname and the detected locale if\n     * provided.\n     *\n     * @param hostname The hostname to detect the domain locale from, this must be lowercased.\n     * @param detectedLocale The detected locale to use if the hostname does not match.\n     * @returns The domain locale if found, `undefined` otherwise.\n     */\n    detectDomainLocale(hostname?: string, detectedLocale?: string): DomainLocale | undefined;\n    /**\n     * Pulls the pre-computed locale and inference results from the query\n     * object.\n     *\n     * @param pathname the pathname that could contain a locale prefix\n     * @param query the query object\n     * @returns the locale analysis result\n     */\n    fromQuery(pathname: string, query: NextParsedUrlQuery): LocaleAnalysisResult;\n    /**\n     * Analyzes the pathname for a locale and returns the pathname without it.\n     *\n     * @param pathname The pathname that could contain a locale prefix.\n     * @param options The options to use when matching the locale.\n     * @returns The matched locale and the pathname without the locale prefix\n     *          (if any).\n     */\n    analyze(pathname: string, options?: LocaleAnalysisOptions): LocaleAnalysisResult;\n}\n\ndeclare type RouteMatchResult = {\n    params?: Record<string, string | string[]>;\n};\ndeclare class RouteMatcher<D extends RouteDefinition = RouteDefinition> {\n    readonly definition: D;\n    private readonly dynamic?;\n    /**\n     * When set, this is an array of all the other matchers that are duplicates of\n     * this one. This is used by the managers to warn the users about possible\n     * duplicate matches on routes.\n     */\n    duplicated?: Array<RouteMatcher>;\n    constructor(definition: D);\n    /**\n     * Identity returns the identity part of the matcher. This is used to compare\n     * a unique matcher to another. This is also used when sorting dynamic routes,\n     * so it must contain the pathname part.\n     */\n    get identity(): string;\n    get isDynamic(): boolean;\n    match(pathname: string): RouteMatch<D> | null;\n    test(pathname: string): RouteMatchResult | null;\n}\n\ninterface RouteMatcherProvider<M extends RouteMatcher = RouteMatcher> {\n    matchers(): Promise<ReadonlyArray<M>>;\n}\n\ndeclare type MatchOptions = {\n    skipDynamic?: boolean;\n    /**\n     * If defined, this indicates to the matcher that the request should be\n     * treated as locale-aware. If this is undefined, it means that this\n     * application was not configured for additional locales.\n     */\n    i18n?: LocaleAnalysisResult | undefined;\n};\ninterface RouteMatcherManager {\n    /**\n     * Returns a promise that resolves when the matcher manager has finished\n     * reloading.\n     */\n    waitTillReady(): Promise<void>;\n    /**\n     * Pushes in a new matcher for this manager to manage. After all the\n     * providers have been pushed, the manager must be reloaded.\n     *\n     * @param provider the provider for this manager to also manage\n     */\n    push(provider: RouteMatcherProvider): void;\n    /**\n     * Reloads the matchers from the providers. This should be done after all the\n     * providers have been added or the underlying providers should be refreshed.\n     */\n    reload(): Promise<void>;\n    /**\n     * Tests the underlying matchers to find a match. It does not return the\n     * match.\n     *\n     * @param pathname the pathname to test for matches\n     * @param options the options for the testing\n     */\n    test(pathname: string, options: MatchOptions): Promise<boolean>;\n    /**\n     * Returns the first match for a given request.\n     *\n     * @param pathname the pathname to match against\n     * @param options the options for the matching\n     */\n    match(pathname: string, options: MatchOptions): Promise<RouteMatch | null>;\n    /**\n     * Returns a generator for each match for a given request. This should be\n     * consumed in a `for await (...)` loop, when finished, breaking or returning\n     * from the loop will terminate the matching operation.\n     *\n     * @param pathname the pathname to match against\n     * @param options the options for the matching\n     */\n    matchAll(pathname: string, options: MatchOptions): AsyncGenerator<RouteMatch, null, undefined>;\n}\n\ninterface RouteMatchFn {\n    (pathname: string | null | undefined): false | Params;\n}\ninterface Params {\n    [param: string]: any;\n}\n\ndeclare type RouteResult = {\n    finished: boolean;\n    pathname?: string;\n    query?: ParsedUrlQuery;\n};\ndeclare type RouteFn = (req: BaseNextRequest, res: BaseNextResponse, params: Params, parsedUrl: NextUrlWithParsedQuery, upgradeHead?: Buffer) => Promise<RouteResult> | RouteResult;\ndeclare type Route = {\n    match: RouteMatchFn;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n    type: string;\n    check?: boolean;\n    statusCode?: number;\n    name: string;\n    matchesBasePath?: true;\n    matchesLocale?: true;\n    matchesLocaleAPIRoutes?: true;\n    matchesTrailingSlash?: true;\n    internal?: true;\n    fn: RouteFn;\n};\ndeclare type RouterOptions = {\n    headers: ReadonlyArray<Route>;\n    fsRoutes: ReadonlyArray<Route>;\n    rewrites: {\n        beforeFiles: ReadonlyArray<Route>;\n        afterFiles: ReadonlyArray<Route>;\n        fallback: ReadonlyArray<Route>;\n    };\n    redirects: ReadonlyArray<Route>;\n    catchAllRoute: Route;\n    catchAllMiddleware: ReadonlyArray<Route>;\n    matchers: RouteMatcherManager;\n    useFileSystemPublicRoutes: boolean;\n    nextConfig: NextConfig;\n    i18nProvider?: I18NProvider;\n};\ndeclare class Router {\n    catchAllMiddleware: ReadonlyArray<Route>;\n    private readonly headers;\n    private readonly fsRoutes;\n    private readonly redirects;\n    private rewrites;\n    private readonly catchAllRoute;\n    private readonly matchers;\n    private readonly useFileSystemPublicRoutes;\n    private readonly nextConfig;\n    private readonly i18nProvider?;\n    private compiledRoutes;\n    private needsRecompilation;\n    constructor({ headers, fsRoutes, rewrites, redirects, catchAllRoute, catchAllMiddleware, matchers, useFileSystemPublicRoutes, nextConfig, i18nProvider, }: RouterOptions);\n    get basePath(): string;\n    /**\n     * True when the router has catch-all middleware routes configured.\n     */\n    get hasMiddleware(): boolean;\n    setCatchallMiddleware(catchAllMiddleware: ReadonlyArray<Route>): void;\n    setRewrites(rewrites: RouterOptions['rewrites']): void;\n    addFsRoute(fsRoute: Route): void;\n    private compileRoutes;\n    private checkFsRoutes;\n    execute(req: BaseNextRequest, res: BaseNextResponse, parsedUrl: NextUrlWithParsedQuery, upgradeHead?: Buffer): Promise<boolean>;\n}\n\ninterface FetchEventResult {\n    response: Response;\n    waitUntil: Promise<any>;\n}\n\n/**\n * Loads a given module for a given ID.\n */\ninterface ModuleLoader {\n    load<M = any>(id: string): M;\n}\n\ninterface EdgeFunctionDefinition {\n    env: string[];\n    files: string[];\n    name: string;\n    page: string;\n    matchers: MiddlewareMatcher[];\n    wasm?: AssetBinding[];\n    assets?: AssetBinding[];\n    regions?: string[] | string;\n}\ninterface MiddlewareManifest {\n    version: 2;\n    sortedMiddleware: string[];\n    middleware: {\n        [page: string]: EdgeFunctionDefinition;\n    };\n    functions: {\n        [page: string]: EdgeFunctionDefinition;\n    };\n}\n\ndeclare type SsgRoute = {\n    initialRevalidateSeconds: number | false;\n    srcRoute: string | null;\n    dataRoute: string | null;\n    initialStatus?: number;\n    initialHeaders?: Record<string, string>;\n};\ndeclare type DynamicSsgRoute = {\n    routeRegex: string;\n    fallback: string | null | false;\n    dataRoute: string | null;\n    dataRouteRegex: string | null;\n};\ndeclare type PrerenderManifest = {\n    version: 4;\n    routes: {\n        [route: string]: SsgRoute;\n    };\n    dynamicRoutes: {\n        [route: string]: DynamicSsgRoute;\n    };\n    notFoundRoutes: string[];\n    preview: __ApiPreviewProps;\n};\n\ndeclare type ContentTypeOption = string | undefined;\ndeclare type RenderResultMetadata = {\n    pageData?: any;\n    revalidate?: any;\n    staticBailoutInfo?: any;\n    devOnlyCacheBusterQueryString?: string;\n    isNotFound?: boolean;\n    isRedirect?: boolean;\n};\ndeclare class RenderResult {\n    private _result;\n    private _contentType;\n    private _metadata;\n    constructor(response: string | ReadableStream<Uint8Array> | null, { contentType, ...metadata }?: {\n        contentType?: ContentTypeOption;\n    } & RenderResultMetadata);\n    metadata(): RenderResultMetadata;\n    isNull(): boolean;\n    contentType(): ContentTypeOption;\n    toUnchunkedString(): string;\n    pipe(res: ServerResponse | Writable): Promise<void>;\n    isDynamic(): boolean;\n    static fromStatic(value: string): RenderResult;\n    static empty: RenderResult;\n}\n\ninterface ResponseCacheBase {\n    get(key: string | null, responseGenerator: ResponseGenerator, context: {\n        isOnDemandRevalidate?: boolean;\n        isPrefetch?: boolean;\n        incrementalCache: IncrementalCache$1;\n    }): Promise<ResponseCacheEntry | null>;\n}\ninterface CachedFetchValue {\n    kind: 'FETCH';\n    data: {\n        headers: {\n            [k: string]: string;\n        };\n        body: string;\n        status?: number;\n    };\n    revalidate: number;\n}\ninterface CachedRedirectValue {\n    kind: 'REDIRECT';\n    props: Object;\n}\ninterface CachedPageValue {\n    kind: 'PAGE';\n    html: RenderResult;\n    pageData: Object;\n}\ninterface CachedRouteValue {\n    kind: 'ROUTE';\n    body: Buffer;\n    status: number;\n    headers: OutgoingHttpHeaders;\n}\ninterface CachedImageValue {\n    kind: 'IMAGE';\n    etag: string;\n    buffer: Buffer;\n    extension: string;\n    isMiss?: boolean;\n    isStale?: boolean;\n}\ninterface IncrementalCachedPageValue {\n    kind: 'PAGE';\n    html: string;\n    pageData: Object;\n}\ndeclare type IncrementalCacheEntry = {\n    curRevalidate?: number | false;\n    revalidateAfter: number | false;\n    isStale?: boolean;\n    value: IncrementalCacheValue | null;\n};\ndeclare type IncrementalCacheValue = CachedRedirectValue | IncrementalCachedPageValue | CachedImageValue | CachedFetchValue | CachedRouteValue;\ndeclare type ResponseCacheValue = CachedRedirectValue | CachedPageValue | CachedImageValue | CachedRouteValue;\ndeclare type ResponseCacheEntry = {\n    revalidate?: number | false;\n    value: ResponseCacheValue | null;\n    isStale?: boolean;\n    isMiss?: boolean;\n};\ndeclare type ResponseGenerator = (hasResolved: boolean, hadCache: boolean) => Promise<ResponseCacheEntry | null>;\ndeclare type IncrementalCacheItem = {\n    revalidateAfter?: number | false;\n    curRevalidate?: number | false;\n    revalidate?: number | false;\n    value: IncrementalCacheValue | null;\n    isStale?: boolean;\n    isMiss?: boolean;\n} | null;\ninterface IncrementalCache$1 {\n    get: (key: string) => Promise<IncrementalCacheItem>;\n    set: (key: string, data: IncrementalCacheValue | null, revalidate?: number | false) => Promise<void>;\n}\n\ndeclare class ResponseCache {\n    pendingResponses: Map<string, Promise<ResponseCacheEntry | null>>;\n    previousCacheItem?: {\n        key: string;\n        entry: ResponseCacheEntry | null;\n        expiresAt: number;\n    };\n    minimalMode?: boolean;\n    constructor(minimalMode: boolean);\n    get(key: string | null, responseGenerator: ResponseGenerator, context: {\n        isOnDemandRevalidate?: boolean;\n        isPrefetch?: boolean;\n        incrementalCache: IncrementalCache$1;\n    }): Promise<ResponseCacheEntry | null>;\n}\n\ninterface CacheHandlerContext {\n    fs?: CacheFs;\n    dev?: boolean;\n    flushToDisk?: boolean;\n    serverDistDir?: string;\n    maxMemoryCacheSize?: number;\n    _appDir: boolean;\n    _requestHeaders: IncrementalCache['requestHeaders'];\n    fetchCacheKeyPrefix?: string;\n}\ninterface CacheHandlerValue {\n    lastModified?: number;\n    age?: number;\n    cacheState?: string;\n    value: IncrementalCacheValue | null;\n}\ndeclare class CacheHandler {\n    constructor(_ctx: CacheHandlerContext);\n    get(_key: string, _fetchCache?: boolean, _originUrl?: string, _fetchIdx?: number): Promise<CacheHandlerValue | null>;\n    set(_key: string, _data: IncrementalCacheValue | null, _fetchCache?: boolean, _originUrl?: string, _fetchIdx?: number): Promise<void>;\n}\ndeclare class IncrementalCache {\n    dev?: boolean;\n    cacheHandler?: CacheHandler;\n    prerenderManifest: PrerenderManifest;\n    requestHeaders: Record<string, undefined | string | string[]>;\n    minimalMode?: boolean;\n    fetchCacheKeyPrefix?: string;\n    constructor({ fs, dev, appDir, flushToDisk, fetchCache, minimalMode, serverDistDir, requestHeaders, maxMemoryCacheSize, getPrerenderManifest, fetchCacheKeyPrefix, CurCacheHandler, }: {\n        fs?: CacheFs;\n        dev: boolean;\n        appDir?: boolean;\n        fetchCache?: boolean;\n        minimalMode?: boolean;\n        serverDistDir?: string;\n        flushToDisk?: boolean;\n        requestHeaders: IncrementalCache['requestHeaders'];\n        maxMemoryCacheSize?: number;\n        getPrerenderManifest: () => PrerenderManifest;\n        fetchCacheKeyPrefix?: string;\n        CurCacheHandler?: typeof CacheHandler;\n    });\n    private calculateRevalidate;\n    _getPathname(pathname: string, fetchCache?: boolean): string;\n    fetchCacheKey(url: string, init?: RequestInit | Request): Promise<string>;\n    get(pathname: string, fetchCache?: boolean, revalidate?: number, originUrl?: string, fetchIdx?: number): Promise<IncrementalCacheEntry | null>;\n    set(pathname: string, data: IncrementalCacheValue | null, revalidateSeconds?: number | false, fetchCache?: boolean, originUrl?: string, fetchIdx?: number): Promise<void>;\n}\n\ninterface StaticGenerationStore {\n    readonly isStaticGeneration: boolean;\n    readonly pathname: string;\n    readonly incrementalCache?: IncrementalCache;\n    readonly isRevalidate?: boolean;\n    readonly isOnDemandRevalidate?: boolean;\n    readonly isPrerendering?: boolean;\n    forceDynamic?: boolean;\n    fetchCache?: 'only-cache' | 'force-cache' | 'force-no-store' | 'default-no-store' | 'only-no-store';\n    revalidate?: false | number;\n    forceStatic?: boolean;\n    dynamicShouldError?: boolean;\n    pendingRevalidates?: Promise<any>[];\n    dynamicUsageDescription?: string;\n    dynamicUsageStack?: string;\n    nextFetchId?: number;\n}\n\n/**\n * RouteHandlerContext is the base context for a route handler.\n */\ninterface RouteModuleHandleContext {\n    /**\n     * Any matched parameters for the request. This is only defined for dynamic\n     * routes.\n     */\n    params: Record<string, string | string[]> | undefined;\n}\n\ndeclare type StaticGenerationContext = {\n    pathname: string;\n    renderOpts: {\n        incrementalCache?: IncrementalCache;\n        supportsDynamicHTML: boolean;\n        isRevalidate?: boolean;\n        isOnDemandRevalidate?: boolean;\n        isBot?: boolean;\n        nextExport?: boolean;\n        fetchCache?: StaticGenerationStore['fetchCache'];\n    };\n};\n\n/**\n * AppRouteRouteHandlerContext is the context that is passed to the route\n * handler for app routes.\n */\ninterface AppRouteRouteHandlerContext extends RouteModuleHandleContext {\n    staticGenerationContext: StaticGenerationContext['renderOpts'];\n}\n\n/**\n * RouteHandlerManager is a manager for route handlers.\n */\ndeclare type RouteHandlerManagerContext = AppRouteRouteHandlerContext;\ndeclare class RouteHandlerManager {\n    private readonly moduleLoader;\n    constructor(moduleLoader?: ModuleLoader);\n    handle(match: RouteMatch, req: BaseNextRequest, context: RouteHandlerManagerContext): Promise<Response | undefined>;\n}\n\ninterface ImageParamsResult {\n    href: string;\n    isAbsolute: boolean;\n    isStatic: boolean;\n    width: number;\n    quality: number;\n    mimeType: string;\n    sizes: number[];\n    minimumCacheTTL: number;\n}\n\ndeclare let result: undefined | {\n    port: number;\n    hostname: string;\n};\ndeclare function clearModuleContext(target: string, content: string): void;\ndeclare function deleteAppClientCache(): void;\ndeclare function deleteCache(filePath: string): void;\ndeclare function initialize(opts: {\n    dir: string;\n    port: number;\n    dev: boolean;\n    hostname?: string;\n    workerType: 'router' | 'render';\n    keepAliveTimeout?: number;\n}): Promise<NonNullable<typeof result>>;\n\ndeclare type PagesManifest = {\n    [page: string]: string;\n};\n\ndeclare type PayloadOptions = {\n    private: true;\n} | {\n    private: boolean;\n    stateful: true;\n} | {\n    private: boolean;\n    stateful: false;\n    revalidate: number | false;\n};\n\ndeclare type Req = IncomingMessage & {\n    [NEXT_REQUEST_META]?: RequestMeta;\n    cookies?: NextApiRequestCookies;\n};\ndeclare class NodeNextRequest extends BaseNextRequest<Readable> {\n    private _req;\n    headers: http.IncomingHttpHeaders;\n    [NEXT_REQUEST_META]: RequestMeta;\n    get originalRequest(): Req;\n    set originalRequest(value: Req);\n    constructor(_req: Req);\n    parseBody(limit: SizeLimit$1): Promise<any>;\n}\ndeclare class NodeNextResponse extends BaseNextResponse<Writable> {\n    private _res;\n    private textBody;\n    [SYMBOL_CLEARED_COOKIES]?: boolean;\n    get originalResponse(): ServerResponse & {\n        [SYMBOL_CLEARED_COOKIES]?: boolean | undefined;\n    };\n    constructor(_res: ServerResponse & {\n        [SYMBOL_CLEARED_COOKIES]?: boolean;\n    });\n    get sent(): boolean;\n    get statusCode(): number;\n    set statusCode(value: number);\n    get statusMessage(): string;\n    set statusMessage(value: string);\n    setHeader(name: string, value: string | string[]): this;\n    getHeaderValues(name: string): string[] | undefined;\n    hasHeader(name: string): boolean;\n    getHeader(name: string): string | undefined;\n    getHeaders(): OutgoingHttpHeaders$1;\n    appendHeader(name: string, value: string): this;\n    body(value: string): this;\n    send(): void;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Webpack module id\n */\ndeclare type ModuleId = string | number;\ndeclare type ManifestChunks = Array<`${string}:${string}` | string>;\ninterface ManifestNode {\n    [moduleExport: string]: {\n        /**\n         * Webpack module id\n         */\n        id: ModuleId;\n        /**\n         * Export name\n         */\n        name: string;\n        /**\n         * Chunks for the module. JS and CSS.\n         */\n        chunks: ManifestChunks;\n        /**\n         * If chunk contains async module\n         */\n        async?: boolean;\n    };\n}\ndeclare type ClientReferenceManifest = {\n    clientModules: ManifestNode;\n    ssrModuleMapping: {\n        [moduleId: string]: ManifestNode;\n    };\n    edgeSSRModuleMapping: {\n        [moduleId: string]: ManifestNode;\n    };\n    cssFiles: {\n        [entryPathWithoutExtension: string]: string[];\n    };\n};\n\ndeclare type ManifestItem = {\n    id: number | string;\n    files: string[];\n};\ndeclare type ReactLoadableManifest = {\n    [moduleId: string]: ManifestItem;\n};\ndeclare type LoadComponentsReturnType = {\n    Component: NextComponentType;\n    pageConfig: PageConfig$1;\n    buildManifest: BuildManifest;\n    subresourceIntegrityManifest?: Record<string, string>;\n    reactLoadableManifest: ReactLoadableManifest;\n    clientReferenceManifest?: ClientReferenceManifest;\n    serverActionsManifest?: any;\n    Document: DocumentType;\n    App: AppType;\n    getStaticProps?: GetStaticProps$1;\n    getStaticPaths?: GetStaticPaths$1;\n    getServerSideProps?: GetServerSideProps$1;\n    ComponentMod: any;\n    isAppPath?: boolean;\n    pathname: string;\n};\n\ndeclare type RenderOptsPartial = {\n    buildId: string;\n    canonicalBase: string;\n    runtimeConfig?: {\n        [key: string]: any;\n    };\n    assetPrefix?: string;\n    err?: Error | null;\n    nextExport?: boolean;\n    dev?: boolean;\n    ampPath?: string;\n    ErrorDebug?: React$1.ComponentType<{\n        error: Error;\n    }>;\n    ampValidator?: (html: string, pathname: string) => Promise<void>;\n    ampSkipValidation?: boolean;\n    ampOptimizerConfig?: {\n        [key: string]: any;\n    };\n    isDataReq?: boolean;\n    params?: ParsedUrlQuery;\n    previewProps: __ApiPreviewProps;\n    basePath: string;\n    unstable_runtimeJS?: false;\n    unstable_JsPreload?: false;\n    optimizeFonts: FontConfig;\n    fontManifest?: FontManifest;\n    optimizeCss: any;\n    nextConfigOutput?: 'standalone' | 'export';\n    nextScriptWorkers: any;\n    devOnlyCacheBusterQueryString?: string;\n    resolvedUrl?: string;\n    resolvedAsPath?: string;\n    clientReferenceManifest?: ClientReferenceManifest;\n    serverCSSManifest?: any;\n    nextFontManifest?: NextFontManifest;\n    distDir?: string;\n    locale?: string;\n    locales?: string[];\n    defaultLocale?: string;\n    domainLocales?: DomainLocale[];\n    disableOptimizedLoading?: boolean;\n    supportsDynamicHTML: boolean;\n    isBot?: boolean;\n    runtime?: ServerRuntime$1;\n    serverComponents?: boolean;\n    customServer?: boolean;\n    crossOrigin?: string;\n    images: ImageConfigComplete;\n    largePageDataBytes?: number;\n    isOnDemandRevalidate?: boolean;\n    strictNextHead: boolean;\n};\ndeclare type RenderOpts = LoadComponentsReturnType & RenderOptsPartial;\n\ninterface ParsedUrl {\n    hash: string;\n    hostname?: string | null;\n    href: string;\n    pathname: string;\n    port?: string | null;\n    protocol?: string | null;\n    query: ParsedUrlQuery;\n    search: string;\n}\n\ninterface MiddlewareRouteMatch {\n    (pathname: string | null | undefined, request: BaseNextRequest, query: Params): boolean;\n}\n\ninterface Normalizer {\n    normalize(pathname: string): string;\n}\n\n/**\n * Normalizes the pathname by removing the locale prefix if any.\n */\ndeclare class LocaleRouteNormalizer implements Normalizer {\n    private readonly provider;\n    constructor(provider: I18NProvider);\n    /**\n     * Normalizes the pathname by removing the locale prefix if any.\n     *\n     * @param pathname The pathname to normalize.\n     * @returns The pathname without the locale prefix (if any).\n     */\n    normalize(pathname: string): string;\n}\n\ndeclare type FindComponentsResult = {\n    components: LoadComponentsReturnType;\n    query: NextParsedUrlQuery;\n};\ninterface MiddlewareRoutingItem {\n    page: string;\n    match: MiddlewareRouteMatch;\n    matchers?: MiddlewareMatcher[];\n}\ninterface Options$1 {\n    /**\n     * Object containing the configuration next.config.js\n     */\n    conf: NextConfig;\n    /**\n     * Set to false when the server was created by Next.js\n     */\n    customServer?: boolean;\n    /**\n     * Tells if Next.js is running in dev mode\n     */\n    dev?: boolean;\n    /**\n     * Where the Next project is located\n     */\n    dir?: string;\n    /**\n     * Tells if Next.js is at the platform-level\n     */\n    minimalMode?: boolean;\n    /**\n     * Hide error messages containing server information\n     */\n    quiet?: boolean;\n    /**\n     * The hostname the server is running behind\n     */\n    hostname?: string;\n    /**\n     * The port the server is running behind\n     */\n    port?: number;\n    /**\n     * The HTTP Server that Next.js is running behind\n     */\n    httpServer?: http.Server;\n    _routerWorker?: boolean;\n    _renderWorker?: boolean;\n    isNodeDebugging?: 'brk' | boolean;\n}\ninterface BaseRequestHandler {\n    (req: BaseNextRequest, res: BaseNextResponse, parsedUrl?: NextUrlWithParsedQuery | undefined): Promise<void>;\n}\ndeclare type RequestContext = {\n    req: BaseNextRequest;\n    res: BaseNextResponse;\n    pathname: string;\n    query: NextParsedUrlQuery;\n    renderOpts: RenderOptsPartial;\n};\ndeclare type ResponsePayload = {\n    type: 'html' | 'json' | 'rsc';\n    body: RenderResult;\n    revalidateOptions?: any;\n};\ndeclare abstract class Server<ServerOptions extends Options$1 = Options$1> {\n    protected readonly dir: string;\n    protected readonly quiet: boolean;\n    protected readonly nextConfig: NextConfigComplete;\n    protected readonly distDir: string;\n    protected readonly publicDir: string;\n    protected readonly hasStaticDir: boolean;\n    protected readonly hasAppDir: boolean;\n    protected readonly pagesManifest?: PagesManifest;\n    protected readonly appPathsManifest?: PagesManifest;\n    protected readonly buildId: string;\n    protected readonly minimalMode: boolean;\n    protected readonly renderOpts: {\n        poweredByHeader: boolean;\n        buildId: string;\n        generateEtags: boolean;\n        runtimeConfig?: {\n            [key: string]: any;\n        };\n        assetPrefix?: string;\n        canonicalBase: string;\n        dev?: boolean;\n        previewProps: __ApiPreviewProps;\n        customServer?: boolean;\n        ampOptimizerConfig?: {\n            [key: string]: any;\n        };\n        basePath: string;\n        optimizeFonts: FontConfig;\n        images: ImageConfigComplete;\n        fontManifest?: FontManifest;\n        disableOptimizedLoading?: boolean;\n        optimizeCss: any;\n        nextConfigOutput: 'standalone' | 'export';\n        nextScriptWorkers: any;\n        locale?: string;\n        locales?: string[];\n        defaultLocale?: string;\n        domainLocales?: DomainLocale[];\n        distDir: string;\n        runtime?: ServerRuntime$1;\n        serverComponents?: boolean;\n        crossOrigin?: string;\n        supportsDynamicHTML?: boolean;\n        isBot?: boolean;\n        clientReferenceManifest?: ClientReferenceManifest;\n        serverCSSManifest?: any;\n        serverActionsManifest?: any;\n        nextFontManifest?: NextFontManifest;\n        renderServerComponentData?: boolean;\n        serverComponentProps?: any;\n        largePageDataBytes?: number;\n        appDirDevErrorLogger?: (err: any) => Promise<void>;\n        strictNextHead: boolean;\n    };\n    protected serverOptions: ServerOptions;\n    private responseCache;\n    protected router: Router;\n    protected appPathRoutes?: Record<string, string[]>;\n    protected customRoutes: CustomRoutes;\n    protected clientReferenceManifest?: ClientReferenceManifest;\n    protected serverCSSManifest?: any;\n    protected nextFontManifest?: NextFontManifest;\n    readonly hostname?: string;\n    readonly port?: number;\n    protected abstract getPublicDir(): string;\n    protected abstract getHasStaticDir(): boolean;\n    protected abstract getHasAppDir(dev: boolean): boolean;\n    protected abstract getPagesManifest(): PagesManifest | undefined;\n    protected abstract getAppPathsManifest(): PagesManifest | undefined;\n    protected abstract getBuildId(): string;\n    protected abstract getFilesystemPaths(): Set<string>;\n    protected abstract findPageComponents(params: {\n        pathname: string;\n        query: NextParsedUrlQuery;\n        params: Params;\n        isAppPath: boolean;\n        sriEnabled?: boolean;\n        appPaths?: string[] | null;\n        shouldEnsure: boolean;\n    }): Promise<FindComponentsResult | null>;\n    protected abstract getFontManifest(): FontManifest | undefined;\n    protected abstract getPrerenderManifest(): PrerenderManifest;\n    protected abstract getServerComponentManifest(): any;\n    protected abstract getServerCSSManifest(): any;\n    protected abstract getNextFontManifest(): NextFontManifest | undefined;\n    protected abstract attachRequestMeta(req: BaseNextRequest, parsedUrl: NextUrlWithParsedQuery): void;\n    protected abstract getFallback(page: string): Promise<string>;\n    protected abstract getCustomRoutes(): CustomRoutes;\n    protected abstract hasPage(pathname: string): Promise<boolean>;\n    protected abstract generateRoutes(dev?: boolean): RouterOptions;\n    protected abstract sendRenderResult(req: BaseNextRequest, res: BaseNextResponse, options: {\n        result: RenderResult;\n        type: 'html' | 'json' | 'rsc';\n        generateEtags: boolean;\n        poweredByHeader: boolean;\n        options?: PayloadOptions;\n    }): Promise<void>;\n    protected abstract runApi(req: BaseNextRequest, res: BaseNextResponse, query: ParsedUrlQuery, params: Params | undefined, page: string, builtPagePath: string): Promise<boolean>;\n    protected abstract renderHTML(req: BaseNextRequest, res: BaseNextResponse, pathname: string, query: NextParsedUrlQuery, renderOpts: RenderOpts): Promise<RenderResult>;\n    protected abstract handleCompression(req: BaseNextRequest, res: BaseNextResponse): void;\n    protected abstract getIncrementalCache(options: {\n        requestHeaders: Record<string, undefined | string | string[]>;\n    }): IncrementalCache;\n    protected abstract getResponseCache(options: {\n        dev: boolean;\n    }): ResponseCacheBase;\n    protected abstract loadEnvConfig(params: {\n        dev: boolean;\n        forceReload?: boolean;\n    }): void;\n    readonly matchers: RouteMatcherManager;\n    protected readonly handlers: RouteHandlerManager;\n    protected readonly i18nProvider?: I18NProvider;\n    protected readonly localeNormalizer?: LocaleRouteNormalizer;\n    protected readonly isRouterWorker?: boolean;\n    protected readonly isRenderWorker?: boolean;\n    constructor(options: ServerOptions);\n    protected getRoutes(): {\n        matchers: RouteMatcherManager;\n        handlers: RouteHandlerManager;\n    };\n    logError(err: Error): void;\n    handleRequest(req: BaseNextRequest, res: BaseNextResponse, parsedUrl?: NextUrlWithParsedQuery): Promise<void>;\n    private handleRequestImpl;\n    getRequestHandler(): BaseRequestHandler;\n    protected handleUpgrade(_req: BaseNextRequest, _socket: any, _head?: any): Promise<void>;\n    setAssetPrefix(prefix?: string): void;\n    protected preparedPromise: Promise<void> | null;\n    /**\n     * Runs async initialization of server.\n     * It is idempotent, won't fire underlying initialization more than once.\n     */\n    prepare(): Promise<void>;\n    protected prepareImpl(): Promise<void>;\n    protected close(): Promise<void>;\n    protected getPreviewProps(): __ApiPreviewProps;\n    protected _beforeCatchAllRender(_req: BaseNextRequest, _res: BaseNextResponse, _params: Params, _parsedUrl: UrlWithParsedQuery): Promise<boolean>;\n    protected getAppPathRoutes(): Record<string, string[]>;\n    protected run(req: BaseNextRequest, res: BaseNextResponse, parsedUrl: UrlWithParsedQuery): Promise<void>;\n    private runImpl;\n    private pipe;\n    private pipeImpl;\n    private getStaticHTML;\n    render(req: BaseNextRequest, res: BaseNextResponse, pathname: string, query?: NextParsedUrlQuery, parsedUrl?: NextUrlWithParsedQuery, internalRender?: boolean): Promise<void>;\n    private renderImpl;\n    protected getStaticPaths({ pathname, }: {\n        pathname: string;\n        requestHeaders: IncrementalCache['requestHeaders'];\n        originalAppPath?: string;\n    }): Promise<{\n        staticPaths?: string[];\n        fallbackMode?: 'static' | 'blocking' | false;\n    }>;\n    private renderToResponseWithComponents;\n    private renderToResponseWithComponentsImpl;\n    private stripNextDataPath;\n    protected getOriginalAppPaths(route: string): string[] | null;\n    protected renderPageComponent(ctx: RequestContext, bubbleNoFallback: boolean): Promise<false | ResponsePayload | null>;\n    private renderToResponse;\n    private renderToResponseImpl;\n    renderToHTML(req: BaseNextRequest, res: BaseNextResponse, pathname: string, query?: ParsedUrlQuery): Promise<string | null>;\n    private renderToHTMLImpl;\n    renderError(err: Error | null, req: BaseNextRequest, res: BaseNextResponse, pathname: string, query?: NextParsedUrlQuery, setHeaders?: boolean): Promise<void>;\n    private renderErrorImpl;\n    private customErrorNo404Warn;\n    private renderErrorToResponse;\n    private renderErrorToResponseImpl;\n    renderErrorToHTML(err: Error | null, req: BaseNextRequest, res: BaseNextResponse, pathname: string, query?: ParsedUrlQuery): Promise<string | null>;\n    protected getFallbackErrorComponents(): Promise<LoadComponentsReturnType | null>;\n    render404(req: BaseNextRequest, res: BaseNextResponse, parsedUrl?: Pick<NextUrlWithParsedQuery, 'pathname' | 'query'>, setHeaders?: boolean): Promise<void>;\n}\n\ninterface LocaleRouteDefinition<K extends RouteKind = RouteKind> extends RouteDefinition<K> {\n    /**\n     * When defined it means that this route is locale aware. When undefined,\n     * it means no special handling has to occur to process locales.\n     */\n    i18n?: {\n        /**\n         * Describes the locale for the route. If this is undefined, then it\n         * indicates that this route can handle _any_ locale.\n         */\n        locale?: string;\n    };\n}\n\ninterface PagesAPIRouteDefinition extends LocaleRouteDefinition<RouteKind.PAGES_API> {\n}\n\ninterface PagesAPIRouteMatch extends RouteMatch<PagesAPIRouteDefinition> {\n}\n\ninterface NodeRequestHandler {\n    (req: IncomingMessage | BaseNextRequest, res: ServerResponse | BaseNextResponse, parsedUrl?: NextUrlWithParsedQuery | undefined): Promise<void>;\n}\ndeclare type RenderWorker = Worker & {\n    initialize: typeof initialize;\n    deleteCache: typeof deleteCache;\n    deleteAppClientCache: typeof deleteAppClientCache;\n    clearModuleContext: typeof clearModuleContext;\n};\ndeclare class NextNodeServer extends Server {\n    private imageResponseCache?;\n    private compression?;\n    protected renderWorkersPromises?: Promise<void>;\n    protected renderWorkers?: {\n        middleware?: RenderWorker;\n        pages?: RenderWorker;\n        app?: RenderWorker;\n    };\n    protected renderWorkerOpts?: Parameters<typeof initialize>[0];\n    protected dynamicRoutes?: {\n        match: RouteMatchFn;\n        page: string;\n        re: RegExp;\n    }[];\n    constructor(options: Options$1);\n    protected prepareImpl(): Promise<void>;\n    protected loadEnvConfig({ dev, forceReload, silent, }: {\n        dev: boolean;\n        forceReload?: boolean;\n        silent?: boolean;\n    }): void;\n    protected getIncrementalCache({ requestHeaders, }: {\n        requestHeaders: IncrementalCache['requestHeaders'];\n    }): IncrementalCache;\n    protected getResponseCache(): ResponseCache;\n    protected getPublicDir(): string;\n    protected getHasStaticDir(): boolean;\n    protected getPagesManifest(): PagesManifest | undefined;\n    protected getAppPathsManifest(): PagesManifest | undefined;\n    protected hasPage(pathname: string): Promise<boolean>;\n    protected getBuildId(): string;\n    protected getCustomRoutes(): CustomRoutes;\n    protected generateImageRoutes(): Route[];\n    protected getHasAppDir(dev: boolean): boolean;\n    protected generateStaticRoutes(): Route[];\n    protected setImmutableAssetCacheControl(res: BaseNextResponse): void;\n    protected generateFsStaticRoutes(): Route[];\n    protected generatePublicRoutes(): Route[];\n    private _validFilesystemPathSet;\n    protected getFilesystemPaths(): Set<string>;\n    protected sendRenderResult(req: NodeNextRequest, res: NodeNextResponse, options: {\n        result: RenderResult;\n        type: 'html' | 'json';\n        generateEtags: boolean;\n        poweredByHeader: boolean;\n        options?: PayloadOptions | undefined;\n    }): Promise<void>;\n    protected sendStatic(req: NodeNextRequest, res: NodeNextResponse, path: string): Promise<void>;\n    protected handleCompression(req: NodeNextRequest, res: NodeNextResponse): void;\n    protected handleUpgrade(req: NodeNextRequest, socket: any, head: any): Promise<void>;\n    protected proxyRequest(req: NodeNextRequest, res: NodeNextResponse, parsedUrl: ParsedUrl, upgradeHead?: any): Promise<{\n        finished: boolean;\n    }>;\n    protected runApi(req: BaseNextRequest | NodeNextRequest, res: BaseNextResponse | NodeNextResponse, query: ParsedUrlQuery, params: Params | undefined, page: string, builtPagePath: string): Promise<boolean>;\n    protected renderHTML(req: NodeNextRequest, res: NodeNextResponse, pathname: string, query: NextParsedUrlQuery, renderOpts: RenderOpts): Promise<RenderResult>;\n    private renderHTMLImpl;\n    protected streamResponseChunk(res: NodeNextResponse, chunk: any): void;\n    protected imageOptimizer(req: NodeNextRequest, res: NodeNextResponse, paramsResult: ImageParamsResult): Promise<{\n        buffer: Buffer;\n        contentType: string;\n        maxAge: number;\n    }>;\n    protected getPagePath(pathname: string, locales?: string[]): string;\n    protected renderPageComponent(ctx: RequestContext, bubbleNoFallback: boolean): Promise<false | {\n        type: \"html\" | \"json\" | \"rsc\";\n        body: RenderResult;\n        revalidateOptions?: any;\n    } | null>;\n    protected findPageComponents({ pathname, query, params, isAppPath, }: {\n        pathname: string;\n        query: NextParsedUrlQuery;\n        params: Params | null;\n        isAppPath: boolean;\n    }): Promise<FindComponentsResult | null>;\n    private findPageComponentsImpl;\n    protected getFontManifest(): FontManifest;\n    protected getServerComponentManifest(): any;\n    protected getServerCSSManifest(): any;\n    protected getNextFontManifest(): any;\n    protected getFallback(page: string): Promise<string>;\n    protected generateRoutes(dev?: boolean): RouterOptions;\n    /**\n     * Resolves `API` request, in development builds on demand\n     * @param req http request\n     * @param res http response\n     * @param pathname path of request\n     */\n    protected handleApiRequest(req: BaseNextRequest, res: BaseNextResponse, query: ParsedUrlQuery, match: PagesAPIRouteMatch): Promise<boolean>;\n    protected getCacheFilesystem(): CacheFs;\n    private normalizeReq;\n    private normalizeRes;\n    getRequestHandler(): NodeRequestHandler;\n    render(req: BaseNextRequest | IncomingMessage, res: BaseNextResponse | ServerResponse, pathname: string, query?: NextParsedUrlQuery, parsedUrl?: NextUrlWithParsedQuery, internal?: boolean): Promise<void>;\n    renderToHTML(req: BaseNextRequest | IncomingMessage, res: BaseNextResponse | ServerResponse, pathname: string, query?: ParsedUrlQuery): Promise<string | null>;\n    renderError(err: Error | null, req: BaseNextRequest | IncomingMessage, res: BaseNextResponse | ServerResponse, pathname: string, query?: NextParsedUrlQuery, setHeaders?: boolean): Promise<void>;\n    renderErrorToHTML(err: Error | null, req: BaseNextRequest | IncomingMessage, res: BaseNextResponse | ServerResponse, pathname: string, query?: ParsedUrlQuery): Promise<string | null>;\n    render404(req: BaseNextRequest | IncomingMessage, res: BaseNextResponse | ServerResponse, parsedUrl?: NextUrlWithParsedQuery, setHeaders?: boolean): Promise<void>;\n    serveStatic(req: BaseNextRequest | IncomingMessage, res: BaseNextResponse | ServerResponse, path: string, parsedUrl?: UrlWithParsedQuery): Promise<void>;\n    protected getStaticRoutes(): Route[];\n    protected isServableUrl(untrustedFileUrl: string): boolean;\n    protected generateRewrites({ restrictedRedirectPaths, }: {\n        restrictedRedirectPaths: string[];\n    }): {\n        beforeFiles: Route[];\n        afterFiles: Route[];\n        fallback: Route[];\n    };\n    protected getMiddlewareManifest(): MiddlewareManifest | null;\n    /** Returns the middleware routing item if there is one. */\n    protected getMiddleware(): MiddlewareRoutingItem | undefined;\n    protected getEdgeFunctionsPages(): string[];\n    /**\n     * Get information for the edge function located in the provided page\n     * folder. If the edge function info can't be found it will throw\n     * an error.\n     */\n    protected getEdgeFunctionInfo(params: {\n        page: string;\n        /** Whether we should look for a middleware or not */\n        middleware: boolean;\n    }): {\n        name: string;\n        paths: string[];\n        env: string[];\n        wasm: {\n            filePath: string;\n            name: string;\n        }[];\n        assets: {\n            filePath: string;\n            name: string;\n        }[];\n    } | null;\n    /**\n     * Checks if a middleware exists. This method is useful for the development\n     * server where we need to check the filesystem. Here we just check the\n     * middleware manifest.\n     */\n    protected hasMiddleware(pathname: string): Promise<boolean>;\n    /**\n     * A placeholder for a function to be defined in the development server.\n     * It will make sure that the root middleware or an edge function has been compiled\n     * so that we can run it.\n     */\n    protected ensureMiddleware(): Promise<void>;\n    protected ensureEdgeFunction(_params: {\n        page: string;\n        appPaths: string[] | null;\n    }): Promise<void>;\n    /**\n     * This method gets all middleware matchers and execute them when the request\n     * matches. It will make sure that each middleware exists and is compiled and\n     * ready to be invoked. The development server will decorate it to add warns\n     * and errors with rich traces.\n     */\n    protected runMiddleware(params: {\n        request: BaseNextRequest;\n        response: BaseNextResponse;\n        parsedUrl: ParsedUrl;\n        parsed: UrlWithParsedQuery;\n        onWarning?: (warning: Error) => void;\n    }): Promise<FetchEventResult | {\n        finished: boolean;\n    }>;\n    protected generateCatchAllMiddlewareRoute(devReady?: boolean): Route[];\n    private _cachedPreviewManifest;\n    protected getPrerenderManifest(): PrerenderManifest;\n    protected getRoutesManifest(): any;\n    protected attachRequestMeta(req: BaseNextRequest, parsedUrl: NextUrlWithParsedQuery): void;\n    protected runEdgeFunction(params: {\n        req: BaseNextRequest | NodeNextRequest;\n        res: BaseNextResponse | NodeNextResponse;\n        query: ParsedUrlQuery;\n        params: Params | undefined;\n        page: string;\n        appPaths: string[] | null;\n        match?: RouteMatch;\n        onWarning?: (warning: Error) => void;\n    }): Promise<FetchEventResult | null>;\n    protected get serverDistDir(): string;\n}\n\ninterface Options extends Options$1 {\n    /**\n     * Tells of Next.js is running from the `next dev` command\n     */\n    isNextDevCommand?: boolean;\n}\n\ndeclare type NextServerOptions = Partial<Options> & {\n    preloadedConfig?: NextConfigComplete;\n};\ninterface RequestHandler {\n    (req: IncomingMessage, res: ServerResponse, parsedUrl?: NextUrlWithParsedQuery | undefined): Promise<void>;\n}\ndeclare class NextServer {\n    private serverPromise?;\n    private server?;\n    private reqHandlerPromise?;\n    private preparedAssetPrefix?;\n    options: NextServerOptions;\n    constructor(options: NextServerOptions);\n    get hostname(): string | undefined;\n    get port(): number | undefined;\n    getRequestHandler(): RequestHandler;\n    getUpgradeHandler(): (req: IncomingMessage, socket: any, head: any) => Promise<void>;\n    setAssetPrefix(assetPrefix: string): void;\n    logError(...args: Parameters<NextNodeServer['logError']>): void;\n    render(...args: Parameters<NextNodeServer['render']>): Promise<void>;\n    renderToHTML(...args: Parameters<NextNodeServer['renderToHTML']>): Promise<string | null>;\n    renderError(...args: Parameters<NextNodeServer['renderError']>): Promise<void>;\n    renderErrorToHTML(...args: Parameters<NextNodeServer['renderErrorToHTML']>): Promise<string | null>;\n    render404(...args: Parameters<NextNodeServer['render404']>): Promise<void>;\n    serveStatic(...args: Parameters<NextNodeServer['serveStatic']>): Promise<void>;\n    prepare(): Promise<void>;\n    close(): Promise<any>;\n    private createServer;\n    private loadConfig;\n    private getServer;\n    private getServerRequestHandler;\n}\ndeclare function createServer(options: NextServerOptions): NextServer;\n\ndeclare type LangCode = 'aa' | 'ab' | 'ae' | 'af' | 'ak' | 'am' | 'an' | 'ar' | 'as' | 'av' | 'ay' | 'az' | 'ba' | 'be' | 'bg' | 'bh' | 'bi' | 'bm' | 'bn' | 'bo' | 'br' | 'bs' | 'ca' | 'ce' | 'ch' | 'co' | 'cr' | 'cs' | 'cu' | 'cv' | 'cy' | 'da' | 'de' | 'dv' | 'dz' | 'ee' | 'el' | 'en' | 'eo' | 'es' | 'et' | 'eu' | 'fa' | 'ff' | 'fi' | 'fj' | 'fo' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'gn' | 'gu' | 'gv' | 'ha' | 'he' | 'hi' | 'ho' | 'hr' | 'ht' | 'hu' | 'hy' | 'hz' | 'ia' | 'id' | 'ie' | 'ig' | 'ii' | 'ik' | 'io' | 'is' | 'it' | 'iu' | 'ja' | 'jv' | 'ka' | 'kg' | 'ki' | 'kj' | 'kk' | 'kl' | 'km' | 'kn' | 'ko' | 'kr' | 'ks' | 'ku' | 'kv' | 'kw' | 'ky' | 'la' | 'lb' | 'lg' | 'li' | 'ln' | 'lo' | 'lt' | 'lu' | 'lv' | 'mg' | 'mh' | 'mi' | 'mk' | 'ml' | 'mn' | 'mr' | 'ms' | 'mt' | 'my' | 'na' | 'nb' | 'nd' | 'ne' | 'ng' | 'nl' | 'nn' | 'no' | 'nr' | 'nv' | 'ny' | 'oc' | 'oj' | 'om' | 'or' | 'os' | 'pa' | 'pi' | 'pl' | 'ps' | 'pt' | 'qu' | 'rm' | 'rn' | 'ro' | 'ru' | 'rw' | 'sa' | 'sc' | 'sd' | 'se' | 'sg' | 'si' | 'sk' | 'sl' | 'sm' | 'sn' | 'so' | 'sq' | 'sr' | 'ss' | 'st' | 'su' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'ti' | 'tk' | 'tl' | 'tn' | 'to' | 'tr' | 'ts' | 'tt' | 'tw' | 'ty' | 'ug' | 'uk' | 'ur' | 'uz' | 've' | 'vi' | 'vo' | 'wa' | 'wo' | 'xh' | 'yi' | 'yo' | 'za' | 'zh' | 'zu' | 'af-ZA' | 'am-ET' | 'ar-AE' | 'ar-BH' | 'ar-DZ' | 'ar-EG' | 'ar-IQ' | 'ar-JO' | 'ar-KW' | 'ar-LB' | 'ar-LY' | 'ar-MA' | 'arn-CL' | 'ar-OM' | 'ar-QA' | 'ar-SA' | 'ar-SD' | 'ar-SY' | 'ar-TN' | 'ar-YE' | 'as-IN' | 'az-az' | 'az-Cyrl-AZ' | 'az-Latn-AZ' | 'ba-RU' | 'be-BY' | 'bg-BG' | 'bn-BD' | 'bn-IN' | 'bo-CN' | 'br-FR' | 'bs-Cyrl-BA' | 'bs-Latn-BA' | 'ca-ES' | 'co-FR' | 'cs-CZ' | 'cy-GB' | 'da-DK' | 'de-AT' | 'de-CH' | 'de-DE' | 'de-LI' | 'de-LU' | 'dsb-DE' | 'dv-MV' | 'el-CY' | 'el-GR' | 'en-029' | 'en-AU' | 'en-BZ' | 'en-CA' | 'en-cb' | 'en-GB' | 'en-IE' | 'en-IN' | 'en-JM' | 'en-MT' | 'en-MY' | 'en-NZ' | 'en-PH' | 'en-SG' | 'en-TT' | 'en-US' | 'en-ZA' | 'en-ZW' | 'es-AR' | 'es-BO' | 'es-CL' | 'es-CO' | 'es-CR' | 'es-DO' | 'es-EC' | 'es-ES' | 'es-GT' | 'es-HN' | 'es-MX' | 'es-NI' | 'es-PA' | 'es-PE' | 'es-PR' | 'es-PY' | 'es-SV' | 'es-US' | 'es-UY' | 'es-VE' | 'et-EE' | 'eu-ES' | 'fa-IR' | 'fi-FI' | 'fil-PH' | 'fo-FO' | 'fr-BE' | 'fr-CA' | 'fr-CH' | 'fr-FR' | 'fr-LU' | 'fr-MC' | 'fy-NL' | 'ga-IE' | 'gd-GB' | 'gd-ie' | 'gl-ES' | 'gsw-FR' | 'gu-IN' | 'ha-Latn-NG' | 'he-IL' | 'hi-IN' | 'hr-BA' | 'hr-HR' | 'hsb-DE' | 'hu-HU' | 'hy-AM' | 'id-ID' | 'ig-NG' | 'ii-CN' | 'in-ID' | 'is-IS' | 'it-CH' | 'it-IT' | 'iu-Cans-CA' | 'iu-Latn-CA' | 'iw-IL' | 'ja-JP' | 'ka-GE' | 'kk-KZ' | 'kl-GL' | 'km-KH' | 'kn-IN' | 'kok-IN' | 'ko-KR' | 'ky-KG' | 'lb-LU' | 'lo-LA' | 'lt-LT' | 'lv-LV' | 'mi-NZ' | 'mk-MK' | 'ml-IN' | 'mn-MN' | 'mn-Mong-CN' | 'moh-CA' | 'mr-IN' | 'ms-BN' | 'ms-MY' | 'mt-MT' | 'nb-NO' | 'ne-NP' | 'nl-BE' | 'nl-NL' | 'nn-NO' | 'no-no' | 'nso-ZA' | 'oc-FR' | 'or-IN' | 'pa-IN' | 'pl-PL' | 'prs-AF' | 'ps-AF' | 'pt-BR' | 'pt-PT' | 'qut-GT' | 'quz-BO' | 'quz-EC' | 'quz-PE' | 'rm-CH' | 'ro-mo' | 'ro-RO' | 'ru-mo' | 'ru-RU' | 'rw-RW' | 'sah-RU' | 'sa-IN' | 'se-FI' | 'se-NO' | 'se-SE' | 'si-LK' | 'sk-SK' | 'sl-SI' | 'sma-NO' | 'sma-SE' | 'smj-NO' | 'smj-SE' | 'smn-FI' | 'sms-FI' | 'sq-AL' | 'sr-BA' | 'sr-CS' | 'sr-Cyrl-BA' | 'sr-Cyrl-CS' | 'sr-Cyrl-ME' | 'sr-Cyrl-RS' | 'sr-Latn-BA' | 'sr-Latn-CS' | 'sr-Latn-ME' | 'sr-Latn-RS' | 'sr-ME' | 'sr-RS' | 'sr-sp' | 'sv-FI' | 'sv-SE' | 'sw-KE' | 'syr-SY' | 'ta-IN' | 'te-IN' | 'tg-Cyrl-TJ' | 'th-TH' | 'tk-TM' | 'tlh-QS' | 'tn-ZA' | 'tr-TR' | 'tt-RU' | 'tzm-Latn-DZ' | 'ug-CN' | 'uk-UA' | 'ur-PK' | 'uz-Cyrl-UZ' | 'uz-Latn-UZ' | 'uz-uz' | 'vi-VN' | 'wo-SN' | 'xh-ZA' | 'yo-NG' | 'zh-CN' | 'zh-HK' | 'zh-MO' | 'zh-SG' | 'zh-TW' | 'zu-ZA';\ndeclare type UnmatchedLang = 'x-default';\ndeclare type HrefLang = LangCode | UnmatchedLang;\ndeclare type Languages<T> = {\n    [s in HrefLang]?: T;\n};\ndeclare type AlternateLinkDescriptor = {\n    title?: string;\n    url: string | URL;\n};\ndeclare type AlternateURLs = {\n    canonical?: null | string | URL | AlternateLinkDescriptor;\n    languages?: Languages<null | string | URL | AlternateLinkDescriptor[]>;\n    media?: {\n        [media: string]: null | string | URL | AlternateLinkDescriptor[];\n    };\n    types?: {\n        [types: string]: null | string | URL | AlternateLinkDescriptor[];\n    };\n};\ndeclare type ResolvedAlternateURLs = {\n    canonical: null | AlternateLinkDescriptor;\n    languages: null | Languages<AlternateLinkDescriptor[]>;\n    media: null | {\n        [media: string]: null | AlternateLinkDescriptor[];\n    };\n    types: null | {\n        [types: string]: null | AlternateLinkDescriptor[];\n    };\n};\n\ndeclare type AppLinks = {\n    ios?: AppLinksApple | Array<AppLinksApple>;\n    iphone?: AppLinksApple | Array<AppLinksApple>;\n    ipad?: AppLinksApple | Array<AppLinksApple>;\n    android?: AppLinksAndroid | Array<AppLinksAndroid>;\n    windows_phone?: AppLinksWindows | Array<AppLinksWindows>;\n    windows?: AppLinksWindows | Array<AppLinksWindows>;\n    windows_universal?: AppLinksWindows | Array<AppLinksWindows>;\n    web?: AppLinksWeb | Array<AppLinksWeb>;\n};\ndeclare type ResolvedAppLinks = {\n    ios?: Array<AppLinksApple>;\n    iphone?: Array<AppLinksApple>;\n    ipad?: Array<AppLinksApple>;\n    android?: Array<AppLinksAndroid>;\n    windows_phone?: Array<AppLinksWindows>;\n    windows?: Array<AppLinksWindows>;\n    windows_universal?: Array<AppLinksWindows>;\n    web?: Array<AppLinksWeb>;\n};\ndeclare type AppLinksApple = {\n    url: string | URL;\n    app_store_id?: string | number;\n    app_name?: string;\n};\ndeclare type AppLinksAndroid = {\n    package: string;\n    url?: string | URL;\n    class?: string;\n    app_name?: string;\n};\ndeclare type AppLinksWindows = {\n    url: string | URL;\n    app_id?: string;\n    app_name?: string;\n};\ndeclare type AppLinksWeb = {\n    url: string | URL;\n    should_fallback?: boolean;\n};\ndeclare type ItunesApp = {\n    appId: string;\n    appArgument?: string;\n};\ndeclare type Viewport = {\n    width?: string | number;\n    height?: string | number;\n    initialScale?: number;\n    minimumScale?: number;\n    maximumScale?: number;\n    userScalable?: boolean;\n    viewportFit?: 'auto' | 'cover' | 'contain';\n    interactiveWidget?: 'resizes-visual' | 'resizes-content' | 'overlays-content';\n};\ndeclare type AppleWebApp = {\n    capable?: boolean;\n    title?: string;\n    startupImage?: AppleImage | Array<AppleImage>;\n    statusBarStyle?: 'default' | 'black' | 'black-translucent';\n};\ndeclare type AppleImage = string | AppleImageDescriptor;\ndeclare type AppleImageDescriptor = {\n    url: string;\n    media?: string;\n};\ndeclare type ResolvedAppleWebApp = {\n    capable: boolean;\n    title?: string | null;\n    startupImage?: AppleImageDescriptor[] | null;\n    statusBarStyle?: 'default' | 'black' | 'black-translucent';\n};\ndeclare type FormatDetection = {\n    telephone?: boolean;\n    date?: boolean;\n    address?: boolean;\n    email?: boolean;\n    url?: boolean;\n};\n\n/**\n *\n * Metadata types\n *\n */\ninterface DeprecatedMetadataFields {\n    /**\n     * Deprecated options that have a preferred method\n     * @deprecated Use appWebApp to configure apple-mobile-web-app-capable which provides\n     * @see https://www.appsloveworld.com/coding/iphone/11/difference-between-apple-mobile-web-app-capable-and-apple-touch-fullscreen-ipho\n     */\n    'apple-touch-fullscreen'?: never;\n    /**\n     * Obsolete since iOS 7.\n     * @see https://web.dev/apple-touch-icon/\n     * @deprecated use icons.apple or instead\n     */\n    'apple-touch-icon-precomposed'?: never;\n}\ndeclare type TemplateString = DefaultTemplateString | AbsoluteTemplateString | AbsoluteString;\ndeclare type DefaultTemplateString = {\n    default: string;\n    template: string;\n};\ndeclare type AbsoluteTemplateString = {\n    absolute: string;\n    template: string | null;\n};\ndeclare type AbsoluteString = {\n    absolute: string;\n};\ndeclare type Author = {\n    url?: string | URL;\n    name?: string;\n};\ndeclare type ReferrerEnum = 'no-referrer' | 'origin' | 'no-referrer-when-downgrade' | 'origin-when-cross-origin' | 'same-origin' | 'strict-origin' | 'strict-origin-when-cross-origin';\ndeclare type ColorSchemeEnum = 'normal' | 'light' | 'dark' | 'light dark' | 'dark light' | 'only light';\ndeclare type RobotsInfo = {\n    index?: boolean;\n    follow?: boolean;\n    /** @deprecated set index to false instead */\n    noindex?: never;\n    /** @deprecated set follow to false instead */\n    nofollow?: never;\n    noarchive?: boolean;\n    nosnippet?: boolean;\n    noimageindex?: boolean;\n    nocache?: boolean;\n    notranslate?: boolean;\n    indexifembedded?: boolean;\n    nositelinkssearchbox?: boolean;\n    unavailable_after?: string;\n    'max-video-preview'?: number | string;\n    'max-image-preview'?: 'none' | 'standard' | 'large';\n    'max-snippet'?: number;\n};\ndeclare type Robots = RobotsInfo & {\n    googleBot?: string | RobotsInfo;\n};\ndeclare type ResolvedRobots = {\n    basic: string | null;\n    googleBot: string | null;\n};\ndeclare type IconURL = string | URL;\ndeclare type Icon = IconURL | IconDescriptor;\ndeclare type IconDescriptor = {\n    url: string | URL;\n    type?: string;\n    sizes?: string;\n    /** defaults to rel=\"icon\" unless superseded by Icons map */\n    rel?: string;\n    media?: string;\n    /**\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority\n     */\n    fetchPriority?: 'high' | 'low' | 'auto';\n};\ndeclare type Icons = {\n    /** rel=\"icon\" */\n    icon?: Icon | Icon[];\n    /** rel=\"shortcut icon\" */\n    shortcut?: Icon | Icon[];\n    /**\n     * @see https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html\n     * rel=\"apple-touch-icon\"\n     */\n    apple?: Icon | Icon[];\n    /** rel inferred from descriptor, defaults to \"icon\" */\n    other?: IconDescriptor | IconDescriptor[];\n};\ndeclare type Verification = {\n    google?: null | string | number | (string | number)[];\n    yahoo?: null | string | number | (string | number)[];\n    yandex?: null | string | number | (string | number)[];\n    me?: null | string | number | (string | number)[];\n    other?: {\n        [name: string]: string | number | (string | number)[];\n    };\n};\ndeclare type ResolvedVerification = {\n    google?: null | (string | number)[];\n    yahoo?: null | (string | number)[];\n    yandex?: null | (string | number)[];\n    me?: null | (string | number)[];\n    other?: {\n        [name: string]: (string | number)[];\n    };\n};\ndeclare type ResolvedIcons = {\n    icon: IconDescriptor[];\n    apple: IconDescriptor[];\n    shortcut?: IconDescriptor[];\n    other?: IconDescriptor[];\n};\ndeclare type ThemeColorDescriptor = {\n    color: string;\n    media?: string;\n};\n\ndeclare type Manifest = {\n    background_color?: string;\n    categories?: string[];\n    description?: string;\n    display?: 'fullscreen' | 'standalone' | 'minimal-ui' | 'browser';\n    display_override?: string[];\n    icons?: {\n        src: string;\n        type?: string;\n        sizes?: string;\n        purpose?: 'any' | 'maskable' | 'monochrome' | 'badge';\n    }[];\n    id?: string;\n    launch_handler?: {\n        platform?: 'windows' | 'macos' | 'linux';\n        url?: string;\n    };\n    name?: string;\n    orientation?: 'any' | 'natural' | 'landscape' | 'portrait' | 'portrait-primary' | 'portrait-secondary' | 'landscape-primary' | 'landscape-secondary';\n    prefer_related_applications?: boolean;\n    protocol_handlers?: {\n        protocol: string;\n        url: string;\n        title?: string;\n    }[];\n    related_applications?: {\n        platform: string;\n        url: string;\n        id?: string;\n    }[];\n    scope?: string;\n    screenshots?: {\n        src: string;\n        type?: string;\n        sizes?: string;\n    }[];\n    serviceworker?: {\n        src?: string;\n        scope?: string;\n        type?: string;\n        update_via_cache?: 'import' | 'none' | 'all';\n    };\n    share_target?: {\n        action?: string;\n        method?: 'get' | 'post';\n        enctype?: 'application/x-www-form-urlencoded' | 'multipart/form-data' | 'text/plain';\n        params?: {\n            name: string;\n            value: string;\n            required?: boolean;\n        }[];\n        url?: string;\n        title?: string;\n        text?: string;\n        files?: {\n            accept?: string[];\n            name?: string;\n        }[];\n    };\n    short_name?: string;\n    shortcuts?: {\n        name: string;\n        short_name?: string;\n        description?: string;\n        url: string;\n        icons?: {\n            src: string;\n            type?: string;\n            sizes?: string;\n            purpose?: 'any' | 'maskable' | 'monochrome' | 'badge';\n        }[];\n    }[];\n    start_url?: string;\n    theme_color?: string;\n};\n\ndeclare type OpenGraph = OpenGraphWebsite | OpenGraphArticle | OpenGraphBook | OpenGraphProfile | OpenGraphMusicSong | OpenGraphMusicAlbum | OpenGraphMusicPlaylist | OpenGraphRadioStation | OpenGraphVideoMovie | OpenGraphVideoEpisode | OpenGraphVideoTVShow | OpenGraphVideoOther | OpenGraphMetadata;\ndeclare type Locale = string;\ndeclare type OpenGraphMetadata = {\n    determiner?: 'a' | 'an' | 'the' | 'auto' | '';\n    title?: string | TemplateString;\n    description?: string;\n    emails?: string | Array<string>;\n    phoneNumbers?: string | Array<string>;\n    faxNumbers?: string | Array<string>;\n    siteName?: string;\n    locale?: Locale;\n    alternateLocale?: Locale | Array<Locale>;\n    images?: OGImage | Array<OGImage>;\n    audio?: OGAudio | Array<OGAudio>;\n    videos?: OGVideo | Array<OGVideo>;\n    url?: string | URL;\n    countryName?: string;\n    ttl?: number;\n};\ndeclare type OpenGraphWebsite = OpenGraphMetadata & {\n    type: 'website';\n};\ndeclare type OpenGraphArticle = OpenGraphMetadata & {\n    type: 'article';\n    publishedTime?: string;\n    modifiedTime?: string;\n    expirationTime?: string;\n    authors?: null | string | URL | Array<string | URL>;\n    section?: null | string;\n    tags?: null | string | Array<string>;\n};\ndeclare type OpenGraphBook = OpenGraphMetadata & {\n    type: 'book';\n    isbn?: null | string;\n    releaseDate?: null | string;\n    authors?: null | string | URL | Array<string | URL>;\n    tags?: null | string | Array<string>;\n};\ndeclare type OpenGraphProfile = OpenGraphMetadata & {\n    type: 'profile';\n    firstName?: null | string;\n    lastName?: null | string;\n    username?: null | string;\n    gender?: null | string;\n};\ndeclare type OpenGraphMusicSong = OpenGraphMetadata & {\n    type: 'music.song';\n    duration?: null | number;\n    albums?: null | string | URL | OGAlbum | Array<string | URL | OGAlbum>;\n    musicians?: null | string | URL | Array<string | URL>;\n};\ndeclare type OpenGraphMusicAlbum = OpenGraphMetadata & {\n    type: 'music.album';\n    songs?: null | string | URL | OGSong | Array<string | URL | OGSong>;\n    musicians?: null | string | URL | Array<string | URL>;\n    releaseDate?: null | string;\n};\ndeclare type OpenGraphMusicPlaylist = OpenGraphMetadata & {\n    type: 'music.playlist';\n    songs?: null | string | URL | OGSong | Array<string | URL | OGSong>;\n    creators?: null | string | URL | Array<string | URL>;\n};\ndeclare type OpenGraphRadioStation = OpenGraphMetadata & {\n    type: 'music.radio_station';\n    creators?: null | string | URL | Array<string | URL>;\n};\ndeclare type OpenGraphVideoMovie = OpenGraphMetadata & {\n    type: 'video.movie';\n    actors?: null | string | URL | OGActor | Array<string | URL | OGActor>;\n    directors?: null | string | URL | Array<string | URL>;\n    writers?: null | string | URL | Array<string | URL>;\n    duration?: null | number;\n    releaseDate?: null | string;\n    tags?: null | string | Array<string>;\n};\ndeclare type OpenGraphVideoEpisode = OpenGraphMetadata & {\n    type: 'video.episode';\n    actors?: null | string | URL | OGActor | Array<string | URL | OGActor>;\n    directors?: null | string | URL | Array<string | URL>;\n    writers?: null | string | URL | Array<string | URL>;\n    duration?: null | number;\n    releaseDate?: null | string;\n    tags?: null | string | Array<string>;\n    series?: null | string | URL;\n};\ndeclare type OpenGraphVideoTVShow = OpenGraphMetadata & {\n    type: 'video.tv_show';\n};\ndeclare type OpenGraphVideoOther = OpenGraphMetadata & {\n    type: 'video.other';\n};\ndeclare type OGImage = string | OGImageDescriptor | URL;\ndeclare type OGImageDescriptor = {\n    url: string | URL;\n    secureUrl?: string | URL;\n    alt?: string;\n    type?: string;\n    width?: string | number;\n    height?: string | number;\n};\ndeclare type OGAudio = string | OGAudioDescriptor | URL;\ndeclare type OGAudioDescriptor = {\n    url: string | URL;\n    secureUrl?: string | URL;\n    type?: string;\n};\ndeclare type OGVideo = string | OGVideoDescriptor | URL;\ndeclare type OGVideoDescriptor = {\n    url: string | URL;\n    secureUrl?: string | URL;\n    type?: string;\n    width?: string | number;\n    height?: string | number;\n};\ndeclare type ResolvedOpenGraph = ResolvedOpenGraphWebsite | ResolvedOpenGraphArticle | ResolvedOpenGraphBook | ResolvedOpenGraphProfile | ResolvedOpenGraphMusicSong | ResolvedOpenGraphMusicAlbum | ResolvedOpenGraphMusicPlaylist | ResolvedOpenGraphRadioStation | ResolvedOpenGraphVideoMovie | ResolvedOpenGraphVideoEpisode | ResolvedOpenGraphVideoTVShow | ResolvedOpenGraphVideoOther | ResolvedOpenGraphMetadata;\ndeclare type ResolvedOpenGraphMetadata = {\n    determiner?: 'a' | 'an' | 'the' | 'auto' | '';\n    title?: AbsoluteTemplateString;\n    description?: string;\n    emails?: Array<string>;\n    phoneNumbers?: Array<string>;\n    faxNumbers?: Array<string>;\n    siteName?: string;\n    locale?: Locale;\n    alternateLocale?: Array<Locale>;\n    images?: Array<OGImage>;\n    audio?: Array<OGAudio>;\n    videos?: Array<OGVideo>;\n    url: null | URL | string;\n    countryName?: string;\n    ttl?: number;\n};\ndeclare type ResolvedOpenGraphWebsite = ResolvedOpenGraphMetadata & {\n    type: 'website';\n};\ndeclare type ResolvedOpenGraphArticle = ResolvedOpenGraphMetadata & {\n    type: 'article';\n    publishedTime?: string;\n    modifiedTime?: string;\n    expirationTime?: string;\n    authors?: Array<string>;\n    section?: string;\n    tags?: Array<string>;\n};\ndeclare type ResolvedOpenGraphBook = ResolvedOpenGraphMetadata & {\n    type: 'book';\n    isbn?: string;\n    releaseDate?: string;\n    authors?: Array<string>;\n    tags?: Array<string>;\n};\ndeclare type ResolvedOpenGraphProfile = ResolvedOpenGraphMetadata & {\n    type: 'profile';\n    firstName?: string;\n    lastName?: string;\n    username?: string;\n    gender?: string;\n};\ndeclare type ResolvedOpenGraphMusicSong = ResolvedOpenGraphMetadata & {\n    type: 'music.song';\n    duration?: number;\n    albums?: Array<OGAlbum>;\n    musicians?: Array<string | URL>;\n};\ndeclare type ResolvedOpenGraphMusicAlbum = ResolvedOpenGraphMetadata & {\n    type: 'music.album';\n    songs?: Array<string | URL | OGSong>;\n    musicians?: Array<string | URL>;\n    releaseDate?: string;\n};\ndeclare type ResolvedOpenGraphMusicPlaylist = ResolvedOpenGraphMetadata & {\n    type: 'music.playlist';\n    songs?: Array<string | URL | OGSong>;\n    creators?: Array<string | URL>;\n};\ndeclare type ResolvedOpenGraphRadioStation = ResolvedOpenGraphMetadata & {\n    type: 'music.radio_station';\n    creators?: Array<string | URL>;\n};\ndeclare type ResolvedOpenGraphVideoMovie = ResolvedOpenGraphMetadata & {\n    type: 'video.movie';\n    actors?: Array<string | URL | OGActor>;\n    directors?: Array<string | URL>;\n    writers?: Array<string | URL>;\n    duration?: number;\n    releaseDate?: string;\n    tags?: Array<string>;\n};\ndeclare type ResolvedOpenGraphVideoEpisode = ResolvedOpenGraphMetadata & {\n    type: 'video.episode';\n    actors?: Array<string | URL | OGActor>;\n    directors?: Array<string | URL>;\n    writers?: Array<string | URL>;\n    duration?: number;\n    releaseDate?: string;\n    tags?: Array<string>;\n    series?: string | URL;\n};\ndeclare type ResolvedOpenGraphVideoTVShow = ResolvedOpenGraphMetadata & {\n    type: 'video.tv_show';\n};\ndeclare type ResolvedOpenGraphVideoOther = ResolvedOpenGraphMetadata & {\n    type: 'video.other';\n};\ndeclare type OGSong = {\n    url: string | URL;\n    disc?: number;\n    track?: number;\n};\ndeclare type OGAlbum = {\n    url: string | URL;\n    disc?: number;\n    track?: number;\n};\ndeclare type OGActor = {\n    url: string | URL;\n    role?: string;\n};\n\ndeclare type Twitter = TwitterSummary | TwitterSummaryLargeImage | TwitterPlayer | TwitterApp | TwitterMetadata;\ndeclare type TwitterMetadata = {\n    site?: string;\n    siteId?: string;\n    creator?: string;\n    creatorId?: string;\n    description?: string;\n    title?: string | TemplateString;\n    images?: TwitterImage | Array<TwitterImage>;\n};\ndeclare type TwitterSummary = TwitterMetadata & {\n    card: 'summary';\n};\ndeclare type TwitterSummaryLargeImage = TwitterMetadata & {\n    card: 'summary_large_image';\n};\ndeclare type TwitterPlayer = TwitterMetadata & {\n    card: 'player';\n    players: TwitterPlayerDescriptor | Array<TwitterPlayerDescriptor>;\n};\ndeclare type TwitterApp = TwitterMetadata & {\n    card: 'app';\n    app: TwitterAppDescriptor;\n};\ndeclare type TwitterAppDescriptor = {\n    id: {\n        iphone?: string | number;\n        ipad?: string | number;\n        googleplay?: string;\n    };\n    url?: {\n        iphone?: string | URL;\n        ipad?: string | URL;\n        googleplay?: string | URL;\n    };\n    name?: string;\n};\ndeclare type TwitterImage = string | TwitterImageDescriptor | URL;\ndeclare type TwitterImageDescriptor = {\n    url: string | URL;\n    alt?: string;\n    secureUrl?: string | URL;\n    type?: string;\n    width?: string | number;\n    height?: string | number;\n};\ndeclare type TwitterPlayerDescriptor = {\n    playerUrl: string | URL;\n    streamUrl: string | URL;\n    width: number;\n    height: number;\n};\ndeclare type ResolvedTwitterImage = {\n    url: string | URL;\n    alt?: string;\n    secureUrl?: string | URL;\n    type?: string;\n    width?: string | number;\n    height?: string | number;\n};\ndeclare type ResolvedTwitterSummary = {\n    site: string | null;\n    siteId: string | null;\n    creator: string | null;\n    creatorId: string | null;\n    description: string | null;\n    title: AbsoluteTemplateString;\n    images?: Array<ResolvedTwitterImage>;\n};\ndeclare type ResolvedTwitterPlayer = ResolvedTwitterSummary & {\n    players: Array<TwitterPlayerDescriptor>;\n};\ndeclare type ResolvedTwitterApp = ResolvedTwitterSummary & {\n    app: TwitterAppDescriptor;\n};\ndeclare type ResolvedTwitterMetadata = ({\n    card: 'summary';\n} & ResolvedTwitterSummary) | ({\n    card: 'summary_large_image';\n} & ResolvedTwitterSummary) | ({\n    card: 'player';\n} & ResolvedTwitterPlayer) | ({\n    card: 'app';\n} & ResolvedTwitterApp);\n\n/**\n * Metadata interface to describe all the metadata fields that can be set in a document.\n * @interface\n */\ninterface Metadata extends DeprecatedMetadataFields {\n    /**\n     * The base path and origin for absolute urls for various metadata links such as OpenGraph images.\n     */\n    metadataBase?: null | URL;\n    /**\n     * The document title.\n     * @example\n     * ```tsx\n     * \"My Blog\"\n     * <title>My Blog</title>\n     *\n     * { default: \"Dashboard\", template: \"%s | My Website\" }\n     * <title>Dashboard | My Website</title>\n     *\n     * { absolute: \"My Blog\", template: \"%s | My Website\" }\n     * <title>My Blog</title>\n     * ```\n     */\n    title?: null | string | TemplateString;\n    /**\n     * The document description, and optionally the OpenGraph and twitter descriptions.\n     * @example\n     * ```tsx\n     * \"My Blog Description\"\n     * <meta name=\"description\" content=\"My Blog Description\" />\n     * ```\n     */\n    description?: null | string;\n    /**\n     * The application name.\n     * @example\n     * ```tsx\n     * \"My Blog\"\n     * <meta name=\"application-name\" content=\"My Blog\" />\n     * ```\n     */\n    applicationName?: null | string;\n    /**\n     * The authors of the document.\n     * @example\n     * ```tsx\n     * [{ name: \"Next.js Team\", url: \"https://nextjs.org\" }]\n     *\n     * <meta name=\"author\" content=\"Next.js Team\" />\n     * <link rel=\"author\" href=\"https://nextjs.org\" />\n     * ```\n     */\n    authors?: null | Author | Array<Author>;\n    /**\n     * The generator used for the document.\n     * @example\n     * ```tsx\n     * \"Next.js\"\n     *\n     * <meta name=\"generator\" content=\"Next.js\" />\n     * ```\n     */\n    generator?: null | string;\n    /**\n     * The keywords for the document. If an array is provided, it will be flattened into a single tag with comma separation.\n     * @example\n     * ```tsx\n     * \"nextjs, react, blog\"\n     * <meta name=\"keywords\" content=\"nextjs, react, blog\" />\n     *\n     * [\"react\", \"server components\"]\n     * <meta name=\"keywords\" content=\"react, server components\" />\n     * ```\n     */\n    keywords?: null | string | Array<string>;\n    /**\n     * The referrer setting for the document.\n     * @example\n     * ```tsx\n     * \"origin\"\n     * <meta name=\"referrer\" content=\"origin\" />\n     * ```\n     */\n    referrer?: null | ReferrerEnum;\n    /**\n     * The theme color for the document.\n     * @example\n     * ```tsx\n     * \"#000000\"\n     * <meta name=\"theme-color\" content=\"#000000\" />\n     *\n     * { media: \"(prefers-color-scheme: dark)\", color: \"#000000\" }\n     * <meta name=\"theme-color\" media=\"(prefers-color-scheme: dark)\" content=\"#000000\" />\n     *\n     * [\n     *  { media: \"(prefers-color-scheme: dark)\", color: \"#000000\" },\n     *  { media: \"(prefers-color-scheme: light)\", color: \"#ffffff\" }\n     * ]\n     * <meta name=\"theme-color\" media=\"(prefers-color-scheme: dark)\" content=\"#000000\" />\n     * <meta name=\"theme-color\" media=\"(prefers-color-scheme: light)\" content=\"#ffffff\" />\n     * ```\n     */\n    themeColor?: null | string | ThemeColorDescriptor | ThemeColorDescriptor[];\n    /**\n     * The color scheme for the document.\n     * @example\n     * ```tsx\n     * \"dark\"\n     * <meta name=\"color-scheme\" content=\"dark\" />\n     * ```\n     */\n    colorScheme?: null | ColorSchemeEnum;\n    /**\n     * The viewport setting for the document.\n     * @example\n     * ```tsx\n     * \"width=device-width, initial-scale=1\"\n     * <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n     *\n     * { width: \"device-width\", initialScale: 1 }\n     * <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n     * ```\n     */\n    viewport?: null | string | Viewport;\n    /**\n     * The creator of the document.\n     * @example\n     * ```tsx\n     * \"Next.js Team\"\n     * <meta name=\"creator\" content=\"Next.js Team\" />\n     * ```\n     */\n    creator?: null | string;\n    /**\n     * The publisher of the document.\n     * @example\n     *\n     * ```tsx\n     * \"Vercel\"\n     * <meta name=\"publisher\" content=\"Vercel\" />\n     * ```\n     */\n    publisher?: null | string;\n    /**\n     * The robots setting for the document.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Glossary/Robots.txt\n     * @example\n     * ```tsx\n     * \"index, follow\"\n     * <meta name=\"robots\" content=\"index, follow\" />\n     *\n     * { index: false, follow: false }\n     * <meta name=\"robots\" content=\"noindex, nofollow\" />\n     * ```\n     */\n    robots?: null | string | Robots;\n    /**\n     * The canonical and alternate URLs for the document.\n     * @example\n     * ```tsx\n     * { canonical: \"https://example.com\" }\n     * <link rel=\"canonical\" href=\"https://example.com\" />\n     *\n     * { canonical: \"https://example.com\", hreflang: { \"en-US\": \"https://example.com/en-US\" } }\n     * <link rel=\"canonical\" href=\"https://example.com\" />\n     * <link rel=\"alternate\" href=\"https://example.com/en-US\" hreflang=\"en-US\" />\n     * ```\n     *\n     * Multiple titles example for alternate URLs except `canonical`:\n     * ```tsx\n     * {\n     *   canonical: \"https://example.com\",\n     *   types: {\n     *     'application/rss+xml': [\n     *       { url: 'blog.rss', title: 'rss' },\n     *       { url: 'blog/js.rss', title: 'js title' },\n     *     ],\n     *   },\n     * }\n     * <link rel=\"canonical\" href=\"https://example.com\" />\n     * <link rel=\"alternate\" href=\"https://example.com/blog.rss\" type=\"application/rss+xml\" title=\"rss\" />\n     * <link rel=\"alternate\" href=\"https://example.com/blog/js.rss\" type=\"application/rss+xml\" title=\"js title\" />\n     * ```\n     */\n    alternates?: null | AlternateURLs;\n    /**\n     * The icons for the document. Defaults to rel=\"icon\".\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel#attr-icon\n     * @example\n     * ```tsx\n     * \"https://example.com/icon.png\"\n     * <link rel=\"icon\" href=\"https://example.com/icon.png\" />\n     *\n     * { icon: \"https://example.com/icon.png\", apple: \"https://example.com/apple-icon.png\" }\n     * <link rel=\"icon\" href=\"https://example.com/icon.png\" />\n     * <link rel=\"apple-touch-icon\" href=\"https://example.com/apple-icon.png\" />\n     *\n     * [{ rel: \"icon\", url: \"https://example.com/icon.png\" }, { rel: \"apple-touch-icon\", url: \"https://example.com/apple-icon.png\" }]\n     * <link rel=\"icon\" href=\"https://example.com/icon.png\" />\n     * <link rel=\"apple-touch-icon\" href=\"https://example.com/apple-icon.png\" />\n     * ```\n     */\n    icons?: null | IconURL | Array<Icon> | Icons;\n    /**\n     * A web application manifest, as defined in the Web Application Manifest specification.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/Manifest\n     * @example\n     * ```tsx\n     * \"https://example.com/manifest.json\"\n     * <link rel=\"manifest\" href=\"https://example.com/manifest.json\" />\n     * ```\n     *\n     */\n    manifest?: null | string | URL;\n    /**\n     * The Open Graph metadata for the document.\n     *\n     * @see https://ogp.me\n     * @example\n     * ```tsx\n     * {\n     *   type: \"website\",\n     *   url: \"https://example.com\",\n     *   title: \"My Website\",\n     *   description: \"My Website Description\",\n     *   siteName: \"My Website\",\n     *   images: [{\n     *     url: \"https://example.com/og.png\",\n     *   }],\n     * }\n     *\n     * <meta property=\"og:type\" content=\"website\" />\n     * <meta property=\"og:url\" content=\"https://example.com\" />\n     * <meta property=\"og:site_name\" content=\"My Website\" />\n     * <meta property=\"og:title\" content=\"My Website\" />\n     * <meta property=\"og:description\" content=\"My Website Description\" />\n     * <meta property=\"og:image\" content=\"https://example.com/og.png\" />\n     * ```\n     */\n    openGraph?: null | OpenGraph;\n    /**\n     * The Twitter metadata for the document.\n     * @example\n     * ```tsx\n     * { card: \"summary_large_image\", site: \"@site\", creator: \"@creator\", \"images\": \"https://example.com/og.png\" }\n     *\n     * <meta name=\"twitter:card\" content=\"summary_large_image\" />\n     * <meta name=\"twitter:site\" content=\"@site\" />\n     * <meta name=\"twitter:creator\" content=\"@creator\" />\n     * <meta name=\"twitter:title\" content=\"My Website\" />\n     * <meta name=\"twitter:description\" content=\"My Website Description\" />\n     * <meta name=\"twitter:image\" content=\"https://example.com/og.png\" />\n     * ```\n     *\n     */\n    twitter?: null | Twitter;\n    /**\n     * The common verification tokens for the document.\n     * @example\n     * ```tsx\n     * { verification: { google: \"1234567890\", yandex: \"1234567890\", \"me\": \"1234567890\" } }\n     * <meta name=\"google-site-verification\" content=\"1234567890\" />\n     * <meta name=\"yandex-verification\" content=\"1234567890\" />\n     * <meta name=\"me\" content=\"@me\" />\n     * ```\n     */\n    verification?: Verification;\n    /**\n     * The Apple web app metadata for the document.\n     *\n     * @see https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariHTMLRef/Articles/MetaTags.html\n     * @example\n     * ```tsx\n     * { capable: true, title: \"My Website\", statusBarStyle: \"black-translucent\" }\n     * <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />\n     * <meta name=\"apple-mobile-web-app-title\" content=\"My Website\" />\n     * <meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />\n     * ```\n     *\n     */\n    appleWebApp?: null | boolean | AppleWebApp;\n    /**\n     * Indicates if devices should try to interpret various formats and make actionable links out of them. For example it controles\n     * if telephone numbers on mobile that can be clicked to dial or not.\n     * @example\n     * ```tsx\n     * { telephone: false }\n     * <meta name=\"format-detection\" content=\"telephone=no\" />\n     * ```\n     *\n     */\n    formatDetection?: null | FormatDetection;\n    /**\n     * The metadata for the iTunes App.\n     * It adds the `name=\"apple-itunes-app\"` meta tag.\n     *\n     * @example\n     * ```tsx\n     * { app: { id: \"123456789\", affiliateData: \"123456789\", appArguments: \"123456789\" } }\n     * <meta name=\"apple-itunes-app\" content=\"app-id=123456789, affiliate-data=123456789, app-arguments=123456789\" />\n     * ```\n     */\n    itunes?: null | ItunesApp;\n    /**\n     * A brief description of what this web-page is about. Not recommended, superseded by description.\n     * It adds the `name=\"abstract\"` meta tag.\n     *\n     * @see https://www.metatags.org/all-meta-tags-overview/meta-name-abstract/\n     * @example\n     * ```tsx\n     * \"My Website Description\"\n     * <meta name=\"abstract\" content=\"My Website Description\" />\n     * ```\n     */\n    abstract?: null | string;\n    /**\n     * The Facebook AppLinks metadata for the document.\n     * @example\n     * ```tsx\n     * { ios: { appStoreId: \"123456789\", url: \"https://example.com\" }, android: { packageName: \"com.example\", url: \"https://example.com\" } }\n     *\n     * <meta property=\"al:ios:app_store_id\" content=\"123456789\" />\n     * <meta property=\"al:ios:url\" content=\"https://example.com\" />\n     * <meta property=\"al:android:package\" content=\"com.example\" />\n     * <meta property=\"al:android:url\" content=\"https://example.com\" />\n     * ```\n     */\n    appLinks?: null | AppLinks;\n    /**\n     * The archives link rel property.\n     * @example\n     * ```tsx\n     * { archives: \"https://example.com/archives\" }\n     * <link rel=\"archives\" href=\"https://example.com/archives\" />\n     * ```\n     */\n    archives?: null | string | Array<string>;\n    /**\n     * The assets link rel property.\n     * @example\n     * ```tsx\n     * \"https://example.com/assets\"\n     * <link rel=\"assets\" href=\"https://example.com/assets\" />\n     * ```\n     */\n    assets?: null | string | Array<string>;\n    /**\n     * The bookmarks link rel property.\n     * @example\n     * ```tsx\n     * \"https://example.com/bookmarks\"\n     * <link rel=\"bookmarks\" href=\"https://example.com/bookmarks\" />\n     * ```\n     */\n    bookmarks?: null | string | Array<string>;\n    /**\n     * The category meta name property.\n     * @example\n     * ```tsx\n     * \"My Category\"\n     * <meta name=\"category\" content=\"My Category\" />\n     * ```\n     */\n    category?: null | string;\n    /**\n     * The classification meta name property.\n     * @example\n     * ```tsx\n     * \"My Classification\"\n     * <meta name=\"classification\" content=\"My Classification\" />\n     * ```\n     */\n    classification?: null | string;\n    /**\n     * Arbitrary name/value pairs for the document.\n     */\n    other?: {\n        [name: string]: string | number | Array<string | number>;\n    } & DeprecatedMetadataFields;\n}\ninterface ResolvedMetadata extends DeprecatedMetadataFields {\n    metadataBase: null | URL;\n    title: null | AbsoluteTemplateString;\n    description: null | string;\n    applicationName: null | string;\n    authors: null | Array<Author>;\n    generator: null | string;\n    keywords: null | Array<string>;\n    referrer: null | ReferrerEnum;\n    themeColor: null | ThemeColorDescriptor[];\n    colorScheme: null | ColorSchemeEnum;\n    viewport: null | string;\n    creator: null | string;\n    publisher: null | string;\n    robots: null | ResolvedRobots;\n    alternates: null | ResolvedAlternateURLs;\n    icons: null | ResolvedIcons;\n    openGraph: null | ResolvedOpenGraph;\n    manifest: null | string | URL;\n    twitter: null | ResolvedTwitterMetadata;\n    verification: null | ResolvedVerification;\n    appleWebApp: null | ResolvedAppleWebApp;\n    formatDetection: null | FormatDetection;\n    itunes: null | ItunesApp;\n    abstract: null | string;\n    appLinks: null | ResolvedAppLinks;\n    archives: null | Array<string>;\n    assets: null | Array<string>;\n    bookmarks: null | Array<string>;\n    category: null | string;\n    classification: null | string;\n    other: null | ({\n        [name: string]: string | number | Array<string | number>;\n    } & DeprecatedMetadataFields);\n}\ndeclare type RobotsFile = {\n    rules: {\n        userAgent?: string | string[];\n        allow?: string | string[];\n        disallow?: string | string[];\n        crawlDelay?: number;\n    } | Array<{\n        userAgent: string | string[];\n        allow?: string | string[];\n        disallow?: string | string[];\n        crawlDelay?: number;\n    }>;\n    sitemap?: string | string[];\n    host?: string;\n};\ndeclare type SitemapFile = Array<{\n    url: string;\n    lastModified?: string | Date;\n}>;\ndeclare type ResolvingMetadata = Promise<ResolvedMetadata>;\ndeclare namespace MetadataRoute {\n    type Robots = RobotsFile;\n    type Sitemap = SitemapFile;\n    type Manifest = Manifest;\n}\n\ntype ServerRuntime = 'nodejs' | 'experimental-edge' | 'edge' | undefined\n\n\n// Extend the React types with missing properties\ndeclare module 'react' {\n  // <html amp=\"\"> support\n  interface HtmlHTMLAttributes<T> extends React$1.HTMLAttributes<T> {\n    amp?: string\n  }\n\n  // <link nonce=\"\"> support\n  interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n    nonce?: string\n  }\n\n  function use<T>(promise: Promise<T> | React$1.Context<T>): T\n  function cache<T extends Function>(fn: T): T\n}\n\ntype Redirect =\n  | {\n      statusCode: 301 | 302 | 303 | 307 | 308\n      destination: string\n      basePath?: false\n    }\n  | {\n      permanent: boolean\n      destination: string\n      basePath?: false\n    }\n\n/**\n * `Page` type, use it as a guide to create `pages`.\n */\ntype NextPage<Props = {}, InitialProps = Props> = NextComponentType<\n  NextPageContext,\n  InitialProps,\n  Props\n>\n\ntype FileSizeSuffix = `${\n  | 'k'\n  | 'K'\n  | 'm'\n  | 'M'\n  | 'g'\n  | 'G'\n  | 't'\n  | 'T'\n  | 'p'\n  | 'P'}${'b' | 'B'}`\n\ntype SizeLimit = number | `${number}${FileSizeSuffix}`\n\ntype ResponseLimit = SizeLimit | boolean\n\n/**\n * `Config` type, use it for export const config\n */\ntype PageConfig = {\n  amp?: boolean | 'hybrid'\n  api?: {\n    /**\n     * Configures or disables body size limit warning. Can take a number or\n     * any string format supported by `bytes`, for example `1000`, `'500kb'` or\n     * `'3mb'`.\n     */\n    responseLimit?: ResponseLimit\n    /**\n     * The byte limit of the body. This is the number of bytes or any string\n     * format supported by `bytes`, for example `1000`, `'500kb'` or `'3mb'`.\n     */\n    bodyParser?:\n      | {\n          sizeLimit?: SizeLimit\n        }\n      | false\n    /**\n     * Flag to disable warning \"API page resolved\n     * without sending a response\", due to explicitly\n     * using an external API resolver, like express\n     */\n    externalResolver?: true\n  }\n  env?: Array<string>\n  runtime?: ServerRuntime\n  unstable_runtimeJS?: false\n  unstable_JsPreload?: false\n  /**\n   * @deprecated this config has been removed in favor of the next.config.js option\n   */\n  // TODO: remove in next minor release (current v13.1.1)\n  unstable_includeFiles?: string[]\n  /**\n   * @deprecated this config has been removed in favor of the next.config.js option\n   */\n  // TODO: remove in next minor release (current v13.1.1)\n  unstable_excludeFiles?: string[]\n}\n\n\ntype PreviewData = string | false | object | undefined\n\n/**\n * Context object passed into `getStaticProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-props#context-parameter\n */\ntype GetStaticPropsContext<\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData = PreviewData\n> = {\n  params?: Params\n  preview?: boolean\n  previewData?: Preview\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * The return type of `getStaticProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-props#getstaticprops-return-values\n */\ntype GetStaticPropsResult<Props> =\n  | { props: Props; revalidate?: number | boolean }\n  | { redirect: Redirect; revalidate?: number | boolean }\n  | { notFound: true; revalidate?: number | boolean }\n\n/**\n * Static Site Generation feature for Next.js.\n * @link https://nextjs.org/docs/basic-features/data-fetching/get-static-props\n * @link https://nextjs.org/docs/basic-features/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getStaticProps: GetStaticProps = async (context) => {\n *   // ...\n * }\n * ```\n */\ntype GetStaticProps<\n  Props extends { [key: string]: any } = { [key: string]: any },\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData = PreviewData\n> = (\n  context: GetStaticPropsContext<Params, Preview>\n) => Promise<GetStaticPropsResult<Props>> | GetStaticPropsResult<Props>\n\ntype InferGetStaticPropsType<T extends (args: any) => any> = Extract<\n  Awaited<ReturnType<T>>,\n  { props: any }\n>['props']\n\ntype GetStaticPathsContext = {\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * The return type of `getStaticPaths`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-static-paths#getstaticpaths-return-values\n */\ntype GetStaticPathsResult<\n  Params extends ParsedUrlQuery = ParsedUrlQuery\n> = {\n  paths: Array<string | { params: Params; locale?: string }>\n  fallback: boolean | 'blocking'\n}\n\n/**\n * Define a list of paths to be statically generated if dynamic routes exist.\n * @link https://nextjs.org/docs/basic-features/data-fetching/get-static-paths\n * @link https://nextjs.org/docs/basic-features/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getStaticPaths: GetStaticPaths = async () => {\n *  // ...\n * }\n * ```\n */\ntype GetStaticPaths<Params extends ParsedUrlQuery = ParsedUrlQuery> = (\n  context: GetStaticPathsContext\n) => Promise<GetStaticPathsResult<Params>> | GetStaticPathsResult<Params>\n\n/**\n * Context object passed into `getServerSideProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props#context-parameter\n */\ntype GetServerSidePropsContext<\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData = PreviewData\n> = {\n  req: IncomingMessage & {\n    cookies: NextApiRequestCookies\n  }\n  res: ServerResponse\n  params?: Params\n  query: ParsedUrlQuery\n  preview?: boolean\n  previewData?: Preview\n  resolvedUrl: string\n  locale?: string\n  locales?: string[]\n  defaultLocale?: string\n}\n\n/**\n * The return type of `getServerSideProps`.\n * @link https://nextjs.org/docs/api-reference/data-fetching/get-server-side-props#getserversideprops-return-values\n */\ntype GetServerSidePropsResult<Props> =\n  | { props: Props | Promise<Props> }\n  | { redirect: Redirect }\n  | { notFound: true }\n\n/**\n * Server-side Rendering feature for Next.js.\n * @link https://nextjs.org/docs/basic-features/data-fetching/get-server-side-props\n * @link https://nextjs.org/docs/basic-features/typescript#static-generation-and-server-side-rendering\n * @example\n * ```ts\n * export const getServerSideProps: GetServerSideProps = async (context) => {\n *  // ...\n * }\n */\ntype GetServerSideProps<\n  Props extends { [key: string]: any } = { [key: string]: any },\n  Params extends ParsedUrlQuery = ParsedUrlQuery,\n  Preview extends PreviewData = PreviewData\n> = (\n  context: GetServerSidePropsContext<Params, Preview>\n) => Promise<GetServerSidePropsResult<Props>>\n\ntype InferGetServerSidePropsType<T extends (args: any) => any> = Awaited<\n  Extract<Awaited<ReturnType<T>>, { props: any }>['props']\n>\n\ndeclare global {\n  interface Crypto {\n    readonly subtle: SubtleCrypto\n    getRandomValues<\n      T extends\n        | Int8Array\n        | Int16Array\n        | Int32Array\n        | Uint8Array\n        | Uint16Array\n        | Uint32Array\n        | Uint8ClampedArray\n        | Float32Array\n        | Float64Array\n        | DataView\n        | null\n    >(\n      array: T\n    ): T\n    randomUUID(): string\n  }\n}\n\nexport { FileSizeSuffix, GetServerSideProps, GetServerSidePropsContext, GetServerSidePropsResult, GetStaticPaths, GetStaticPathsContext, GetStaticPathsResult, GetStaticProps, GetStaticPropsContext, GetStaticPropsResult, InferGetServerSidePropsType, InferGetStaticPropsType, Metadata, MetadataRoute, NextApiHandler, NextApiRequest, NextApiResponse, NextComponentType, NextConfig, NextPage, NextPageContext, PageConfig, PreviewData, Redirect, ResolvedMetadata, ResolvingMetadata, ResponseLimit, ServerRuntime, SizeLimit, createServer as default };\n","path":"file:///node_modules/next/index.d.ts"}],[{"code":"import * as React from 'react';\n\ntype EditorProps = {\n    fileName: string;\n    value: string;\n    className?: string;\n    style?: React.CSSProperties;\n    onMount?: () => void;\n};\n\ndeclare function Editor(props: EditorProps): JSX.Element;\n\nexport { Editor };\n","path":"file:///node_modules/next-monaco/index.d.ts"}],[{"code":"/// <reference types=\"node\" />\n/// <reference types=\"react\" />\n/// <reference types=\"react-dom\" />\nimport React from 'react';\nimport { ParsedUrlQuery } from 'querystring';\nimport { NextConfig as NextConfig$1 } from 'next';\n\ndeclare const VALID_LOADERS: readonly [\"default\", \"imgix\", \"cloudinary\", \"akamai\", \"custom\"];\ndeclare type LoaderValue = typeof VALID_LOADERS[number];\ndeclare type RemotePattern = {\n    /**\n     * Must be `http` or `https`.\n     */\n    protocol?: 'http' | 'https';\n    /**\n     * Can be literal or wildcard.\n     * Single `*` matches a single subdomain.\n     * Double `**` matches any number of subdomains.\n     */\n    hostname: string;\n    /**\n     * Can be literal port such as `8080` or empty string\n     * meaning no port.\n     */\n    port?: string;\n    /**\n     * Can be literal or wildcard.\n     * Single `*` matches a single path segment.\n     * Double `**` matches any number of path segments.\n     */\n    pathname?: string;\n};\ndeclare type ImageFormat = 'image/avif' | 'image/webp';\n/**\n * Image configurations\n *\n * @see [Image configuration options](https://nextjs.org/docs/api-reference/next/image#configuration-options)\n */\ndeclare type ImageConfigComplete = {\n    /** @see [Device sizes documentation](https://nextjs.org/docs/api-reference/next/image#device-sizes) */\n    deviceSizes: number[];\n    /** @see [Image sizing documentation](https://nextjs.org/docs/basic-features/image-optimization#image-sizing) */\n    imageSizes: number[];\n    /** @see [Image loaders configuration](https://nextjs.org/docs/api-reference/next/legacy/image#loader) */\n    loader: LoaderValue;\n    /** @see [Image loader configuration](https://nextjs.org/docs/api-reference/next/legacy/image#loader-configuration) */\n    path: string;\n    /** @see [Image loader configuration](https://nextjs.org/docs/api-reference/next/image#loader-configuration) */\n    loaderFile: string;\n    /**\n     * @see [Image domains configuration](https://nextjs.org/docs/api-reference/next/image#domains)\n     */\n    domains: string[];\n    /** @see [Disable static image import configuration](https://nextjs.org/docs/api-reference/next/image#disable-static-imports) */\n    disableStaticImages: boolean;\n    /** @see [Cache behavior](https://nextjs.org/docs/api-reference/next/image#caching-behavior) */\n    minimumCacheTTL: number;\n    /** @see [Acceptable formats](https://nextjs.org/docs/api-reference/next/image#acceptable-formats) */\n    formats: ImageFormat[];\n    /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n    dangerouslyAllowSVG: boolean;\n    /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n    contentSecurityPolicy: string;\n    /** @see [Dangerously Allow SVG](https://nextjs.org/docs/api-reference/next/image#dangerously-allow-svg) */\n    contentDispositionType: 'inline' | 'attachment';\n    /** @see [Remote Patterns](https://nextjs.org/docs/api-reference/next/image#remote-patterns) */\n    remotePatterns: RemotePattern[];\n    /** @see [Unoptimized](https://nextjs.org/docs/api-reference/next/image#unoptimized) */\n    unoptimized: boolean;\n};\ndeclare type ImageConfig = Partial<ImageConfigComplete>;\n\ndeclare namespace webpack {\n  export type Compiler = any\n  export type Plugin = any\n  export type Configuration = any\n  export type StatsError = any\n  export type Stats = any\n  export type MultiCompiler = any\n  export type EntryObject = any\n  export type ProgressPlugin = any\n  export type Compilation = any\n  export type javascript = any\n  export type Module = any\n  export type ModuleGraph = any\n  export type WebpackPluginInstance = any\n}\n\ninterface MiddlewareMatcher {\n    regexp: string;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n    originalSource: string;\n}\n\ndeclare global {\n    interface Window {\n        __BUILD_MANIFEST?: Record<string, string[]>;\n        __BUILD_MANIFEST_CB?: Function;\n        __MIDDLEWARE_MATCHERS?: MiddlewareMatcher[];\n        __MIDDLEWARE_MANIFEST_CB?: Function;\n    }\n}\n\ndeclare global {\n    interface Window {\n        __DEV_MIDDLEWARE_MATCHERS?: MiddlewareMatcher[];\n        __DEV_PAGES_MANIFEST?: {\n            pages: string[];\n        };\n        __SSG_MANIFEST_CB?: () => void;\n        __SSG_MANIFEST?: Set<string>;\n    }\n}\n\ndeclare global {\n    interface Window {\n        __NEXT_DATA__: NEXT_DATA;\n    }\n}\n\ndeclare const COMPILER_NAMES: {\n    readonly client: \"client\";\n    readonly server: \"server\";\n    readonly edgeServer: \"edge-server\";\n};\n\n/**\n * Web vitals provided to _app.reportWebVitals by Core Web Vitals plugin developed by Google Chrome team.\n * https://nextjs.org/blog/next-9-4#integrated-web-vitals-reporting\n */\ndeclare const WEB_VITALS: readonly [\"CLS\", \"FCP\", \"FID\", \"INP\", \"LCP\", \"TTFB\"];\ndeclare type NEXT_DATA = {\n    props: Record<string, any>;\n    page: string;\n    query: ParsedUrlQuery;\n    buildId: string;\n    assetPrefix?: string;\n    runtimeConfig?: {\n        [key: string]: any;\n    };\n    nextExport?: boolean;\n    autoExport?: boolean;\n    isFallback?: boolean;\n    dynamicIds?: (string | number)[];\n    err?: Error & {\n        statusCode?: number;\n        source?: typeof COMPILER_NAMES.server | typeof COMPILER_NAMES.edgeServer;\n    };\n    gsp?: boolean;\n    gssp?: boolean;\n    customServer?: boolean;\n    gip?: boolean;\n    appGip?: boolean;\n    locale?: string;\n    locales?: string[];\n    defaultLocale?: string;\n    domainLocales?: DomainLocale[];\n    scriptLoader?: any[];\n    isPreview?: boolean;\n    notFoundSrcPage?: string;\n};\n\ndeclare type NextQueryMetadata = {\n    __nextNotFoundSrcPage?: string;\n    __nextDefaultLocale?: string;\n    __nextFallback?: 'true';\n    /**\n     * The locale that was inferred or explicitly set for the request.\n     *\n     * When this property is mutated, it's important to also update the request\n     * metadata for `_nextInferredDefaultLocale` to ensure that the correct\n     * behavior is applied.\n     */\n    __nextLocale?: string;\n    /**\n     * `1` when the request did not have a locale in the pathname part of the\n     * URL but the default locale was inferred from either the domain or the\n     * configuration.\n     */\n    __nextInferredLocaleFromDefault?: '1';\n    __nextSsgPath?: string;\n    _nextBubbleNoFallback?: '1';\n    __nextDataReq?: '1';\n    __nextCustomErrorRender?: '1';\n};\ndeclare type NextParsedUrlQuery = ParsedUrlQuery & NextQueryMetadata & {\n    amp?: '1';\n};\n\ntype ServerRuntime = 'nodejs' | 'experimental-edge' | 'edge' | undefined\n\n\n// Extend the React types with missing properties\ndeclare module 'react' {\n  // <html amp=\"\"> support\n  interface HtmlHTMLAttributes<T> extends React.HTMLAttributes<T> {\n    amp?: string\n  }\n\n  // <link nonce=\"\"> support\n  interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n    nonce?: string\n  }\n\n  function use<T>(promise: Promise<T> | React.Context<T>): T\n  function cache<T extends Function>(fn: T): T\n}\n\ndeclare global {\n  interface Crypto {\n    readonly subtle: SubtleCrypto\n    getRandomValues<\n      T extends\n        | Int8Array\n        | Int16Array\n        | Int32Array\n        | Uint8Array\n        | Uint16Array\n        | Uint32Array\n        | Uint8ClampedArray\n        | Float32Array\n        | Float64Array\n        | DataView\n        | null\n    >(\n      array: T\n    ): T\n    randomUUID(): string\n  }\n}\n\ndeclare type SubresourceIntegrityAlgorithm = 'sha256' | 'sha384' | 'sha512';\n\ndeclare type NextConfigComplete = Required<NextConfig> & {\n    images: Required<ImageConfigComplete>;\n    typescript: Required<TypeScriptConfig>;\n    configOrigin?: string;\n    configFile?: string;\n    configFileName: string;\n};\ninterface I18NConfig {\n    defaultLocale: string;\n    domains?: DomainLocale[];\n    localeDetection?: false;\n    locales: string[];\n}\ninterface DomainLocale {\n    defaultLocale: string;\n    domain: string;\n    http?: true;\n    locales?: string[];\n}\ninterface ESLintConfig {\n    /** Only run ESLint on these directories with `next lint` and `next build`. */\n    dirs?: string[];\n    /** Do not run ESLint during production builds (`next build`). */\n    ignoreDuringBuilds?: boolean;\n}\ninterface TypeScriptConfig {\n    /** Do not run TypeScript during production builds (`next build`). */\n    ignoreBuildErrors?: boolean;\n    /** Relative path to a custom tsconfig file */\n    tsconfigPath?: string;\n}\ndeclare type JSONValue = string | number | boolean | JSONValue[] | {\n    [k: string]: JSONValue;\n};\ndeclare type TurboLoaderItem = string | {\n    loader: string;\n    options: Record<string, JSONValue>;\n};\ninterface ExperimentalTurboOptions {\n    /**\n     * (`next --turbo` only) A mapping of aliased imports to modules to load in their place.\n     *\n     * @see [Resolve Alias](https://nextjs.org/docs/api-reference/next.config.js/resolve-alias)\n     */\n    resolveAlias?: Record<string, string | string[] | Record<string, string | string[]>>;\n    /**\n     * (`next --turbo` only) A list of webpack loaders to apply when running with Turbopack.\n     *\n     * @see [Turbopack Loaders](https://nextjs.org/docs/api-reference/next.config.js/turbopack-loaders)\n     */\n    loaders?: Record<string, TurboLoaderItem[]>;\n}\ninterface WebpackConfigContext {\n    /** Next.js root directory */\n    dir: string;\n    /** Indicates if the compilation will be done in development */\n    dev: boolean;\n    /** It's `true` for server-side compilation, and `false` for client-side compilation */\n    isServer: boolean;\n    /**  The build id, used as a unique identifier between builds */\n    buildId: string;\n    /** The next.config.js merged with default values */\n    config: NextConfigComplete;\n    /** Default loaders used internally by Next.js */\n    defaultLoaders: {\n        /** Default babel-loader configuration */\n        babel: any;\n    };\n    /** Number of total Next.js pages */\n    totalPages: number;\n    /** The webpack configuration */\n    webpack: any;\n    /** The current server runtime */\n    nextRuntime?: 'nodejs' | 'edge';\n}\ninterface NextJsWebpackConfig {\n    (\n    /** Existing Webpack config */\n    config: any, context: WebpackConfigContext): any;\n}\ninterface ExperimentalConfig {\n    strictNextHead?: boolean;\n    clientRouterFilter?: boolean;\n    clientRouterFilterRedirects?: boolean;\n    clientRouterFilterAllowedRate?: number;\n    externalMiddlewareRewritesResolve?: boolean;\n    extensionAlias?: Record<string, any>;\n    allowedRevalidateHeaderKeys?: string[];\n    fetchCacheKeyPrefix?: string;\n    optimisticClientCache?: boolean;\n    middlewarePrefetch?: 'strict' | 'flexible';\n    legacyBrowsers?: boolean;\n    manualClientBasePath?: boolean;\n    newNextLinkBehavior?: boolean;\n    incrementalCacheHandlerPath?: string;\n    disablePostcssPresetEnv?: boolean;\n    swcMinify?: boolean;\n    swcFileReading?: boolean;\n    cpus?: number;\n    sharedPool?: boolean;\n    proxyTimeout?: number;\n    isrFlushToDisk?: boolean;\n    workerThreads?: boolean;\n    pageEnv?: boolean;\n    optimizeCss?: boolean | Record<string, unknown>;\n    nextScriptWorkers?: boolean;\n    scrollRestoration?: boolean;\n    externalDir?: boolean;\n    /**\n     * The App Router (app directory) enables support for layouts, Server Components, streaming, and colocated data fetching.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#appdir\n     */\n    appDir?: boolean;\n    amp?: {\n        optimizer?: any;\n        validator?: string;\n        skipValidation?: boolean;\n    };\n    disableOptimizedLoading?: boolean;\n    gzipSize?: boolean;\n    craCompat?: boolean;\n    esmExternals?: boolean | 'loose';\n    isrMemoryCacheSize?: number;\n    runtime?: Exclude<ServerRuntime, undefined>;\n    fullySpecified?: boolean;\n    urlImports?: NonNullable<webpack.Configuration['experiments']>['buildHttp'];\n    outputFileTracingRoot?: string;\n    outputFileTracingExcludes?: Record<string, string[]>;\n    outputFileTracingIgnores?: string[];\n    outputFileTracingIncludes?: Record<string, string[]>;\n    swcTraceProfiling?: boolean;\n    forceSwcTransforms?: boolean;\n    /**\n     * This option is removed\n     */\n    swcMinifyDebugOptions?: never;\n    swcPlugins?: Array<[string, Record<string, unknown>]>;\n    largePageDataBytes?: number;\n    /**\n     * If set to `false`, webpack won't fall back to polyfill Node.js modules in the browser\n     * Full list of old polyfills is accessible here:\n     * [webpack/webpack#ModuleNotoundError.js#L13-L42](https://github.com/webpack/webpack/blob/2a0536cf510768111a3a6dceeb14cb79b9f59273/lib/ModuleNotFoundError.js#L13-L42)\n     */\n    fallbackNodePolyfills?: false;\n    enableUndici?: boolean;\n    sri?: {\n        algorithm?: SubresourceIntegrityAlgorithm;\n    };\n    adjustFontFallbacks?: boolean;\n    adjustFontFallbacksWithSizeAdjust?: boolean;\n    /**\n     * A list of packages that should be treated as external in the RSC server build.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#servercomponentsexternalpackages\n     */\n    serverComponentsExternalPackages?: string[];\n    webVitalsAttribution?: Array<typeof WEB_VITALS[number]>;\n    turbo?: ExperimentalTurboOptions;\n    turbotrace?: {\n        logLevel?: 'bug' | 'fatal' | 'error' | 'warning' | 'hint' | 'note' | 'suggestions' | 'info';\n        logDetail?: boolean;\n        logAll?: boolean;\n        contextDirectory?: string;\n        processCwd?: string;\n        /** in `MB` */\n        memoryLimit?: number;\n    };\n    /**\n     * For use with `@next/mdx`. Compile MDX files using the new Rust compiler.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#mdxrs\n     */\n    mdxRs?: boolean;\n    /**\n     * Generate Route types and enable type checking for Link and Router.push, etc.\n     * This option requires `appDir` to be enabled first.\n     * @see https://beta.nextjs.org/docs/api-reference/next.config.js#typedroutes\n     */\n    typedRoutes?: boolean;\n    /**\n     * This option is to enable running the Webpack build in a worker thread.\n     */\n    webpackBuildWorker?: boolean;\n    /**\n     *\n     */\n    instrumentationHook?: boolean;\n}\ndeclare type ExportPathMap = {\n    [path: string]: {\n        page: string;\n        query?: NextParsedUrlQuery;\n        _isAppDir?: boolean;\n        _isDynamicError?: boolean;\n    };\n};\n/**\n * Next configuration object\n * @see [configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/introduction)\n */\ninterface NextConfig extends Record<string, any> {\n    exportPathMap?: (defaultMap: ExportPathMap, ctx: {\n        dev: boolean;\n        dir: string;\n        outDir: string | null;\n        distDir: string;\n        buildId: string;\n    }) => Promise<ExportPathMap> | ExportPathMap;\n    /**\n     * Internationalization configuration\n     *\n     * @see [Internationalization docs](https://nextjs.org/docs/advanced-features/i18n-routing)\n     */\n    i18n?: I18NConfig | null;\n    /**\n     * @since version 11\n     * @see [ESLint configuration](https://nextjs.org/docs/basic-features/eslint)\n     */\n    eslint?: ESLintConfig;\n    /**\n     * @see [Next.js TypeScript documentation](https://nextjs.org/docs/basic-features/typescript)\n     */\n    typescript?: TypeScriptConfig;\n    /**\n     * Headers allow you to set custom HTTP headers for an incoming request path.\n     *\n     * @see [Headers configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/headers)\n     */\n    headers?: () => Promise<Header[]>;\n    /**\n     * Rewrites allow you to map an incoming request path to a different destination path.\n     *\n     * @see [Rewrites configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/rewrites)\n     */\n    rewrites?: () => Promise<Rewrite[] | {\n        beforeFiles: Rewrite[];\n        afterFiles: Rewrite[];\n        fallback: Rewrite[];\n    }>;\n    /**\n     * Redirects allow you to redirect an incoming request path to a different destination path.\n     *\n     * @see [Redirects configuration documentation](https://nextjs.org/docs/api-reference/next.config.js/redirects)\n     */\n    redirects?: () => Promise<Redirect[]>;\n    /**\n     * @see [Moment.js locales excluded by default](https://nextjs.org/docs/upgrading#momentjs-locales-excluded-by-default)\n     */\n    excludeDefaultMomentLocales?: boolean;\n    /**\n     * Before continuing to add custom webpack configuration to your application make sure Next.js doesn't already support your use-case\n     *\n     * @see [Custom Webpack Config documentation](https://nextjs.org/docs/api-reference/next.config.js/custom-webpack-config)\n     */\n    webpack?: NextJsWebpackConfig | null;\n    /**\n     * By default Next.js will redirect urls with trailing slashes to their counterpart without a trailing slash.\n     *\n     * @default false\n     * @see [Trailing Slash Configuration](https://nextjs.org/docs/api-reference/next.config.js/trailing-slash)\n     */\n    trailingSlash?: boolean;\n    /**\n     * Next.js comes with built-in support for environment variables\n     *\n     * @see [Environment Variables documentation](https://nextjs.org/docs/api-reference/next.config.js/environment-variables)\n     */\n    env?: Record<string, string>;\n    /**\n     * Destination directory (defaults to `.next`)\n     */\n    distDir?: string;\n    /**\n     * The build output directory (defaults to `.next`) is now cleared by default except for the Next.js caches.\n     */\n    cleanDistDir?: boolean;\n    /**\n     * To set up a CDN, you can set up an asset prefix and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n     *\n     * @see [CDN Support with Asset Prefix](https://nextjs.org/docs/api-reference/next.config.js/cdn-support-with-asset-prefix)\n     */\n    assetPrefix?: string;\n    /**\n     * By default, `Next` will serve each file in the `pages` folder under a pathname matching the filename.\n     * To disable this behavior and prevent routing based set this to `true`.\n     *\n     * @default true\n     * @see [Disabling file-system routing](https://nextjs.org/docs/advanced-features/custom-server#disabling-file-system-routing)\n     */\n    useFileSystemPublicRoutes?: boolean;\n    /**\n     * @see [Configuring the build ID](https://nextjs.org/docs/api-reference/next.config.js/configuring-the-build-id)\n     */\n    generateBuildId?: () => string | null | Promise<string | null>;\n    /** @see [Disabling ETag Configuration](https://nextjs.org/docs/api-reference/next.config.js/disabling-etag-generation) */\n    generateEtags?: boolean;\n    /** @see [Including non-page files in the pages directory](https://nextjs.org/docs/api-reference/next.config.js/custom-page-extensions) */\n    pageExtensions?: string[];\n    /** @see [Compression documentation](https://nextjs.org/docs/api-reference/next.config.js/compression) */\n    compress?: boolean;\n    /**\n     * The field should only be used when a Next.js project is not hosted on Vercel while using Vercel Analytics.\n     * Vercel provides zero-configuration analytics for Next.js projects hosted on Vercel.\n     *\n     * @default ''\n     * @see [Next.js Analytics](https://nextjs.org/analytics)\n     */\n    analyticsId?: string;\n    /** @see [Disabling x-powered-by](https://nextjs.org/docs/api-reference/next.config.js/disabling-x-powered-by) */\n    poweredByHeader?: boolean;\n    /** @see [Using the Image Component](https://nextjs.org/docs/basic-features/image-optimization#using-the-image-component) */\n    images?: ImageConfig;\n    /** Configure indicators in development environment */\n    devIndicators?: {\n        /** Show \"building...\"\" indicator in development */\n        buildActivity?: boolean;\n        /** Position of \"building...\" indicator in browser */\n        buildActivityPosition?: 'bottom-right' | 'bottom-left' | 'top-right' | 'top-left';\n    };\n    /**\n     * Next.js exposes some options that give you some control over how the server will dispose or keep in memory built pages in development.\n     *\n     * @see [Configuring `onDemandEntries`](https://nextjs.org/docs/api-reference/next.config.js/configuring-onDemandEntries)\n     */\n    onDemandEntries?: {\n        /** period (in ms) where the server will keep pages in the buffer */\n        maxInactiveAge?: number;\n        /** number of pages that should be kept simultaneously without being disposed */\n        pagesBufferLength?: number;\n    };\n    /** @see [`next/amp`](https://nextjs.org/docs/api-reference/next/amp) */\n    amp?: {\n        canonicalBase?: string;\n    };\n    /**\n     * Deploy a Next.js application under a sub-path of a domain\n     *\n     * @see [Base path configuration](https://nextjs.org/docs/api-reference/next.config.js/basepath)\n     */\n    basePath?: string;\n    /** @see [Customizing sass options](https://nextjs.org/docs/basic-features/built-in-css-support#customizing-sass-options) */\n    sassOptions?: {\n        [key: string]: any;\n    };\n    /**\n     * Enable browser source map generation during the production build\n     *\n     * @see [Source Maps](https://nextjs.org/docs/advanced-features/source-maps)\n     */\n    productionBrowserSourceMaps?: boolean;\n    /**\n     * By default, Next.js will automatically inline font CSS at build time\n     *\n     * @default true\n     * @since version 10.2\n     * @see [Font Optimization](https://nextjs.org/docs/basic-features/font-optimization)\n     */\n    optimizeFonts?: boolean;\n    /**\n     * The Next.js runtime is Strict Mode-compliant.\n     *\n     * @see [React Strict Mode](https://nextjs.org/docs/api-reference/next.config.js/react-strict-mode)\n     */\n    reactStrictMode?: boolean | null;\n    /**\n     * Add public (in browser) runtime configuration to your app\n     *\n     * @see [Runtime configuration](https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration)\n     */\n    publicRuntimeConfig?: {\n        [key: string]: any;\n    };\n    /**\n     * Add server runtime configuration to your app\n     *\n     * @see [Runtime configuration](https://nextjs.org/docs/api-reference/next.config.js/runtime-configuration)\n     */\n    serverRuntimeConfig?: {\n        [key: string]: any;\n    };\n    /**\n     * Next.js automatically polyfills node-fetch and enables HTTP Keep-Alive by default.\n     * You may want to disable HTTP Keep-Alive for certain `fetch()` calls or globally.\n     *\n     * @see [Disabling HTTP Keep-Alive](https://nextjs.org/docs/api-reference/next.config.js/disabling-http-keep-alive)\n     */\n    httpAgentOptions?: {\n        keepAlive?: boolean;\n    };\n    /**\n     * During a build, Next.js will automatically trace each page and its dependencies to determine all of the files\n     * that are needed for deploying a production version of your application.\n     *\n     * @see [Output File Tracing](https://nextjs.org/docs/advanced-features/output-file-tracing)\n     */\n    outputFileTracing?: boolean;\n    /**\n     * Timeout after waiting to generate static pages in seconds\n     *\n     * @default 60\n     */\n    staticPageGenerationTimeout?: number;\n    /**\n     * Add `\"crossorigin\"` attribute to generated `<script>` elements generated by `<Head />` or `<NextScript />` components\n     *\n     *\n     * @see [`crossorigin` attribute documentation](https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin)\n     */\n    crossOrigin?: false | 'anonymous' | 'use-credentials';\n    /**\n     * Use [SWC compiler](https://swc.rs) to minify the generated JavaScript\n     *\n     * @see [SWC Minification](https://nextjs.org/docs/advanced-features/compiler#minification)\n     */\n    swcMinify?: boolean;\n    /**\n     * Optionally enable compiler transforms\n     *\n     * @see [Supported Compiler Options](https://nextjs.org/docs/advanced-features/compiler#supported-features)\n     */\n    compiler?: {\n        reactRemoveProperties?: boolean | {\n            properties?: string[];\n        };\n        relay?: {\n            src: string;\n            artifactDirectory?: string;\n            language?: 'typescript' | 'javascript' | 'flow';\n            eagerEsModules?: boolean;\n        };\n        removeConsole?: boolean | {\n            exclude?: string[];\n        };\n        styledComponents?: boolean | {\n            /**\n             * Enabled by default in development, disabled in production to reduce file size,\n             * setting this will override the default for all environments.\n             */\n            displayName?: boolean;\n            topLevelImportPaths?: string[];\n            ssr?: boolean;\n            fileName?: boolean;\n            meaninglessFileNames?: string[];\n            minify?: boolean;\n            transpileTemplateLiterals?: boolean;\n            namespace?: string;\n            pure?: boolean;\n            cssProp?: boolean;\n        };\n        emotion?: boolean | {\n            sourceMap?: boolean;\n            autoLabel?: 'dev-only' | 'always' | 'never';\n            labelFormat?: string;\n            importMap?: {\n                [importName: string]: {\n                    [exportName: string]: {\n                        canonicalImport?: [string, string];\n                        styledBaseImport?: [string, string];\n                    };\n                };\n            };\n        };\n    };\n    /**\n     * The type of build output.\n     * - `undefined`: The default build output, `.next` directory, that works with production mode `next start` or a hosting provider like Vercel\n     * - `'standalone'`: A standalone build output, `.next/standalone` directory, that only includes necessary files/dependencies. Useful for self-hosting in a Docker container.\n     * - `'export'`: An exported build output, `out` directory, that only includes static HTML/CSS/JS. Useful for self-hosting without a Node.js server.\n     * @see [Output File Tracing](https://nextjs.org/docs/advanced-features/output-file-tracing)\n     * @see [Static HTML Export](https://nextjs.org/docs/advanced-features/static-html-export)\n     */\n    output?: 'standalone' | 'export';\n    /**\n     * Automatically transpile and bundle dependencies from local packages (like monorepos) or from external dependencies (`node_modules`). This replaces the\n     * `next-transpile-modules` package.\n     * @see [transpilePackages](https://beta.nextjs.org/docs/api-reference/next.config.js#transpilepackages)\n     */\n    transpilePackages?: string[];\n    skipMiddlewareUrlNormalize?: boolean;\n    skipTrailingSlashRedirect?: boolean;\n    modularizeImports?: Record<string, {\n        transform: string;\n        preventFullImport?: boolean;\n        skipDefaultConversion?: boolean;\n    }>;\n    /**\n     * Enable experimental features. Note that all experimental features are subject to breaking changes in the future.\n     */\n    experimental?: ExperimentalConfig;\n}\n\ndeclare type RouteHas = {\n    type: 'header' | 'query' | 'cookie';\n    key: string;\n    value?: string;\n} | {\n    type: 'host';\n    key?: undefined;\n    value: string;\n};\ndeclare type Rewrite = {\n    source: string;\n    destination: string;\n    basePath?: false;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\ndeclare type Header = {\n    source: string;\n    basePath?: false;\n    locale?: false;\n    headers: Array<{\n        key: string;\n        value: string;\n    }>;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n};\ndeclare type Redirect = {\n    source: string;\n    destination: string;\n    basePath?: false;\n    locale?: false;\n    has?: RouteHas[];\n    missing?: RouteHas[];\n} & ({\n    statusCode?: never;\n    permanent: boolean;\n} | {\n    statusCode: number;\n    permanent?: never;\n});\n\n/** Creates a Next.js plugin that configures Monaco Editor. */\ndeclare function createMonacoPlugin({ theme, types, }: {\n    theme: string;\n    types: string[];\n}): (nextConfig?: NextConfig$1) => () => Promise<{\n    exportPathMap?: (defaultMap: ExportPathMap, ctx: {\n        dev: boolean;\n        dir: string;\n        outDir: string;\n        distDir: string;\n        buildId: string;\n    }) => ExportPathMap | Promise<ExportPathMap>;\n    i18n?: I18NConfig;\n    eslint?: ESLintConfig;\n    typescript?: TypeScriptConfig;\n    headers?: () => Promise<Header[]>;\n    rewrites?: () => Promise<Rewrite[] | {\n        beforeFiles: Rewrite[];\n        afterFiles: Rewrite[];\n        fallback: Rewrite[];\n    }>;\n    redirects?: () => Promise<Redirect[]>;\n    excludeDefaultMomentLocales?: boolean;\n    webpack?: NextJsWebpackConfig;\n    trailingSlash?: boolean;\n    env?: Record<string, string>;\n    distDir?: string;\n    cleanDistDir?: boolean;\n    assetPrefix?: string;\n    useFileSystemPublicRoutes?: boolean;\n    generateBuildId?: () => string | Promise<string>;\n    generateEtags?: boolean;\n    pageExtensions?: string[];\n    compress?: boolean;\n    analyticsId?: string;\n    poweredByHeader?: boolean;\n    images?: Partial<ImageConfigComplete>;\n    devIndicators?: {\n        buildActivity?: boolean;\n        buildActivityPosition?: \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\";\n    };\n    onDemandEntries?: {\n        maxInactiveAge?: number;\n        pagesBufferLength?: number;\n    };\n    amp?: {\n        canonicalBase?: string;\n    };\n    basePath?: string;\n    sassOptions?: {\n        [key: string]: any;\n    };\n    productionBrowserSourceMaps?: boolean;\n    optimizeFonts?: boolean;\n    reactStrictMode?: boolean;\n    publicRuntimeConfig?: {\n        [key: string]: any;\n    };\n    serverRuntimeConfig?: {\n        [key: string]: any;\n    };\n    httpAgentOptions?: {\n        keepAlive?: boolean;\n    };\n    outputFileTracing?: boolean;\n    staticPageGenerationTimeout?: number;\n    crossOrigin?: false | \"anonymous\" | \"use-credentials\";\n    swcMinify?: boolean;\n    compiler?: {\n        reactRemoveProperties?: boolean | {\n            properties?: string[];\n        };\n        relay?: {\n            src: string;\n            artifactDirectory?: string;\n            language?: \"typescript\" | \"javascript\" | \"flow\";\n            eagerEsModules?: boolean;\n        };\n        removeConsole?: boolean | {\n            exclude?: string[];\n        };\n        styledComponents?: boolean | {\n            displayName?: boolean;\n            topLevelImportPaths?: string[];\n            ssr?: boolean;\n            fileName?: boolean;\n            meaninglessFileNames?: string[];\n            minify?: boolean;\n            transpileTemplateLiterals?: boolean;\n            namespace?: string;\n            pure?: boolean;\n            cssProp?: boolean;\n        };\n        emotion?: boolean | {\n            sourceMap?: boolean;\n            autoLabel?: \"dev-only\" | \"always\" | \"never\";\n            labelFormat?: string;\n            importMap?: {\n                [importName: string]: {\n                    [exportName: string]: {\n                        canonicalImport?: [string, string];\n                        styledBaseImport?: [string, string];\n                    };\n                };\n            };\n        };\n    };\n    output?: \"standalone\" | \"export\";\n    transpilePackages: string[];\n    skipMiddlewareUrlNormalize?: boolean;\n    skipTrailingSlashRedirect?: boolean;\n    modularizeImports?: Record<string, {\n        transform: string;\n        preventFullImport?: boolean;\n        skipDefaultConversion?: boolean;\n    }>;\n    experimental?: ExperimentalConfig;\n}>;\n\nexport { createMonacoPlugin };\n","path":"file:///node_modules/next-monaco/plugin/index.d.ts"}]]